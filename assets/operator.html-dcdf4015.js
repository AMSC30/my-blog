import{_ as e,p as a,q as l,Y as p,s as t}from"./framework-e1bed10d.js";const r={},u=p('<h1 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符" aria-hidden="true">#</a> 操作符</h1><p>加法运算符 基本规则 加法运算符（+）是最常见的运算符，用来求两个数值的和。 1 + 1 // 2</p><p>JavaScript 允许非数值的相加。 true + true // 2 1 + true // 2</p><p>上面代码中，第一行是两个布尔值相加，第二行是数值与布尔值相加。这两种情况，布尔值都会自动转成数值，然后再相加。 比较特殊的是，如果是两个字符串相加，这时加法运算符会变成连接运算符，返回一个新的字符串，将两个原字符串连接在一起。 &#39;a&#39; + &#39;bc&#39; // &quot;abc&quot;</p><p>如果一个运算子是字符串，另一个运算子是非字符串，这时非字符串会转成字符串，再连接在一起。 1 + &#39;a&#39; // &quot;1a&quot; false + &#39;a&#39; // &quot;falsea&quot;</p><p>加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。由于加法运算符存在重载，可能执行两种运算，使用的时候必须很小心。 &#39;3&#39; + 4 + 5 // &quot;345&quot; 3 + 4 + &#39;5&#39; // &quot;75&quot;</p><p>上面代码中，由于从左到右的运算次序，字符串的位置不同会导致不同的结果。 除了加法运算符，其他算术运算符（比如减法、除法和乘法）都不会发生重载。它们的规则是：所有运算子一律转为数值，再进行相应的数学运算。 1 - &#39;2&#39; // -1 1 * &#39;2&#39; // 2 1 / &#39;2&#39; // 0.5</p><p>上面代码中，减法、除法和乘法运算符，都是将字符串自动转为数值，然后再运算。 对象的相加 如果运算子是对象，必须先转成原始类型的值，然后再相加。 var obj = { p: 1 }; obj + 2 // &quot;[object Object]2&quot;</p><p>上面代码中，对象obj转成原始类型的值是[object Object]，再加2就得到了上面的结果。 对象转成原始类型的值，规则如下。 首先，自动调用对象的valueOf方法。 var obj = { p: 1 }; obj.valueOf() // { p: 1 }</p><p>一般来说，对象的valueOf方法总是返回对象自身，这时再自动调用对象的toString方法，将其转为字符串。 var obj = { p: 1 }; obj.valueOf().toString() // &quot;[object Object]&quot;</p><p>如果运算子是一个Date对象的实例，那么会优先执行toString方法。 var obj = new Date(); obj.valueOf = function () { return 1 }; obj.toString = function () { return &#39;hello&#39; };</p><p>obj + 2 // &quot;hello2&quot;</p><p>余数运算符 余数运算符（%）返回前一个运算子被后一个运算子除，所得的余数。 12 % 5 // 2</p><p>需要注意的是，运算结果的正负号由第一个运算子的正负号决定。 -1 % 2 // -1 1 % -2 // 1</p><p>所以，为了得到负数的正确余数值，可以先使用绝对值函数。 // 错误的写法 function isOdd(n) { return n % 2 === 1; } isOdd(-5) // false isOdd(-4) // false</p><p>// 正确的写法 function isOdd(n) { return Math.abs(n % 2) === 1; } isOdd(-5) // true isOdd(-4) // false</p><p>余数运算符还可以用于浮点数的运算。但是，由于浮点数不是精确的值，无法得到完全准确的结果。 6.5 % 2.1 // 0.19999999999999973</p><p>自增和自减运算符 自增和自减运算符，是一元运算符，只需要一个运算子。它们的作用是将运算子首先转为数值，然后加上1或者减去1。它们会修改原始变量。 var x = 1; ++x // 2 x // 2</p><p>--x // 1 x // 1</p><p>上面代码的变量x自增后，返回2，再进行自减，返回1。这两种情况都会使得，原始变量x的值发生改变。 运算之后，变量的值发生变化，这种效应叫做运算的副作用（side effect）。自增和自减运算符是仅有的两个具有副作用的运算符，其他运算符都不会改变变量的值。 自增和自减运算符有一个需要注意的地方，就是放在变量之后，会先返回变量操作前的值，再进行自增/自减操作；放在变量之前，会先进行自增/自减操作，再返回变量操作后的值。 var x = 1; var y = 1;</p><p>x++ // 1 ++y // 2</p><p>上面代码中，x是先返回当前值，然后自增，所以得到1；y是先自增，然后返回新的值，所以得到2。 数值运算符，负数值运算符 数值运算符（+）同样使用加号，但它是一元运算符（只需要一个操作数），而加法运算符是二元运算符（需要两个操作数）。 数值运算符的作用在于可以将任何值转为数值（与Number函数的作用相同）。 +true // 1 +[] // 0 +{} // NaN</p><p>上面代码表示，非数值经过数值运算符以后，都变成了数值（最后一行NaN也是数值）。具体的类型转换规则，参见《数据类型转换》一章。 负数值运算符（-），也同样具有将一个值转为数值的功能，只不过得到的值正负相反。连用两个负数值运算符，等同于数值运算符。 var x = 1; -x // -1 -(-x) // 1</p><p>上面代码最后一行的圆括号不可少，否则会变成自减运算符。 数值运算符号和负数值运算符，都会返回一个新的值，而不会改变原始变量的值。 指数运算符 指数运算符（<strong>）完成指数运算，前一个运算子是底数，后一个运算子是指数。 2</strong> 4 // 16</p><p>注意，指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算。 // 相当于 2 <strong>(3</strong> 2) 2 <strong>3</strong> 2 // 512</p><p>上面代码中，由于指数运算符是右结合，所以先计算第二个指数运算符，而不是第一个。 赋值运算符 赋值运算符（Assignment Operators）用于给变量赋值。 最常见的赋值运算符，当然就是等号（=）。 // 将 1 赋值给变量 x var x = 1;</p><p>// 将变量 y 的值赋值给变量 x var x = y;</p><p>赋值运算符还可以与其他运算符结合，形成变体。下面是与算术运算符的结合。 // 等同于 x = x + y x += y</p><p>// 等同于 x = x - y x -= y</p><p>// 等同于 x = x <em>y x</em>= y</p><p>// 等同于 x = x / y x /= y</p><p>// 等同于 x = x % y x %= y</p><p>// 等同于 x = x <strong>y x</strong>= y</p><p>下面是与位运算符的结合（关于位运算符，请见后文的介绍）。 // 等同于 x = x &gt;&gt; y x &gt;&gt;= y</p><p>// 等同于 x = x &lt;&lt; y x &lt;&lt;= y</p><p>// 等同于 x = x &gt;&gt;&gt; y x &gt;&gt;&gt;= y</p><p>// 等同于 x = x &amp; y x &amp;= y</p><p>// 等同于 x = x | y x |= y</p><p>// 等同于 x = x ^ y x ^= y</p><p>这些复合的赋值运算符，都是先进行指定运算，然后将得到值返回给左边的变量。 二进制位运算符 概述 二进制位运算符用于直接对二进制位进行计算，一共有7个。</p><ul><li>或运算符（or）：符号为|，表示若两个二进制位都为0，则结果为0，否则为1。</li><li>与运算符（and）：符号为&amp;，表示若两个二进制位都为1，则结果为1，否则为0。</li><li>否运算符（not）：符号为~，表示对一个二进制位取反。</li><li>异或运算符（xor）：符号为^，表示若两个二进制位不相同，则结果为1，否则为0。</li><li>左移运算符（left shift）：符号为&lt;&lt;，详见下文解释。</li><li>右移运算符（right shift）：符号为&gt;&gt;，详见下文解释。</li><li>头部补零的右移运算符（zero filled right shift）：符号为&gt;&gt;&gt;，详见下文解释。 有一点需要特别注意，位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。 i = i | 0;</li></ul><p>上面这行代码的意思，就是将i（不管是整数或小数）转为32位整数。 利用这个特性，可以写出一个函数，将任意数值转为32位整数。 function toInt32(x) { return x | 0; }</p><p>上面这个函数将任意值与0进行一次或运算，这个位运算会自动将一个值转为32位整数。下面是这个函数的用法。 toInt32(1.001) // 1 toInt32(1.999) // 1 toInt32(1) // 1 toInt32(-1) // -1 toInt32(Math.pow(2, 32) + 1) // 1 toInt32(Math.pow(2, 32) - 1) // -1</p><p>上面代码中，toInt32可以将小数转为整数。对于一般的整数，返回值不会有任何变化。对于大于或等于2的32次方的整数，大于32位的数位都会被舍去。 二进制或运算符 二进制或运算符（|）逐位比较两个运算子，两个二进制位之中只要有一个为1，就返回1，否则返回0。 0 | 3 // 3</p><p>上面代码中，0和3的二进制形式分别是00和11，所以进行二进制或运算会得到11（即3）。 位运算只对整数有效，遇到小数时，会将小数部分舍去，只保留整数部分。所以，将一个小数与0进行二进制或运算，等同于对该数去除小数部分，即取整数位。 2.9 | 0 // 2 -2.9 | 0 // -2</p><p>需要注意的是，这种取整方法不适用超过32位整数最大值2147483647的数。 2147483649.4 | 0; // -2147483647</p><p>二进制与运算符 二进制与运算符（&amp;）的规则是逐位比较两个运算子，两个二进制位之中只要有一个位为0，就返回0，否则返回1。 0 &amp; 3 // 0</p><p>上面代码中，0（二进制00）和3（二进制11）进行二进制与运算会得到00（即0）。 二进制否运算符 二进制否运算符（~）将每个二进制位都变为相反值（0变为1，1变为0）。它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。 ~ 3 // -4</p><p>上面表达式对3进行二进制否运算，得到-4。之所以会有这样的结果，是因为位运算时，JavaScript 内部将所有的运算子都转为32位的二进制整数再进行运算。 3的32位整数形式是00000000000000000000000000000011，二进制否运算以后得到11111111111111111111111111111100。由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。这个数减去1等于11111111111111111111111111111011，再取一次反得到00000000000000000000000000000100，再加上负号就是-4。考虑到这样的过程比较麻烦，可以简单记忆成，一个数与自身的取反值相加，等于-1。 ~ -3 // 2</p><p>上面表达式可以这样算，-3的取反值等于-1减去-3，结果为2。 对一个整数连续两次二进制否运算，得到它自身。 ~~3 // 3</p><p>所有的位运算都只对整数有效。二进制否运算遇到小数时，也会将小数部分舍去，只保留整数部分。所以，对一个小数连续进行两次二进制否运算，能达到取整效果。 ~~2.9 // 2 ~~47.11 // 47 ~~1.9999 // 1 ~~3 // 3</p><p>使用二进制否运算取整，是所有取整方法中最快的一种。 对字符串进行二进制否运算，JavaScript 引擎会先调用Number函数，将字符串转为数值。 // 相当于~Number(&#39;011&#39;) ~&#39;011&#39; // -12</p><p>// 相当于~Number(&#39;42 cats&#39;) ~&#39;42 cats&#39; // -1</p><p>// 相当于~Number(&#39;0xcafebabe&#39;) ~&#39;0xcafebabe&#39; // 889275713</p><p>// 相当于~Number(&#39;deadbeef&#39;) ~&#39;deadbeef&#39; // -1</p><p>Number函数将字符串转为数值的规则，参见《数据的类型转换》一章。 对于其他类型的值，二进制否运算也是先用Number转为数值，然后再进行处理。 // 相当于 ~Number([]) ~[] // -1</p><p>// 相当于 ~Number(NaN) ~NaN // -1</p><p>// 相当于 ~Number(null) ~null // -1</p><p>异或运算符 异或运算（^）在两个二进制位不同时返回1，相同时返回0。 0 ^ 3 // 3</p><p>上面表达式中，0（二进制00）与3（二进制11）进行异或运算，它们每一个二进制位都不同，所以得到11（即3）。 “异或运算”有一个特殊运用，连续对两个数a和b进行三次异或运算，a^=b; b^=a; a^=b;，可以互换它们的值。这意味着，使用“异或运算”可以在不引入临时变量的前提下，互换两个变量的值。 var a = 10; var b = 99;</p><p>a ^= b, b ^= a, a ^= b;</p><p>a // 99 b // 10</p><p>这是互换两个变量的值的最快方法。 异或运算也可以用来取整。 12.9 ^ 0 // 12</p><p>左移运算符 左移运算符（&lt;&lt;）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方。向左移动的时候，最高位的符号位是一起移动的。 // 4 的二进制形式为100， // 左移一位为1000（即十进制的8） // 相当于乘以2的1次方 4 &lt;&lt; 1 // 8</p><p>-4 &lt;&lt; 1 // -8</p><p>上面代码中，-4左移一位得到-8，是因为-4的二进制形式是11111111111111111111111111111100，左移一位后得到11111111111111111111111111111000，该数转为十进制（减去1后取反，再加上负号）即为-8。 如果左移0位，就相当于将该数值转为32位整数，等同于取整，对于正数和负数都有效。 13.5 &lt;&lt; 0 // 13</p><p>-13.5 &lt;&lt; 0 // -13</p><p>左移运算符用于二进制数值非常方便。 var color = {r: 186, g: 218, b: 85};</p><p>// RGB to HEX // (1 &lt;&lt; 24)的作用为保证结果是6位数 var rgb2hex = function(r, g, b) { return &#39;#&#39; + ((1 &lt;&lt; 24) + (r &lt;&lt; 16) + (g &lt;&lt; 8) + b) .toString(16) // 先转成十六进制，然后返回字符串 .substr(1); // 去除字符串的最高位，返回后面六个字符串 }</p><p>rgb2hex(color.r, color.g, color.b) // &quot;#bada55&quot;</p><p>上面代码使用左移运算符，将颜色的 RGB 值转为 HEX 值。 右移运算符 右移运算符（&gt;&gt;）表示将一个数的二进制值向右移动指定的位数。如果是正数，头部全部补0；如果是负数，头部全部补1。右移运算符基本上相当于除以2的指定次方（最高位即符号位参与移动）。 4 &gt;&gt; 1 // 2 /* // 因为4的二进制形式为 00000000000000000000000000000100， // 右移一位得到 00000000000000000000000000000010， // 即为十进制的2 */</p><p>-4 &gt;&gt; 1 // -2 /* // 因为-4的二进制形式为 11111111111111111111111111111100， // 右移一位，头部补1，得到 11111111111111111111111111111110, // 即为十进制的-2 */</p><p>右移运算可以模拟 2 的整除运算。 5 &gt;&gt; 1 // 2 // 相当于 5 / 2 = 2</p><p>21 &gt;&gt; 2 // 5 // 相当于 21 / 4 = 5</p><p>21 &gt;&gt; 3 // 2 // 相当于 21 / 8 = 2</p><p>21 &gt;&gt; 4 // 1 // 相当于 21 / 16 = 1</p><p>头部补零的右移运算符 头部补零的右移运算符（&gt;&gt;&gt;）与右移运算符（&gt;&gt;）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（&gt;&gt;）完全一致，区别主要在于负数。 4 &gt;&gt;&gt; 1 // 2</p><p>-4 &gt;&gt;&gt; 1 // 2147483646 /* // 因为-4的二进制形式为11111111111111111111111111111100， // 带符号位的右移一位，得到01111111111111111111111111111110， // 即为十进制的2147483646。 */</p><p>这个运算实际上将一个值转为32位无符号整数。 查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符。 -1 &gt;&gt;&gt; 0 // 4294967295</p><p>上面代码表示，-1作为32位整数时，内部的储存形式使用无符号整数格式解读，值为 4294967295（即(2^32)-1，等于11111111111111111111111111111111）。 开关作用 位运算符可以用作设置对象属性的开关。 假定某个对象有四个开关，每个开关都是一个变量。那么，可以设置一个四位的二进制数，它的每个位对应一个开关。 var FLAG_A = 1; // 0001 var FLAG_B = 2; // 0010 var FLAG_C = 4; // 0100 var FLAG_D = 8; // 1000</p><p>上面代码设置 A、B、C、D 四个开关，每个开关分别占有一个二进制位。 然后，就可以用二进制与运算，检查当前设置是否打开了指定开关。 var flags = 5; // 二进制的0101</p><p>if (flags &amp; FLAG_C) { // ... } // 0101 &amp; 0100 =&gt; 0100 =&gt; true</p><p>上面代码检验是否打开了开关C。如果打开，会返回true，否则返回false。 现在假设需要打开A、B、D三个开关，我们可以构造一个掩码变量。 var mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 =&gt; 1011</p><p>上面代码对A、B、D三个变量进行二进制或运算，得到掩码值为二进制的1011。 有了掩码，二进制或运算可以确保打开指定的开关。 flags = flags | mask;</p><p>上面代码中，计算后得到的flags变量，代表三个开关的二进制位都打开了。 二进制与运算可以将当前设置中凡是与开关设置不一样的项，全部关闭。 flags = flags &amp; mask;</p><p>异或运算可以切换（toggle）当前设置，即第一次执行可以得到当前设置的相反值，再执行一次又得到原来的值。 flags = flags ^ mask;</p><p>二进制否运算可以翻转当前设置，即原设置为0，运算后变为1；原设置为1，运算后变为0。 flags = ~flags;</p><p>布尔运算符 概述 布尔运算符用于将表达式转为布尔值，一共包含四个运算符。</p><ul><li>取反运算符：!</li><li>且运算符：&amp;&amp;</li><li>或运算符：||</li><li>三元运算符：?: 取反运算符（!） 取反运算符是一个感叹号，用于将布尔值变为相反值，即true变成false，false变成true。 !true // false !false // true</li></ul><p>对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为true，其他值都为false。</p><ul><li>undefined</li><li>null</li><li>false</li><li>0</li><li>NaN</li><li>空字符串（&#39;&#39;） !undefined // true !null // true !0 // true !NaN // true !&quot;&quot; // true</li></ul><p>!54 // false !&#39;hello&#39; // false ![] // false !{} // false</p><p>上面代码中，不管什么类型的值，经过取反运算后，都变成了布尔值。 如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与Boolean函数的作用相同。这是一种常用的类型转换的写法。 !!x // 等同于 Boolean(x)</p><p>上面代码中，不管x是什么类型的值，经过两次取反运算后，变成了与Boolean函数结果相同的布尔值。所以，两次取反就是将一个值转为布尔值的简便写法。 且运算符（&amp;&amp;） 且运算符（&amp;&amp;）往往用于多个表达式的求值。 它的运算规则是：如果第一个运算子的布尔值为true，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为false，则直接返回第一个运算子的值，且不再对第二个运算子求值。 &#39;t&#39; &amp;&amp; &#39;&#39; // &quot;&quot; &#39;t&#39; &amp;&amp; &#39;f&#39; // &quot;f&quot; &#39;t&#39; &amp;&amp; (1 + 2) // 3 &#39;&#39; &amp;&amp; &#39;f&#39; // &quot;&quot; &#39;&#39; &amp;&amp; &#39;&#39; // &quot;&quot;</p><p>var x = 1; (1 - 1) &amp;&amp; ( x += 1) // 0 x // 1</p><p>上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为false，则直接返回它的值0，而不再对第二个运算子求值，所以变量x的值没变。 这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代if结构，比如下面是一段if结构的代码，就可以用且运算符改写。 if (i) { doSomething(); }</p><p>// 等价于</p><p>i &amp;&amp; doSomething();</p><p>上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。 且运算符可以多个连用，这时返回第一个布尔值为false的表达式的值。如果所有表达式的布尔值都为true，则返回最后一个表达式的值。 true &amp;&amp; &#39;foo&#39; &amp;&amp; &#39;&#39; &amp;&amp; 4 &amp;&amp; &#39;foo&#39; &amp;&amp; true // &#39;&#39;</p><p>1 &amp;&amp; 2 &amp;&amp; 3 // 3</p><p>上面代码中，例一里面，第一个布尔值为false的表达式为第三个表达式，所以得到一个空字符串。例二里面，所有表达式的布尔值都是true，所以返回最后一个表达式的值3。 或运算符（||） 或运算符（||）也用于多个表达式的求值。它的运算规则是：如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为false，则返回第二个运算子的值。 &#39;t&#39; || &#39;&#39; // &quot;t&quot; &#39;t&#39; || &#39;f&#39; // &quot;t&quot; &#39;&#39; || &#39;f&#39; // &quot;f&quot; &#39;&#39; || &#39;&#39; // &quot;&quot;</p><p>短路规则对这个运算符也适用。 var x = 1; true || (x = 2) // true x // 1</p><p>上面代码中，或运算符的第一个运算子为true，所以直接返回true，不再运行第二个运算子。所以，x的值没有改变。这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”（short-cut）。 或运算符可以多个连用，这时返回第一个布尔值为true的表达式的值。如果所有表达式都为false，则返回最后一个表达式的值。 false || 0 || &#39;&#39; || 4 || &#39;foo&#39; || true // 4</p><p>false || 0 || &#39;&#39; // &#39;&#39;</p><p>上面代码中，例一里面，第一个布尔值为true的表达式是第四个表达式，所以得到数值4。例二里面，所有表达式的布尔值都为false，所以返回最后一个表达式的值。 或运算符常用于为一个变量设置默认值。 function saveText(text) { text = text || &#39;&#39;; // ... }</p><p>// 或者写成 saveText(this.text || &#39;&#39;)</p><p>上面代码表示，如果函数调用时，没有提供参数，则该参数默认设置为空字符串。 三元条件运算符（?:） 三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为true，则返回第二个表达式的值，否则返回第三个表达式的值。 &#39;t&#39; ? &#39;hello&#39; : &#39;world&#39; // &quot;hello&quot; 0 ? &#39;hello&#39; : &#39;world&#39; // &quot;world&quot;</p><p>上面代码的t和0的布尔值分别为true和false，所以分别返回第二个和第三个表达式的值。 通常来说，三元条件表达式与if...else语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，if...else是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合，只能使用三元条件表达式，而不能使用if..else。 console.log(true ? &#39;T&#39; : &#39;F&#39;);</p><p>上面代码中，console.log方法的参数必须是一个表达式，这时就只能使用三元条件表达式。如果要用if...else语句，就必须改变整个代码写法了。 比较运算符 概述 比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件。 2 &gt; 1 // true</p><p>上面代码比较2是否大于1，返回true。 注意，比较运算符可以比较各种类型的值，不仅仅是数值。 JavaScript 一共提供了8个比较运算符。</p><ul><li><blockquote><p>大于运算符</p></blockquote></li><li>&lt; 小于运算符</li><li>&lt;= 小于或等于运算符</li><li><blockquote><p>= 大于或等于运算符</p></blockquote></li><li>== 相等运算符</li><li>=== 严格相等运算符</li><li>!= 不相等运算符</li><li>!== 严格不相等运算符 这八个比较运算符分成两类：相等比较和非相等比较。两者的规则是不一样的，对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；否则，将两个运算子都转成数值，再比较数值的大小。 非相等运算符：字符串的比较 字符串按照字典顺序进行比较。 &#39;cat&#39; &gt; &#39;dog&#39; // false &#39;cat&#39; &gt; &#39;catalog&#39; // false</li></ul><p>JavaScript 引擎内部首先比较首字符的 Unicode 码点。如果相等，再比较第二个字符的 Unicode 码点，以此类推。 &#39;cat&#39; &gt; &#39;Cat&#39; // true&#39;</p><p>上面代码中，小写的c的 Unicode 码点（99）大于大写的C的 Unicode 码点（67），所以返回true。 由于所有字符都有 Unicode 码点，因此汉字也可以比较。 &#39;大&#39; &gt; &#39;小&#39; // false</p><p>上面代码中，“大”的 Unicode 码点是22823，“小”是23567，因此返回false。 非相等运算符：非字符串的比较 如果两个运算子之中，至少有一个不是字符串，需要分成以下两种情况。 （1）原始类型值 如果两个运算子都是原始类型的值，则是先转成数值再比较。 5 &gt; &#39;4&#39; // true // 等同于 5 &gt; Number(&#39;4&#39;) // 即 5 &gt; 4</p><p>true &gt; false // true // 等同于 Number(true) &gt; Number(false) // 即 1 &gt; 0</p><p>2 &gt; true // true // 等同于 2 &gt; Number(true) // 即 2 &gt; 1</p><p>这里需要注意与NaN的比较。任何值（包括NaN本身）与NaN使用非相等运算符进行比较，返回的都是false。 1 &gt; NaN // false 1 &lt;= NaN // false &#39;1&#39; &gt; NaN // false &#39;1&#39; &lt;= NaN // false NaN &gt; NaN // false NaN &lt;= NaN // false</p><p>（2）对象 如果运算子是对象，会转为原始类型的值，再进行比较。 对象转换成原始类型的值，算法是先调用valueOf方法；如果返回的还是对象，再接着调用toString方法 var x = [2]; x &gt; &#39;11&#39; // true // 等同于 [2].valueOf().toString() &gt; &#39;11&#39; // 即 &#39;2&#39; &gt; &#39;11&#39;</p><p>x.valueOf = function () { return &#39;1&#39; }; x &gt; &#39;11&#39; // false // 等同于 [2].valueOf() &gt; &#39;11&#39; // 即 &#39;1&#39; &gt; &#39;11&#39;</p><p>两个对象之间的比较也是如此。 [2] &gt; [1] // true // 等同于 [2].valueOf().toString() &gt; [1].valueOf().toString() // 即 &#39;2&#39; &gt; &#39;1&#39;</p><p>[2] &gt; [11] // true // 等同于 [2].valueOf().toString() &gt; [11].valueOf().toString() // 即 &#39;2&#39; &gt; &#39;11&#39;</p><p>{ x: 2 } &gt;= { x: 1 } // true // 等同于 { x: 2 }.valueOf().toString() &gt;= { x: 1 }.valueOf().toString() // 即 &#39;[object Object]&#39; &gt;= &#39;[object Object]&#39;</p><p>严格相等运算符 JavaScript 提供两种相等运算符：==和===。 简单说，它们的区别是相等运算符（==）比较两个值是否相等，严格相等运算符（===）比较它们是否为“同一个值”。如果两个值不是同一类型，严格相等运算符（===）直接返回false，而相等运算符（==）会将它们转换成同一个类型，再用严格相等运算符进行比较。 本节介绍严格相等运算符的算法。 （1）不同类型的值 如果两个值的类型不同，直接返回false。 1 === &quot;1&quot; // false true === &quot;true&quot; // false</p><p>上面代码比较数值的1与字符串的“1”、布尔值的true与字符串&quot;true&quot;，因为类型不同，结果都是false。 （2）同一类的原始类型值 同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false。 1 === 0x1 // true</p><p>上面代码比较十进制的1与十六进制的1，因为类型和值都相同，返回true。 需要注意的是，NaN与任何值都不相等（包括自身）。另外，正0等于负0。 NaN === NaN // false +0 === -0 // true</p><p>（3）复合类型值 两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。 {} === {} // false [] === [] // false (function () {} === function () {}) // false</p><p>上面代码分别比较两个空对象、两个空数组、两个空函数，结果都是不相等。原因是对于复合类型的值，严格相等运算比较的是，它们是否引用同一个内存地址，而运算符两边的空对象、空数组、空函数的值，都存放在不同的内存地址，结果当然是false。 如果两个变量引用同一个对象，则它们相等。 var v1 = {}; var v2 = v1; v1 === v2 // true</p><p>注意，对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值。 var obj1 = {}; var obj2 = {};</p><p>obj1 &gt; obj2 // false obj1 &lt; obj2 // false obj1 === obj2 // false</p><p>上面的三个比较，前两个比较的是值，最后一个比较的是地址，所以都返回false。 （4）undefined 和 null undefined和null与自身严格相等。 undefined === undefined // true null === null // true</p><p>由于变量声明后默认值是undefined，因此两个只声明未赋值的变量是相等的。 var v1; var v2; v1 === v2 // true</p><p>严格不相等运算符 严格相等运算符有一个对应的“严格不相等运算符”（!==），它的算法就是先求严格相等运算符的结果，然后返回相反值。 1 !== &#39;1&#39; // true // 等同于 !(1 === &#39;1&#39;)</p><p>上面代码中，感叹号!是求出后面表达式的相反值。 相等运算符 相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样。 1 == 1.0 // 等同于 1 === 1.0</p><p>比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。下面分成几种情况，讨论不同类型的值互相比较的规则。 （1）原始类型值 原始类型的值会转换成数值再进行比较。 1 == true // true // 等同于 1 === Number(true)</p><p>0 == false // true // 等同于 0 === Number(false)</p><p>2 == true // false // 等同于 2 === Number(true)</p><p>2 == false // false // 等同于 2 === Number(false)</p><p>&#39;true&#39; == true // false // 等同于 Number(&#39;true&#39;) === Number(true) // 等同于 NaN === 1</p><p>&#39;&#39; == 0 // true // 等同于 Number(&#39;&#39;) === 0 // 等同于 0 === 0</p><p>&#39;&#39; == false // true // 等同于 Number(&#39;&#39;) === Number(false) // 等同于 0 === 0</p><p>&#39;1&#39; == true // true // 等同于 Number(&#39;1&#39;) === Number(true) // 等同于 1 === 1</p><p>&#39;\\n 123 \\t&#39; == 123 // true // 因为字符串转为数字时，省略前置和后置的空格</p><p>上面代码将字符串和布尔值都转为数值，然后再进行比较。具体的字符串与布尔值的类型转换规则，参见《数据类型转换》一章。 （2）对象与原始类型值比较 对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转换成原始类型的值，再进行比较。 具体来说，先调用对象的valueOf()方法，如果得到原始类型的值，就按照上一小节的规则，互相比较；如果得到的还是对象，则再调用toString()方法，得到字符串形式，再进行比较。 下面是数组与原始类型值比较的例子。 // 数组与数值的比较 [1] == 1 // true</p><p>// 数组与字符串的比较 [1] == &#39;1&#39; // true [1, 2] == &#39;1,2&#39; // true</p><p>// 对象与布尔值的比较 [1] == true // true [2] == true // false</p><p>上面例子中，JavaScript 引擎会先对数组[1]调用数组的valueOf()方法，由于返回的还是一个数组，所以会接着调用数组的toString()方法，得到字符串形式，再按照上一小节的规则进行比较。 下面是一个更直接的例子。 const obj = { valueOf: function () { console.log(&#39;执行 valueOf()&#39;); return obj; }, toString: function () { console.log(&#39;执行 toString()&#39;); return &#39;foo&#39;; } };</p><p>obj == &#39;foo&#39; // 执行 valueOf() // 执行 toString() // true</p><p>上面例子中，obj是一个自定义了valueOf()和toString()方法的对象。这个对象与字符串&#39;foo&#39;进行比较时，会依次调用valueOf()和toString()方法，最后返回&#39;foo&#39;，所以比较结果是true。 （3）undefined 和 null undefined和null只有与自身比较，或者互相比较时，才会返回true；与其他类型的值比较时，结果都为false。 undefined == undefined // true null == null // true undefined == null // true</p><p>false == null // false false == undefined // false</p><p>0 == null // false 0 == undefined // false</p><p>（4）相等运算符的缺点 相等运算符隐藏的类型转换，会带来一些违反直觉的结果。 0 == &#39;&#39; // true 0 == &#39;0&#39; // true</p><p>2 == true // false 2 == false // false</p><p>false == &#39;false&#39; // false false == &#39;0&#39; // true</p><p>false == undefined // false false == null // false null == undefined // true</p><p>&#39; \\t\\r\\n &#39; == 0 // true</p><p>上面这些表达式都不同于直觉，很容易出错。因此建议不要使用相等运算符（==），最好只使用严格相等运算符（===）。 不相等运算符 相等运算符有一个对应的“不相等运算符”（!=），它的算法就是先求相等运算符的结果，然后返回相反值。 1 != &#39;1&#39; // false</p><p>// 等同于 !(1 == &#39;1&#39;)</p><p>其他运算符，运算顺序 void 运算符 void运算符的作用是执行一个表达式，然后不返回任何值，或者说返回undefined。 void 0 // undefined void(0) // undefined</p><p>上面是void运算符的两种写法，都正确。建议采用后一种形式，即总是使用圆括号。因为void运算符的优先性很高，如果不使用括号，容易造成错误的结果。比如，void 4 + 7实际上等同于(void 4) + 7。 下面是void运算符的一个例子。 var x = 3; void (x = 5) //undefined x // 5</p><p>这个运算符的主要用途是浏览器的书签工具（Bookmarklet），以及在超级链接中插入代码防止网页跳转。 请看下面的代码。</p>',160),o=t("p",null,[t("a",{href:"http://example.com",onclick:"f(); return false;"},"点击")],-1),f=p('<p>上面代码中，点击链接后，会先执行onclick的代码，由于onclick返回false，所以浏览器不会跳转到 example.com。 void运算符可以取代上面的写法。 <a href="javascript: void(f())">文字</a></p><p>下面是一个更实际的例子，用户点击链接提交表单，但是不产生页面跳转。 <a href="javascript: void(document.form.submit())"> 提交 </a></p><p>逗号运算符 逗号运算符用于对两个表达式求值，并返回后一个表达式的值。 &#39;a&#39;, &#39;b&#39; // &quot;b&quot;</p><p>var x = 0; var y = (x++, 10); x // 1 y // 10</p><p>逗号运算符的一个用途是，在返回一个值之前，进行一些辅助操作。 var value = (console.log(&#39;Hi!&#39;), true); // Hi!</p><p>value // true</p><p>运算顺序 优先级 JavaScript 各种运算符的优先级别（Operator Precedence）是不一样的。优先级高的运算符先执行，优先级低的运算符后执行。 4 + 5 * 6 // 34</p><p>上面的代码中，乘法运算符（<em>）的优先性高于加法运算符（+），所以先执行乘法，再执行加法，相当于下面这样。 4 + (5</em> 6) // 34</p><p>如果多个运算符混写在一起，常常会导致令人困惑的代码。 var x = 1; var arr = [];</p><p>var y = arr.length &lt;= 0 || arr[0] === undefined ? x : arr[0];</p><p>上面代码中，变量y的值就很难看出来，因为这个表达式涉及5个运算符，到底谁的优先级最高，实在不容易记住。 根据语言规格，这五个运算符的优先级从高到低依次为：小于等于（&lt;=)、严格相等（===）、或（||）、三元（?:）、等号（=）。因此上面的表达式，实际的运算顺序如下。 var y = ((arr.length &lt;= 0) || (arr[0] === undefined)) ? x : arr[0];</p><p>圆括号的作用 圆括号（()）可以用来提高运算的优先级，因为它的优先级是最高的，即圆括号中的表达式会第一个运算。 (4 + 5) * 6 // 54</p><p>上面代码中，由于使用了圆括号，加法会先于乘法执行。 运算符的优先级别十分繁杂，且都是硬性规定，因此建议总是使用圆括号，保证运算顺序清晰可读，这对代码的维护和除错至关重要。 顺便说一下，圆括号不是运算符，而是一种语法结构。它一共有两种用法：一种是把表达式放在圆括号之中，提升运算的优先级；另一种是跟在函数的后面，作用是调用函数。 注意，因为圆括号不是运算符，所以不具有求值作用，只改变运算的优先级。 var x = 1; (x) = 2;</p><p>上面代码的第二行，如果圆括号具有求值作用，那么就会变成1 = 2，这是会报错了。但是，上面的代码可以运行，这验证了圆括号只改变优先级，不会求值。 这也意味着，如果整个表达式都放在圆括号之中，那么不会有任何效果。 (expression) // 等同于 expression</p><p>函数放在圆括号中，会返回函数本身。如果圆括号紧跟在函数的后面，就表示调用函数。 function f() { return 1; }</p><p>(f) // function f(){return 1;} f() // 1</p><p>上面代码中，函数放在圆括号之中会返回函数本身，圆括号跟在函数后面则是调用函数。 圆括号之中，只能放置表达式，如果将语句放在圆括号之中，就会报错。 (var a = 1) // SyntaxError: Unexpected token var</p><p>左结合与右结合 对于优先级别相同的运算符，同时出现的时候，就会有计算顺序的问题。 a OP b OP c</p><p>上面代码中，OP表示运算符。它可以有两种解释方式。 // 方式一 (a OP b) OP c</p><p>// 方式二 a OP (b OP c)</p><p>上面的两种方式，得到的计算结果往往是不一样的。方式一是将左侧两个运算数结合在一起，采用这种解释方式的运算符，称为“左结合”（left-to-right associativity）运算符；方式二是将右侧两个运算数结合在一起，这样的运算符称为“右结合”运算符（right-to-left associativity）。 JavaScript 语言的大多数运算符是“左结合”，请看下面加法运算符的例子。 x + y + z</p><p>// 引擎解释如下 (x + y) + z</p><p>上面代码中，x与y结合在一起，它们的预算结果再与z进行运算。 少数运算符是“右结合”，其中最主要的是赋值运算符（=）和三元条件运算符（?:）。 w = x = y = z; q = a ? b : c ? d : e ? f : g;</p><p>上面代码的解释方式如下。 w = (x = (y = z)); q = a ? b : (c ? d : (e ? f : g));</p><p>上面的两行代码，都是右侧的运算数结合在一起。 另外，指数运算符（<strong>）也是右结合。 2</strong> 3 <strong>2 // 相当于 2</strong> (3 ** 2) // 512</p>',25),n=[u,o,f];function i(s,g,c,d,x,v){return a(),l("div",null,n)}const m=e(r,[["render",i],["__file","operator.html.vue"]]);export{m as default};
