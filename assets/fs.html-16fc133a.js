import{_ as t,p,q as e,R as s,Y as a,s as n}from"./framework-e1bed10d.js";const l={},o=a(`<h1 id="fs" tabindex="-1"><a class="header-anchor" href="#fs" aria-hidden="true">#</a> fs</h1><p>文件系统操作有同步、回调、promise使用形式，使用回调形式，在内存和执行时间方面更可取</p><h2 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h2><ol><li>fs.appendFile(path, data[, options], callback)</li></ol><p>异步地将数据追加到文件，如果该文件尚不存在，则创建该文件</p><ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; | &lt;number&gt; 文件名或文件描述符</li><li>data 、&lt;string、&gt; | 、&lt;Buffer、&gt;</li><li>options 、&lt;Object、&gt; | 、&lt;string、&gt; <ul><li>encoding 、&lt;string、&gt; | 、&lt;null、&gt; 默认值: &#39;utf8&#39;</li><li>mode 、&lt;integer、&gt; 默认值: 0o666</li><li>flag 、&lt;string、&gt; 默认值: &#39;a&#39;。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> appendFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>

<span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">&#39;message.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data to append&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The &quot;data to append&quot; was appended to file!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">&#39;message.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data to append&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,8),i=a(`<p>当 file 是文件名时，将数据异步地写入文件，如果文件已存在则替换该文件。 data 可以是字符串或缓冲区，当 file 是文件描述符时，其行为类似于直接调用 fs.write()（推荐）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> writeFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>

<span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;message.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello Node.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fs.writeFile 是一个便捷的方法，其在内部执行多次 write 调用以写入传给它的缓冲区。 对于性能敏感的代码，则考虑使用<code>fs.createWriteStream()</code></p><p>将 fs.writeFile() 与文件描述符一起使用:</p><p>与直接调用 fs.write() 不同的是，在一些异常情况下，fs.write() 可能只写入缓冲区的一部分，需要重试写入剩余的数据，而 fs.writeFile() 会重试直到数据完全写入（或发生错误）。</p><p>其含义是常见的混淆来源。 在文件描述符的情况下，文件不会被替换！ 数据不一定写入文件的开头，文件的原始数据可以保留在新写入的数据之前和/或之后</p><p>例如，如果连续调用 fs.writeFile() 两次，首先写入字符串 &#39;Hello&#39;，然后写入字符串 &#39;, World&#39;，该文件将包含 &#39;Hello, World&#39;，并且可能包含文件的一些原始数据（这取决于原始文件的大小和文件描述符的位置）。 如果使用文件名而不是描述符，则文件将保证仅包含 &#39;, World&#39;</p><br>`,8),c=a(`<p>异步地读取文件的全部内容</p><ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; | &lt;integer&gt; 文件名或文件描述符</li><li>options &lt;Object&gt; | &lt;string&gt; <ul><li>encoding &lt;string&gt; | &lt;null&gt; 默认值: null 如果未指定编码，则返回原始缓冲区</li><li>flag &lt;string&gt; 请参阅对文件系统 flags 的支持。 默认值: &#39;r&#39;。</li><li>signal &lt;AbortSignal&gt; 允许中止正在进行的读取文件</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原始缓冲区</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 AbortSignal 中止正在进行的请求。 如果请求被中止，回调将被使用 AbortError 调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>
<span class="token function">readFile</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">{</span> signal <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> buf</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 当想中止请求时</span>
controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fs.readFile() 函数缓冲整个文件。 为了最小化内存成本，在可能的情况下优先通过 fs.createReadStream() 进行流式传输</p><br>`,7),u=a(`<p>异步地将文件从 src 复制到 dest。 默认情况下，如果 dest 已经存在，则会被覆盖，如果在打开目标文件进行写入后发生错误，Node.js 将尝试删除目标文件</p><ul><li>src &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; 要复制的源文件名</li><li>dest &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; 复制操作的目标文件名</li><li>mode &lt;integer&gt; 复制操作的修饰符。 默认值: 0。</li><li>callback &lt;Function&gt;</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> copyFile<span class="token punctuation">,</span> constants <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;source.txt was copied to destination.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 默认情况下将创建或覆盖 destination.txt。</span>
<span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token string">&#39;source.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;destination.txt&#39;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过使用 COPYFILE_EXCL，如果 destination.txt 存在，则该操作将失败。</span>
<span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token string">&#39;source.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;destination.txt&#39;</span><span class="token punctuation">,</span> constants<span class="token punctuation">.</span><span class="token constant">COPYFILE_EXCL</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,4),r=a(`<ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>len &lt;integer&gt; 默认值： 0</li><li>callback &lt;Function&gt;</li><li>err &lt;Error&gt; | &lt;AggregateError&gt;</li></ul><p>截断文件。 除了可能的异常之外，没有为完成回调提供任何参数。 文件描述符也可以作为第一个参数传入。 在这种情况下，<code>fs.ftruncate()</code> 被调用</p><h2 id="文件夹操作" tabindex="-1"><a class="header-anchor" href="#文件夹操作" aria-hidden="true">#</a> 文件夹操作</h2><ol><li>fs.mkdir(path[, options], callback)</li></ol><p>异步地创建目录，回调给出一个可能的异常和创建的第一个目录路径（如果 recursive 为 true）。 当 recursive 为 true 时，如果没有创建目录，则 path 仍然为 undefined</p><ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>options &lt;Object&gt; | &lt;integer&gt; <ul><li>recursive &lt;boolean&gt; 默认值: false</li><li>mode &lt;string&gt; | &lt;integer&gt; Windows 上不支持。 默认值: 0o777。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mkdir <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建 /tmp/a/apple，不管 \`/tmp\` 和 /tmp/a 是否存在。</span>
<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;/tmp/a/apple&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,8),k=a(`<ul><li>prefix &lt;string&gt;</li><li>options &lt;string&gt; | &lt;Object&gt;</li><li>encoding &lt;string&gt; 默认值： &#39;utf8&#39;</li><li>callback &lt;Function&gt;</li><li>err &lt;Error&gt;</li><li>directory &lt;string&gt;</li></ul><p>创建唯一的临时目录。</p><p>生成六个随机字符，附加在所需的 prefix 后面以创建唯一的临时目录。 由于平台的不一致，请避免在 prefix 中尾随 X 字符。 某些平台，尤其是 BSD，可能返回六个以上的随机字符，并将 prefix 中的尾随 X 字符替换为随机字符。</p><p>创建的目录路径作为字符串传递给回调的第二个参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mkdtemp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> join <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:path&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> tmpdir <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:os&#39;</span><span class="token punctuation">;</span>

<span class="token function">mkdtemp</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">tmpdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;foo-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> directory</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Prints: /tmp/foo-itXde2 or C:\\Users\\...\\AppData\\Local\\Temp\\foo-itXde2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,6),d=a(`<p>读取目录的内容。 回调有两个参数 (err, files)，其中 files 是目录中文件名的数组，不包括 &#39;.&#39; 和 &#39;..&#39;。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">&#39;../../promise&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">withFileTypes</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,3),g=a("<p>将整个目录结构从 src 异步地复制到 dest，包括子目录和文件</p><ul><li>src &lt;string&gt; | &lt;URL&gt; 要复制的源路径。</li><li>dest &lt;string&gt; | &lt;URL&gt; 要复制到的目标路径。</li><li>options &lt;Object&gt; <ul><li>dereference &lt;boolean&gt; 取消引用符号链接。 默认值: false。</li><li>errorOnExist &lt;boolean&gt; 当 force 为 false 且目标存在时，则抛出错误。 默认值: false。</li><li>filter &lt;Function&gt; 过滤复制文件/目录的函数。 返回 true 则复制条目，返回 false 则忽略它。 也可以返回解决为 true 或 false 的 Promise 默认值: undefined。</li><li>force &lt;boolean&gt; 覆盖现有的文件或目录。 如果将此设置为 false 并且目标存在，则复制操作将忽略错误。 使用 errorOnExist 选项更改此行为。 默认值: true。</li><li>preserveTimestamps &lt;boolean&gt; 当为 true 时，则 src 的时间戳将被保留。 默认值: false。</li><li>recursive &lt;boolean&gt; 递归地复制目录 默认值: false</li><li>verbatimSymlinks &lt;boolean&gt; 当为 true 时，则符号链接的路径解析将被跳过。 默认值: false</li></ul></li></ul><br>",3),m=a('<p>异步地删除文件夹，在文件（而不是目录）上使用 fs.rmdir()，则在 Windows 上会导致 ENOENT 错误，在 POSIX 上会导致 ENOTDIR 错误</p><ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>options &lt;Object&gt; <ul><li>maxRetries 、&lt;integer、&gt; 如果遇到 EBUSY、EMFILE、ENFILE、ENOTEMPTY 或 EPERM 错误，Node.js 将在每次尝试时以 retryDelay 毫秒的线性退避等待时间重试该操作。 此选项表示重试次数。 如果 recursive 选项不为 true，则忽略此选项。 默认值: 0。</li><li>recursive 、&lt;boolean、&gt; 如果为 true，则执行递归目录删除。 在递归模式下，操作将在失败时重试。 默认值: false。 已弃用。</li><li>retryDelay 、&lt;integer、&gt; 重试之间等待的时间（以毫秒为单位）。 如果 recursive 选项不为 true，则忽略此选项。 默认值: 100。</li></ul></li></ul><h2 id="链接操作" tabindex="-1"><a class="header-anchor" href="#链接操作" aria-hidden="true">#</a> 链接操作</h2><ol><li>fs.link(existingPath, newPath, callback)</li></ol><ul><li>existingPath &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>newPath &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>callback &lt;Function&gt;</li><li>err &lt;Error&gt;</li></ul><p>创建从 existingPath 到 newPath 的新链接。 除了可能的异常之外，没有为完成回调提供任何参数</p><br>',7),v=n("ul",null,[n("li",null,"path <string> | <Buffer> | <URL>"),n("li",null,"options <string> | <Object>"),n("li",null,"encoding <string> 默认值： 'utf8'"),n("li",null,"callback <Function> err <Error>"),n("li",null,"linkString <string> | <Buffer>")],-1),f=n("p",null,"读取 path 引用的符号链接的内容。 回调有两个参数 (err, linkString)。",-1),b=n("p",null,"可选的 options 参数可以是指定编码的字符串，也可以是具有 encoding 属性（指定用于传给回调的链接路径的字符编码）的对象。 如果将 encoding 设置为 'buffer'，则返回的链接路径将作为 <Buffer> 对象传入",-1),h=n("br",null,null,-1),w=n("ul",null,[n("li",null,"target <string> | <Buffer> | <URL>"),n("li",null,"path <string> | <Buffer> | <URL>"),n("li",null,"type <string> | <null> 默认值： null"),n("li",null,"callback <Function>"),n("li",null,"err <Error>")],-1),_=n("p",null,"创建名为 path 指向 target 的链接。 除了可能的异常之外，没有为完成回调提供任何参数",-1),y=n("br",null,null,-1),j=a(`<ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>callback &lt;Function&gt;</li><li>err &lt;Error&gt;</li></ul><p>异步地删除文件或符号链接。 除了可能的异常之外，没有为完成回调提供任何参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> unlink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// Assuming that &#39;path/file.txt&#39; is a regular file.</span>
<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&#39;path/file.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;path/file.txt was deleted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fs.unlink() 不适用于目录，无论是空目录还是其他目录。 要删除目录，请使用 fs.rmdir()</p><h2 id="共有方法" tabindex="-1"><a class="header-anchor" href="#共有方法" aria-hidden="true">#</a> 共有方法</h2><ol><li>fs.rm(path[, options], callback)</li></ol><p>异步地删除文件和目录</p><ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>options &lt;Object&gt; <ul><li>force &lt;boolean&gt; 当为 true 时，如果 path 不存在，则异常将被忽略。 默认值: false。</li><li>maxRetries 、&lt;integer、&gt; 如果遇到 EBUSY、EMFILE、ENFILE、ENOTEMPTY 或 EPERM 错误，Node.js 将在每次尝试时以 retryDelay 毫秒的线性退避等待时间重试该操作。 此选项表示重试次数。 如果 recursive 选项不为 true，则忽略此选项。 默认值: 0。</li><li>recursive 、&lt;boolean、&gt; 如果为 true，则执行递归删除。 在递归模式下，操作将在失败时重试。 默认值: false。</li><li>retryDelay 、&lt;integer、&gt; 重试之间等待的时间（以毫秒为单位）。 如果 recursive 选项不为 true，则忽略此选项。 默认值: 100。</li></ul></li></ul><br>`,9),x=a(`<ul><li>oldPath &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>newPath &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> rename <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>

<span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;oldFile.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newFile.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Rename complete!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,3),R=a(`<p>监听文件或者目录的变化，监听器回调有两个参数 (eventType, filename)。 eventType 是 &#39;rename&#39; 或 &#39;change&#39;，filename 是触发事件的文件的名称</p><ul><li>filename &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>options &lt;string&gt; | &lt;Object&gt; <ul><li>persistent &lt;boolean&gt; 指示只要正在监视文件，进程是否应继续运行。 默认值: true。</li><li>recursive &lt;boolean&gt; 指示是应监视所有子目录，还是仅监视当前目录。 这在指定目录时适用，并且仅在受支持的平台上有效（请参见注意事项）。 默认值: false。</li><li>encoding &lt;string&gt; 指定用于传给监听器的文件名的字符编码。 默认值: &#39;utf8&#39;。</li><li>signal &lt;AbortSignal&gt; 允许使用中止信号关闭监视器。</li></ul></li><li>listener &lt;Function&gt; | &lt;undefined&gt; 默认值: undefined <ul><li>eventType &lt;string&gt;\\</li><li>filename &lt;string&gt; | &lt;Buffer&gt;</li></ul></li></ul><h2 id="创建流" tabindex="-1"><a class="header-anchor" href="#创建流" aria-hidden="true">#</a> 创建流</h2><ol><li>fs.createReadStream(path[, options])</li></ol><p>创建文件读取流</p><ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>options &lt;string&gt; | &lt;Object&gt; <ul><li>flags &lt;string&gt; 请参阅对文件系统 flags 的支持。 默认值: &#39;r&#39;。</li><li>encoding &lt;string&gt; 默认值: null</li><li>fd &lt;integer&gt; | &lt;FileHandle&gt; 默认值: null</li><li>mode &lt;integer&gt; 默认值: 0o666</li><li>autoClose &lt;boolean&gt; 默认值: true</li><li>emitClose &lt;boolean&gt; 默认值: true</li><li>start &lt;integer&gt;</li><li>end &lt;integer&gt; 默认值: Infinity</li><li>highWaterMark &lt;integer&gt; 默认值: 64 * 1024</li><li>fs &lt;Object&gt; | &lt;null&gt; 默认值: null</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createReadStream <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>

<span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;sample.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">99</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,8),F=a(`<p>创建文件的可写流</p><ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>options &lt;string&gt; | &lt;Object&gt;\\ <ul><li>flags &lt;string&gt; 请参阅对文件系统 flags 的支持。 默认值: &#39;w&#39;。</li><li>encoding &lt;string&gt; 默认值: &#39;utf8&#39;</li><li>fd &lt;integer&gt; | &lt;FileHandle&gt; 默认值: null</li><li>mode &lt;integer&gt; 默认值: 0o666</li><li>autoClose &lt;boolean&gt; 默认值: true</li><li>emitClose &lt;boolean&gt; 默认值: true</li><li>start &lt;integer&gt;</li><li>fs &lt;Object&gt; | &lt;null&gt; 默认值: null</li></ul></li></ul><h2 id="文件状态" tabindex="-1"><a class="header-anchor" href="#文件状态" aria-hidden="true">#</a> 文件状态</h2><ol><li>fs.chmod(path,mode,callback)</li></ol><p>用于修改文件的权限,除了可能的异常之外，没有为完成回调提供任何参数</p><ul><li>path &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>mode &lt;string&gt; | &lt;integer&gt;</li><li>callback &lt;Function&gt; <ul><li>err &lt;Error&gt;</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">import</span> <span class="token punctuation">{</span> chmod <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>

<span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">&#39;my_file.txt&#39;</span><span class="token punctuation">,</span> <span class="token number">0o775</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The permissions for file &quot;my_file.txt&quot; have been changed!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件权限使用mode方式进行指定：</p><table><thead><tr><th>常量</th><th>八进制</th><th>描述</th></tr></thead><tbody><tr><td>fs.constants.S_IRUSR</td><td>0o400</td><td>所有者可读取</td></tr><tr><td>fs.constants.S_IWUSR</td><td>0o200</td><td>所有者可写入</td></tr><tr><td>fs.constants.S_IXUSR</td><td>0o100</td><td>所有者可执行/搜索</td></tr><tr><td>fs.constants.S_IRGRP</td><td>0o40</td><td>群组可读取</td></tr><tr><td>fs.constants.S_IWGRP</td><td>0o20</td><td>群组可写入</td></tr><tr><td>fs.constants.S_IXGRP</td><td>0o10</td><td>群组可执行/搜索</td></tr><tr><td>fs.constants.S_IROTH</td><td>0o4</td><td>其他人可读取</td></tr><tr><td>fs.constants.S_IWOTH</td><td>0o2</td><td>其他人可写入</td></tr><tr><td>fs.constants.S_IXOTH</td><td>0o1</td><td>其他人可执行/搜索</td></tr></tbody></table><br>`,10),E=n("p",null,"异步地打开文件,mode 设置文件模式（权限和粘滞位），但前提是文件已创建",-1),L=n("ul",null,[n("li",null,"path <string> | <Buffer> | <URL>"),n("li",null,"flags <string> | <number> 请参阅对文件系统 flags 的支持。 默认值: 'r'。"),n("li",null,"mode <string> | <integer> 默认值: 0o666 （可读可写）")],-1),B=n("br",null,null,-1),O=n("p",null,"关闭文件描述如",-1),S=n("ul",null,[n("li",null,"fd <integer>"),n("li",null,[s("callback <Function> "),n("ul",null,[n("li",null,"err <Error>")])])],-1),U=n("br",null,null,-1),P=n("p",null,"获取文件信息",-1),I=n("ul",null,[n("li",null,"path <string> | <Buffer> | <URL>"),n("li",null,[s("options <Object> "),n("ul",null,[n("li",null,"bigint <boolean> 返回的 <fs.Stats> 对象中的数值是否应为 bigint。 默认值: false。")])])],-1),T=n("br",null,null,-1),N=a(`<p>用于获取文件或目录的权限，不建议在调用open方法检查文件的可访问性，应该直接使用文件的读写、执行操作，在具体的操作中对错误进行处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> access<span class="token punctuation">,</span> constants <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token string">&#39;package.json&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 检查当前目录中是否存在该文件。</span>
<span class="token function">access</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> constants<span class="token punctuation">.</span><span class="token constant">F_OK</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err <span class="token operator">?</span> <span class="token string">&#39;does not exist&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;exists&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查文件是否可读。</span>
<span class="token function">access</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> constants<span class="token punctuation">.</span><span class="token constant">R_OK</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err <span class="token operator">?</span> <span class="token string">&#39;is not readable&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;is readable&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查文件是否可写。</span>
<span class="token function">access</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> constants<span class="token punctuation">.</span><span class="token constant">W_OK</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err <span class="token operator">?</span> <span class="token string">&#39;is not writable&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;is writable&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查文件是否可读可写。</span>
<span class="token function">access</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> constants<span class="token punctuation">.</span><span class="token constant">R_OK</span> <span class="token operator">|</span> constants<span class="token punctuation">.</span><span class="token constant">W_OK</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err <span class="token operator">?</span> <span class="token string">&#39;is not&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;is&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> readable and writable</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,3),W=n("p",null,"异步地更改文件的所有者和群组。 除了可能的异常之外，没有为完成回调提供任何参数",-1);function C(X,A){return p(),e("div",null,[o,s(" 2. fs.writeFile(file, data[, options], callback) "),i,s(" 3. fs.readFile(path[, options], callback) "),c,s(" 4. fs.copyFile(src, dest[, mode], callback) "),u,s(" 5. fs.truncate(path[, len], callback) "),r,s(" 2. fs.mkdtemp(prefix[, options], callback) "),k,s(" 3. fs.readdir(path[, options], callback) "),d,s(" 4. fs.cp(src, dest[, options], callback) "),g,s(" 5. fs.rmdir(path[, options], callback) "),m,s(" 2. fs.readlink(path[, options], callback) "),v,f,b,h,s(" 3. fs.symlink(target, path[, type], callback) "),w,_,y,s(" 4. fs.unlink(path, callback) "),j,s(" 2. fs.rename(oldPath, newPath, callback) 将 oldPath 处的文件异步重命名为作为 newPath 提供的路径名。 如果 newPath 已经存在，则它将被覆盖。 如果在 newPath 中有目录，则会引发错误 "),x,s(" 3. fs.watch(filename[, options][, listener]) "),R,s(" 2. fs.createWriteStream(path[, options]) "),F,s(" 2. fs.open(path[, flags[, mode]], callback) "),E,L,B,s(" 3. fs.close(fd[, callback]) "),O,S,U,s(" 4. fs.stat(path[, options], callback) "),P,I,T,s(" 5. fs.access (path,mode,callback) "),N,s(" 6. fs.chown(path, uid, gid, callback) "),W])}const $=t(l,[["render",C],["__file","fs.html.vue"]]);export{$ as default};
