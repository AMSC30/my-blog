import{_ as e,p as d,q as c,Y as a}from"./framework-e1bed10d.js";const i={},o=a('<h1 id="vue基础认识" tabindex="-1"><a class="header-anchor" href="#vue基础认识" aria-hidden="true">#</a> Vue基础认识</h1><h2 id="一、vue是什么" tabindex="-1"><a class="header-anchor" href="#一、vue是什么" aria-hidden="true">#</a> 一、vue是什么</h2><p>Vue.js（/vjuː/，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。</p><h2 id="二、vue核心特性" tabindex="-1"><a class="header-anchor" href="#二、vue核心特性" aria-hidden="true">#</a> 二、Vue核心特性</h2><h3 id="数据驱动-mvvm" tabindex="-1"><a class="header-anchor" href="#数据驱动-mvvm" aria-hidden="true">#</a> 数据驱动（MVVM)</h3><p><code>MVVM</code>表示的是 <code>Model-View-ViewModel</code></p><ul><li>Model：模型层，负责处理业务逻辑以及和服务器端进行交互</li><li>View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面</li><li>ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁</li></ul><p>这时候需要一张直观的关系图，如下 <img src="https://static.vue-js.com/4402c560-3ac6-11eb-85f6-6fac77c0c9b3.png" alt="image.png"></p><h3 id="组件化" tabindex="-1"><a class="header-anchor" href="#组件化" aria-hidden="true">#</a> 组件化</h3><p>一句话来说就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在<code>Vue</code>中每一个<code>.vue</code>文件都可以视为一个组件</p><p>组件化的优势：</p><ul><li>降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求</li><li>提高可扩展性，可以将多个组件进行组合构建出不同的页面形式</li><li>提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</li></ul><h3 id="指令系统" tabindex="-1"><a class="header-anchor" href="#指令系统" aria-hidden="true">#</a> 指令系统</h3><p>解释：指令 (Directives) 是带有 v- 前缀的特殊属性作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p><ul><li><p>常用的指令</p><ul><li>条件渲染指令 <code>v-if</code></li><li>列表渲染指令<code>v-for</code></li><li>属性绑定指令<code>v-bind</code></li><li>事件绑定指令<code>v-on</code></li><li>双向数据绑定指令<code>v-model</code></li></ul></li></ul><h2 id="三、vue跟传统开发的区别" tabindex="-1"><a class="header-anchor" href="#三、vue跟传统开发的区别" aria-hidden="true">#</a> 三、Vue跟传统开发的区别</h2><p>没有落地使用场景的革命不是好革命，就以一个高频的应用场景来示意吧注册账号这个需求大家应该很熟悉了，如下</p><p><img src="https://static.vue-js.com/5ae84840-3ac6-11eb-ab90-d9ae814b240d.png" alt=""></p><p>用<code>jquery</code>来实现大概的思路就是选择流程dom对象，点击按钮隐藏当前活动流程dom对象，显示下一流程dom对象如下图(代码就不上了，上了就篇文章就没了..)</p><p><img src="https://static.vue-js.com/65f89e60-3ac6-11eb-85f6-6fac77c0c9b3.png" alt=""></p><p>用<code>vue</code>来实现，我们知道<code>vue</code>基本不操作<code>dom</code>节点， 双向绑定使<code>dom</code>节点跟视图绑定后，通过修改变量的值控制<code>dom</code>节点的各类属性。所以其实现思路为：视图层使用一变量控制dom节点显示与否，点击按钮则改变该变量，如下图</p><p><img src="https://static.vue-js.com/6f916fb0-3ac6-11eb-ab90-d9ae814b240d.png" alt=""></p><p>总结就是：</p><ul><li>Vue所有的界面事件，都是只去操作数据的，Jquery操作DOM</li><li>Vue所有界面的变动，都是根据数据自动绑定出来的，Jquery操作DOM</li></ul><h2 id="四、vue和react对比" tabindex="-1"><a class="header-anchor" href="#四、vue和react对比" aria-hidden="true">#</a> 四、Vue和React对比</h2><p>这里就做几个简单的类比吧，当然没有好坏之分，只是使用场景不同</p><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h3><ul><li>都有组件化思想</li><li>都支持服务器端渲染</li><li>都有Virtual DOM（虚拟dom）</li><li>数据驱动视图</li><li>都有支持native的方案：<code>Vue</code>的<code>weex</code>、<code>React</code>的<code>React native</code></li><li>都有自己的构建工具：<code>Vue</code>的<code>vue-cli</code>、<code>React</code>的<code>Create React App</code></li></ul><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><ul><li>数据流向的不同。<code>react</code>从诞生开始就推崇单向数据流，而<code>Vue</code>是双向数据流</li><li>数据变化的实现原理不同。<code>react</code>使用的是不可变数据，而<code>Vue</code>使用的是可变的数据</li><li>组件化通信的不同。<code>react</code>中我们通过使用回调函数来进行通信的，而<code>Vue</code>中子组件向父组件传递消息有两种方式：事件和回调函数</li><li>diff算法不同。<code>react</code>主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。<code>Vue</code> 使用双向指针，边对比，边更新DOM</li></ul>',30),l=[o];function r(t,h){return d(),c("div",null,l)}const s=e(i,[["render",r],["__file","base.html.vue"]]);export{s as default};
