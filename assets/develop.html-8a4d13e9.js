import{_ as n,p as s,q as a,Y as t}from"./framework-e1bed10d.js";const p="/my-blog/assets/develop-model-8fc22ee6.png",e="/my-blog/assets/UIAbility-lifecycle-f1f3ac6d.png",o="/my-blog/assets/card-event-02c56615.png",c={},i=t('<h1 id="开发" tabindex="-1"><a class="header-anchor" href="#开发" aria-hidden="true">#</a> 开发</h1><h2 id="模型概述" tabindex="-1"><a class="header-anchor" href="#模型概述" aria-hidden="true">#</a> 模型概述</h2><img src="'+p+'"><h2 id="stage模型" tabindex="-1"><a class="header-anchor" href="#stage模型" aria-hidden="true">#</a> stage模型</h2><h3 id="uiability" tabindex="-1"><a class="header-anchor" href="#uiability" aria-hidden="true">#</a> UIAbility</h3><p>UIAbility组件是一种包含UI界面的应用组件，主要用于和用户交互。是系统调度的基本单元，为应用提供绘制界面的窗口</p><p>一个UIAbility组件中可以通过多个页面来实现一个功能模块。每一个UIAbility组件实例，都对应于一个最近任务列表中的任务</p><h4 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h4><p>UIAbility的生命周期包括Create、Foreground、Background、Destroy四个状态，UIAbility类提供了一系列回调，通过这些回调可以知道当前UIAbility实例的某个状态发生改变</p><p>状态如下：</p><img src="'+e+`"><ol><li>Create状态</li></ol><p>Create状态为在应用加载过程中，UIAbility实例创建完成时触发，系统会调用onCreate()回调。可以在该回调中进行应用初始化操作，例如变量定义资源加载等，用于后续的UI界面展示</p><br><ol start="2"><li>WindowStageCreate状态</li></ol><p>UIAbility实例创建完成之后，在进入Foreground之前，系统会创建一个WindowStage。WindowStage创建完成后会进入onWindowStageCreate()回调，可以在该回调中设置UI界面加载、设置WindowStage的事件订阅</p><p>在onWindowStageCreate()回调中通过loadContent()方法设置应用要加载的页面并根据需要订阅WindowStage的事件（获焦/失焦、可见/不可见）</p><br><ol start="3"><li>Foreground和Background状态</li></ol><p>Foreground和Background状态分别在UIAbility实例切换至前台和切换至后台时触发，对应于onForeground()回调和onBackground()回调。</p><p>onForeground()回调，在UIAbility的UI界面可见之前，如UIAbility切换至前台时触发。可以在onForeground()回调中申请系统需要的资源，或者重新申请在onBackground()中释放的资源。</p><p>onBackground()回调，在UIAbility的UI界面完全不可见之后，如UIAbility切换至后台时候触发。可以在onBackground()回调中释放UI界面不可见时无用的资源，或者在此回调中执行较为耗时的操作，例如状态保存等</p><br><ol start="4"><li>WindowStageDestroy状态</li></ol><p>在UIAbility实例销毁之前，则会先进入onWindowStageDestroy()回调，可以在该回调中释放UI界面资源</p><br><ol start="5"><li>Destroy状态</li></ol><p>Destroy状态在UIAbility实例销毁时触发。可以在onDestroy()回调中进行系统资源的释放、数据的保存等操作</p><h4 id="启动模式" tabindex="-1"><a class="header-anchor" href="#启动模式" aria-hidden="true">#</a> 启动模式</h4><ol><li>singleton模式</li></ol><p>singleton启动模式为单实例模式，也是默认情况下的启动模式。</p><p>每次调用startAbility()方法时，如果应用进程中该类型的UIAbility实例已经存在，则复用系统中的UIAbility实例。系统中只存在唯一一个该UIAbility实例，即在最近任务列表中只存在一个该类型的UIAbility实例</p><p>如果需要使用singleton启动模式，在module.json5配置文件中的&quot;launchType&quot;字段配置为&quot;singleton&quot;即可</p><br><ol start="2"><li>standard模式</li></ol><p>standard启动模式为标准实例模式，每次调用startAbility()方法时，都会在应用进程中创建一个新的该类型UIAbility实例。即在最近任务列表中可以看到有多个该类型的UIAbility实例</p><p>standard启动模式的开发使用，在module.json5配置文件中的&quot;launchType&quot;字段配置为&quot;standard&quot;即可</p><br><ol start="3"><li>specified模式</li></ol><p>specified启动模式为指定实例模式，针对一些特殊场景使用（例如文档应用中每次新建文档希望都能新建一个文档实例，重复打开一个已保存的文档希望打开的都是同一个文档实例）。</p><p>在UIAbility实例创建之前，允许开发者为该实例创建一个唯一的字符串Key，创建的UIAbility实例绑定Key之后，后续每次调用startAbility()方法时，都会询问应用使用哪个Key对应的UIAbility实例来响应startAbility()请求。运行时由UIAbility内部业务决定是否创建多实例，如果匹配有该UIAbility实例的Key，则直接拉起与之绑定的UIAbility实例，否则创建一个新的UIAbility实例</p><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h4><ol><li>指定启动页面</li></ol><p>应用中的UIAbility在启动过程中，需要指定启动页面，否则应用启动后会因为没有默认加载页面而导致白屏。可以在UIAbility的onWindowStageCreate()生命周期回调中，通过WindowStage对象的loadContent()方法设置启动页面</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Window <span class="token keyword">from</span> <span class="token string">&#39;@ohos.window&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
    <span class="token function">onWindowStageCreate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">windowStage</span><span class="token operator">:</span> Window<span class="token punctuation">.</span>WindowStage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Main window is created, set main page for this ability</span>
        windowStage<span class="token punctuation">.</span><span class="token function">loadContent</span><span class="token punctuation">(</span><span class="token string">&#39;pages/Index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><ol start="2"><li>获取上下文信息</li></ol><p>UIAbility类拥有自身的上下文信息，该信息为UIAbilityContext类的实例，UIAbilityContext类拥有abilityInfo、currentHapModuleInfo等属性。通过UIAbilityContext可以获取UIAbility的相关配置信息，如包代码路径、Bundle名称、Ability名称和应用程序需要的环境状态等属性信息，以及可以获取操作UIAbility实例的方法（如startAbility()、connectServiceExtensionAbility()、terminateSelf()等）</p><p>在UIAbility中可以通过<code>this.context</code>获取UIAbility实例的上下文信息</p><p>在页面中通过<code>getContext(this)</code>获取UIAbility实例的上下文信息，包括导入依赖资源context模块和在组件中定义一个context变量两个部分</p><h4 id="uiability组件与ui的数据同步" tabindex="-1"><a class="header-anchor" href="#uiability组件与ui的数据同步" aria-hidden="true">#</a> UIAbility组件与UI的数据同步</h4><ol><li>使用EventHub进行数据通信</li></ol><p>以使用EventHub实现UIAbility与UI之间的数据通信为例，基类Context提供了EventHub对象</p><ul><li>在UIAbility中调用eventHub.on()方法注册一个自定义事件“event1”</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">TAG</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;[Example].[Entry].[EntryAbility]&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
    <span class="token function">func1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 触发事件，完成相应的业务操作</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&#39;1. &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token parameter">want<span class="token punctuation">,</span> launch</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取eventHub</span>
        <span class="token keyword">let</span> eventhub <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>eventHub<span class="token punctuation">;</span>
        <span class="token comment">// 执行订阅操作</span>
        eventhub<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>func1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventhub<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 触发事件，完成相应的业务操作</span>
            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&#39;2. &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在UI界面中通过eventHub.emit()方法触发该事件，在触发事件的同时，根据需要传入参数信息</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> common <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.common&#39;</span><span class="token punctuation">;</span>

@Entry
@Component
struct Index <span class="token punctuation">{</span>
  <span class="token keyword">private</span> context <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">as</span> common<span class="token punctuation">.</span>UIAbilityContext<span class="token punctuation">;</span>

  <span class="token function">eventHubFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不带参数触发自定义“event1”事件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>eventHub<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 带1个参数触发自定义“event1”事件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>eventHub<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 带2个参数触发自定义“event1”事件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>eventHub<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开发者可以根据实际的业务场景设计事件传递的参数</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 页面展示</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在自定义事件“event1”使用完成后，可以根据需要调用eventHub.off()方法取消该事件的订阅。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// context为UIAbility实例的AbilityContext</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>eventHub<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><ol start="2"><li>使用globalThis进行数据同步</li></ol><p>globalThis是ArkTS引擎实例内部的一个全局对象，引擎内部的UIAbility/ExtensionAbility/Page都可以使用，因此可以使用globalThis全局对象进行数据同步</p><h4 id="uiability组件间交互" tabindex="-1"><a class="header-anchor" href="#uiability组件间交互" aria-hidden="true">#</a> UIAbility组件间交互</h4><ol><li>启动应用内的UIAbility</li></ol><ul><li>在AAbility中通过context的startAbility方法启用BAbility，并将want参数传递过去</li><li>在BAbility的onCreate生命周期回调接收到want参数</li><li>完成业务后(如支付)，调用BAbility的context的terminateSelf方法关闭当前UIAbility实例</li></ul><br><ol start="2"><li>启动应用内的UIAbility并获取返回结果</li></ol><ul><li>调用startAbilityForResult()方法启动UIAbility，want为UIAbility实例启动的入口参数</li><li>在BAbility中调用terminateSelfWithResult()方法，入参abilityResult为BAbility需要返回给AAbility的信息</li><li>AAbility通过startAbilityForResult的回调函数接收结果</li></ul><br><ol start="3"><li>启动其他应用的UIAbility</li></ol><p>启动UIAbility有显式Want启动和隐式Want启动两种方式，推荐使用隐式Want启动。</p><p>显式Want启动：启动一个确定应用的UIAbility，在want参数中需要设置该应用bundleName和abilityName，当需要拉起某个明确的UIAbility时，通常使用显式Want启动方式。</p><p>隐式Want启动：根据匹配条件由用户选择启动哪一个UIAbility，即不明确指出要启动哪一个UIAbility（abilityName参数未设置），在调用startAbility()方法时，其入参want中指定了一系列的entities字段（表示目标UIAbility额外的类别信息，如浏览器、视频播放器）和actions字段（表示要执行的通用操作，如查看、分享、应用详情等）等参数信息，然后由系统去分析want，并帮助找到合适的UIAbility来启动。当需要拉起其他应用的UIAbility时，开发者通常不知道用户设备中应用的安装情况，也无法确定目标应用的bundleName和abilityName，通常使用隐式Want启动方式</p><p>在其对应UIAbility的module.json5配置文件中</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token property">&quot;skills&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;entities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token comment">// ...</span>
              <span class="token string">&quot;entity.system.default&quot;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;actions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token comment">// ...</span>
              <span class="token string">&quot;ohos.want.action.viewData&quot;</span>
            <span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用方want参数中的entities和action需要被包含在待匹配UIAbility的skills配置的entities和actions中。系统匹配到符合entities和actions参数条件的UIAbility后，会弹出选择框展示匹配到的UIAbility实例列表供用户选择使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> wantInfo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">deviceId</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// deviceId为空表示本设备</span>
    <span class="token comment">// uncomment line below if wish to implicitly query only in the specific bundle.</span>
    <span class="token comment">// bundleName: &#39;com.example.myapplication&#39;,</span>
    <span class="token literal-property property">action</span><span class="token operator">:</span> <span class="token string">&#39;ohos.want.action.viewData&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// entities can be omitted.</span>
    <span class="token literal-property property">entities</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;entity.system.default&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// context为调用方UIAbility的AbilityContext</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">startAbility</span><span class="token punctuation">(</span>wantInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在文档应用使用完成之后，如需要停止当前UIAbility实例，通过调用terminateSelf()方法实现</p><br><ol start="4"><li>启动其他应用的UIAbility并获取返回结果</li></ol><p>当使用隐式Want启动其他应用的UIAbility并希望获取返回结果时，调用方需要使用startAbilityForResult()方法启动目标UIAbility</p><br><ol start="5"><li>UIAbility指定启动页面</li></ol><p>调用方UIAbility启动另外一个UIAbility时，通常需要跳转到指定的页面。例如FuncAbility包含两个页面（Index对应首页，Second对应功能A页面），此时需要在传入的want参数中配置指定的页面路径信息，可以通过want中的parameters参数增加一个自定义参数传递页面跳转信息</p><ul><li>目标UIAbility首次启动时，在目标UIAbility的onWindowStageCreate()生命周期回调中，解析EntryAbility传递过来的want参数，获取到需要加载的页面信息url，传入windowStage.loadContent()方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span>
<span class="token keyword">import</span> Window <span class="token keyword">from</span> <span class="token string">&#39;@ohos.window&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">FuncAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
    funcAbilityWant<span class="token punctuation">;</span>

    <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token parameter">want<span class="token punctuation">,</span> launchParam</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 接收调用方UIAbility传过来的参数</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>funcAbilityWant <span class="token operator">=</span> want<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">onWindowStageCreate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">windowStage</span><span class="token operator">:</span> Window<span class="token punctuation">.</span>WindowStage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Main window is created, set main page for this ability</span>
        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">&#39;pages/Index&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>funcAbilityWant<span class="token operator">?.</span>parameters<span class="token operator">?.</span>router<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>funcAbilityWant<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>router <span class="token operator">===</span> <span class="token string">&#39;funA&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                url <span class="token operator">=</span> <span class="token string">&#39;pages/Second&#39;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        windowStage<span class="token punctuation">.</span><span class="token function">loadContent</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当应用A的UIAbility实例已创建，并且处于该UIAbility实例对应的主页面中，此时，从应用B中需要再次启动应用A的该UIAbility，并且需要跳转到不同的页面，由于当前UIAbility实例之前已经创建完成，此时会进入UIAbility的onNewWant()回调中且不会进入onCreate()和onWindowStageCreate()生命周期回调，在onNewWant()回调中解析调用方传递过来的want参数，并挂在到全局变量globalThis中，以便于后续在页面中获取</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">FuncAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
    <span class="token function">onNewWant</span><span class="token punctuation">(</span><span class="token parameter">want<span class="token punctuation">,</span> launchParam</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 接收调用方UIAbility传过来的参数</span>
        globalThis<span class="token punctuation">.</span>funcAbilityWant <span class="token operator">=</span> want<span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在FuncAbility中，此时需要在Index页面中通过页面路由Router模块实现指定页面的跳转，由于此时FuncAbility对应的Index页面是处于激活状态，不会重新变量声明以及进入aboutToAppear()生命周期回调中。因此可以在Index页面的onPageShow()生命周期回调中实现页面路由跳转的功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;@ohos.router&#39;</span><span class="token punctuation">;</span>

@Entry
@Component
struct Index <span class="token punctuation">{</span>
  <span class="token function">onPageShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> funcAbilityWant <span class="token operator">=</span> globalThis<span class="token punctuation">.</span>funcAbilityWant<span class="token punctuation">;</span>
    <span class="token keyword">let</span> url2 <span class="token operator">=</span> funcAbilityWant<span class="token operator">?.</span>parameters<span class="token operator">?.</span>router<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>url2 <span class="token operator">&amp;&amp;</span> url2 <span class="token operator">===</span> <span class="token string">&#39;funcA&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      router<span class="token punctuation">.</span><span class="token function">replaceUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;pages/Second&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 页面展示</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>通过Call调用实现UIAbility交互（仅对系统应用开放)-待补充</li></ol><h3 id="服务卡片" tabindex="-1"><a class="header-anchor" href="#服务卡片" aria-hidden="true">#</a> 服务卡片</h3><h4 id="卡片配置文件" tabindex="-1"><a class="header-anchor" href="#卡片配置文件" aria-hidden="true">#</a> 卡片配置文件</h4><ul><li><p>卡片需要在module.json5配置文件中的extensionAbilities标签下，配置FormExtensionAbility相关信息。FormExtensionAbility需要填写metadata元信息标签，其中键名称为固定字符串“ohos.extension.form”，资源为卡片的具体配置信息的索引</p></li><li><p>卡片的具体配置信息。在上述FormExtensionAbility的元信息（“metadata”配置项）中，可以指定卡片具体配置信息的资源索引。例如当resource指定为$profile:form_config时，会使用开发视图的resources/base/profile/目录下的form_config.json作为卡片profile配置文件</p></li></ul><h4 id="卡片生命周期" tabindex="-1"><a class="header-anchor" href="#卡片生命周期" aria-hidden="true">#</a> 卡片生命周期</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> formInfo <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.form.formInfo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> formBindingData <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.form.formBindingData&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> FormExtensionAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.form.FormExtensionAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> formProvider <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.form.formProvider&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryFormAbility</span> <span class="token keyword">extends</span> <span class="token class-name">FormExtensionAbility</span> <span class="token punctuation">{</span>
  <span class="token function">onAddForm</span><span class="token punctuation">(</span><span class="token parameter">want</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;[EntryFormAbility] onAddForm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在入参want中可以取出卡片的唯一标识：formId</span>
    <span class="token keyword">let</span> <span class="token literal-property property">formId</span><span class="token operator">:</span> string <span class="token operator">=</span> want<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>formInfo<span class="token punctuation">.</span>FormParam<span class="token punctuation">.</span><span class="token constant">IDENTITY_KEY</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用方创建卡片时触发，提供方需要返回卡片数据绑定类</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;title&#39;</span><span class="token operator">:</span> <span class="token string">&#39;titleOnAddForm&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;detail&#39;</span><span class="token operator">:</span> <span class="token string">&#39;detailOnAddForm&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> formData <span class="token operator">=</span> formBindingData<span class="token punctuation">.</span><span class="token function">createFormBindingData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> formData<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">onCastToNormalForm</span><span class="token punctuation">(</span><span class="token parameter">formId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Called when the form provider is notified that a temporary form is successfully</span>
    <span class="token comment">// converted to a normal form.</span>
    <span class="token comment">// 使用方将临时卡片转换为常态卡片触发，提供方需要做相应的处理</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[EntryFormAbility] onCastToNormalForm, formId: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">onUpdateForm</span><span class="token punctuation">(</span><span class="token parameter">formId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 若卡片支持定时更新/定点更新/卡片使用方主动请求更新功能，则提供方需要重写该方法以支持数据更新</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;[EntryFormAbility] onUpdateForm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;title&#39;</span><span class="token operator">:</span> <span class="token string">&#39;titleOnUpdateForm&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;detail&#39;</span><span class="token operator">:</span> <span class="token string">&#39;detailOnUpdateForm&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> formData <span class="token operator">=</span> formBindingData<span class="token punctuation">.</span><span class="token function">createFormBindingData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    formProvider<span class="token punctuation">.</span><span class="token function">updateForm</span><span class="token punctuation">(</span>formId<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 异常分支打印</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[EntryFormAbility] Failed to updateForm. Code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">onChangeFormVisibility</span><span class="token punctuation">(</span><span class="token parameter">newStatus</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Called when the form provider receives form events from the system.</span>
    <span class="token comment">// 需要配置formVisibleNotify为true，且为系统应用才会回调</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;[EntryFormAbility] onChangeFormVisibility&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">onFormEvent</span><span class="token punctuation">(</span><span class="token parameter">formId<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Called when a specified message event defined by the form provider is triggered.</span>
    <span class="token comment">// 若卡片支持触发事件，则需要重写该方法并实现对事件的触发</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;[EntryFormAbility] onFormEvent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">onRemoveForm</span><span class="token punctuation">(</span><span class="token parameter">formId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Called to notify the form provider that a specified form has been destroyed.</span>
    <span class="token comment">// 当对应的卡片删除时触发的回调，入参是被删除的卡片ID</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;[EntryFormAbility] onRemoveForm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">onConfigurationUpdate</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当系统配置信息置更新时触发的回调</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;[EntryFormAbility] configurationUpdate:&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">onAcquireFormState</span><span class="token punctuation">(</span><span class="token parameter">want</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Called to return a {@link FormState} object.</span>
    <span class="token comment">// 卡片提供方接收查询卡片状态通知接口，默认返回卡片初始状态。</span>
    <span class="token keyword">return</span> formInfo<span class="token punctuation">.</span>FormState<span class="token punctuation">.</span><span class="token constant">READY</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="卡片事件" tabindex="-1"><a class="header-anchor" href="#卡片事件" aria-hidden="true">#</a> 卡片事件</h4><p>ArkTS卡片中提供了postCardAction(component: Object, action: Object)接口用于卡片内部和提供方应用间的交互，当前支持router、message和call三种类型的事件，仅在卡片中可以调用 <img src="`+o+`"></p><ul><li>&quot;action&quot;：action的类型，支持三种预定义的类型：</li></ul><p>1）&quot;router&quot;：跳转到提供方应用的指定UIAbility。</p><p>2）&quot;message&quot;：自定义消息。触发后会调用提供方FormExtensionAbility的onFormEvent()生命周期回调。</p><p>3）&quot;call&quot;：后台启动提供方应用。触发后会拉起提供方应用的指定UIAbility（仅支持launchType为singleton的UIAbility，即启动模式为单实例的UIAbility），但不会调度到前台。提供方应用需要具备后台运行权限（ohos.permission.KEEP_BACKGROUND_RUNNING）。</p><ul><li><p>&quot;bundleName&quot;：&quot;router&quot; / &quot;call&quot; 类型时跳转的包名，可选。</p></li><li><p>&quot;moduleName&quot;：&quot;router&quot; / &quot;call&quot; 类型时跳转的模块名，可选。</p></li><li><p>&quot;abilityName&quot;：&quot;router&quot; / &quot;call&quot; 类型时跳转的UIAbility名，必填。</p></li><li><p>&quot;params&quot;：当前action携带的额外参数，内容使用JSON格式的键值对形式。&quot;call&quot;类型时需填入参数&#39;method&#39;，且类型需要为string类型，用于触发UIAbility中对应的方法，必填。</p></li></ul><ol><li>使用router事件跳转到指定UIAbility</li></ol><p>在卡片中使用postCardAction接口的router能力，能够快速拉起卡片提供方应用的指定UIAbility，因此UIAbility较多的应用往往会通过卡片提供不同的跳转按钮，实现一键直达的效果。例如相机卡片，卡片上提供拍照、录像等按钮，点击不同按钮将拉起相机应用的不同UIAbility，从而提升用户的体验</p><p>在卡片页面中布局两个按钮，点击其中一个按钮时调用postCardAction向指定UIAbility发送router事件，并在事件内定义需要传递的内容</p><p>示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@Entry
@Component
struct WidgetCard <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;功能A&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token string">&#39;20%&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Jump to EntryAbility funA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">postCardAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;action&#39;</span><span class="token operator">:</span> <span class="token string">&#39;router&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;abilityName&#39;</span><span class="token operator">:</span> <span class="token string">&#39;EntryAbility&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 只能跳转到当前应用下的UIAbility</span>
            <span class="token string-property property">&#39;params&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token string-property property">&#39;targetPage&#39;</span><span class="token operator">:</span> <span class="token string">&#39;funA&#39;</span> <span class="token comment">// 在EntryAbility中处理这个信息</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;功能B&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token string">&#39;20%&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Jump to EntryAbility funB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">postCardAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;action&#39;</span><span class="token operator">:</span> <span class="token string">&#39;router&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;abilityName&#39;</span><span class="token operator">:</span> <span class="token string">&#39;EntryAbility&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 只能跳转到当前应用下的UIAbility</span>
            <span class="token string-property property">&#39;params&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token string-property property">&#39;targetPage&#39;</span><span class="token operator">:</span> <span class="token string">&#39;funB&#39;</span> <span class="token comment">// 在EntryAbility中处理这个信息</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在UIAbility中接收router事件并获取参数，根据传递的params不同，选择拉起不同的页面</p><p>示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> window <span class="token keyword">from</span> <span class="token string">&#39;@ohos.window&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> selectPage <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> currentWindowStage <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">CameraAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果UIAbility第一次启动，在收到Router事件后会触发onCreate生命周期回调</span>
  <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token parameter">want<span class="token punctuation">,</span> launchParam</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取router事件中传递的targetPage参数</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;onCreate want:&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>want<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>want<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>params <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>want<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;onCreate router targetPage:&quot;</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>targetPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
      selectPage <span class="token operator">=</span> params<span class="token punctuation">.</span>targetPage<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 如果UIAbility已在后台运行，在收到Router事件后会触发onNewWant生命周期回调</span>
  <span class="token function">onNewWant</span><span class="token punctuation">(</span><span class="token parameter">want<span class="token punctuation">,</span> launchParam</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;onNewWant want:&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>want<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>want<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>params <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>want<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;onNewWant router targetPage:&quot;</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>targetPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
      selectPage <span class="token operator">=</span> params<span class="token punctuation">.</span>targetPage<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentWindowStage <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onWindowStageCreate</span><span class="token punctuation">(</span>currentWindowStage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">onWindowStageCreate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">windowStage</span><span class="token operator">:</span> window<span class="token punctuation">.</span>WindowStage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> targetPage<span class="token punctuation">;</span>
    <span class="token comment">// 根据传递的targetPage不同，选择拉起不同的页面</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>selectPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;funA&#39;</span><span class="token operator">:</span>
        targetPage <span class="token operator">=</span> <span class="token string">&#39;pages/FunA&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;funB&#39;</span><span class="token operator">:</span>
        targetPage <span class="token operator">=</span> <span class="token string">&#39;pages/FunB&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        targetPage <span class="token operator">=</span> <span class="token string">&#39;pages/Index&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentWindowStage <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentWindowStage <span class="token operator">=</span> windowStage<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    windowStage<span class="token punctuation">.</span><span class="token function">loadContent</span><span class="token punctuation">(</span>targetPage<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to load the content. Cause: %{public}s&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用call事件拉起指定UIAbility到后台</li></ol><p>许多应用希望借助卡片的能力，实现和应用在前台时相同的功能。例如音乐卡片，卡片上提供播放、暂停等按钮，点击不同按钮将触发音乐应用的不同功能，进而提高用户的体验。在卡片中使用postCardAction接口的call能力，能够将卡片提供方应用的指定UIAbility拉到后台。同时，call能力提供了调用应用指定方法、传递数据的功能，使应用在后台运行时可以通过卡片上的按钮执行不同的功能，通常使用按钮控件来触发call事件</p><p>在卡片页面中布局两个按钮，点击其中一个按钮时调用postCardAction向指定UIAbility发送call事件，并在事件内定义需要调用的方法和传递的数据。需要注意的是，method参数为必选参数，且类型需要为string类型，用于触发UIAbility中对应的方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@Entry
@Component
struct WidgetCard <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;功能A&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token string">&#39;20%&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;call EntryAbility funA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">postCardAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;action&#39;</span><span class="token operator">:</span> <span class="token string">&#39;call&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;abilityName&#39;</span><span class="token operator">:</span> <span class="token string">&#39;EntryAbility&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 只能跳转到当前应用下的UIAbility</span>
            <span class="token string-property property">&#39;params&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token string-property property">&#39;method&#39;</span><span class="token operator">:</span> <span class="token string">&#39;funA&#39;</span> <span class="token comment">// 在EntryAbility中调用的方法名</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;功能B&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token string">&#39;20%&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;call EntryAbility funB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">postCardAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;action&#39;</span><span class="token operator">:</span> <span class="token string">&#39;call&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;abilityName&#39;</span><span class="token operator">:</span> <span class="token string">&#39;EntryAbility&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 只能跳转到当前应用下的UIAbility</span>
            <span class="token string-property property">&#39;params&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token string-property property">&#39;method&#39;</span><span class="token operator">:</span> <span class="token string">&#39;funB&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 在EntryAbility中调用的方法名</span>
              <span class="token string-property property">&#39;num&#39;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// 需要传递的其他参数</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在UIAbility中接收call事件并获取参数，根据传递的method不同，执行不同的方法。其余数据可以通过readString的方式获取。需要注意的是，UIAbility需要onCreate生命周期中监听所需的方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function">FunACall</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取call事件中传递的所有参数</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;FunACall param:&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 <span class="token keyword">function</span> <span class="token function">FunBCall</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;FunACall param:&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">CameraAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果UIAbility第一次启动，在收到call事件后会触发onCreate生命周期回调</span>
  <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token parameter">want<span class="token punctuation">,</span> launchParam</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token comment">// 监听call事件所需的方法</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>callee<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;funA&#39;</span><span class="token punctuation">,</span> FunACall<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>callee<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;funB&#39;</span><span class="token punctuation">,</span> FunBCall<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;register failed with error. Cause: &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
   
  <span class="token comment">// 进程退出时，解除监听</span>
  <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>callee<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;funA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>callee<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;funB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;register failed with error. Cause: &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>通过message事件刷新卡片内容</li></ol><p>在卡片页面中可以通过postCardAction接口触发message事件拉起FormExtensionAbility，然后由FormExtensionAbility刷新卡片内容</p><p>在卡片页面通过注册Button的onClick点击事件回调，并在回调中调用postCardAction接口触发message事件拉起FormExtensionAbility。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

@<span class="token function">Entry</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span>
@Component
struct WidgetCard <span class="token punctuation">{</span>
  @<span class="token function">LocalStorageProp</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span> title<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;init&#39;</span><span class="token punctuation">;</span>
  @<span class="token function">LocalStorageProp</span><span class="token punctuation">(</span><span class="token string">&#39;detail&#39;</span><span class="token punctuation">)</span> detail<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;init&#39;</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;刷新&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">postCardAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;action&#39;</span><span class="token operator">:</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;params&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token string-property property">&#39;msgTest&#39;</span><span class="token operator">:</span> <span class="token string">&#39;messageEvent&#39;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>detail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在FormExtensionAbility的onFormEvent生命周期中调用updateForm接口刷新卡片。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> formBindingData <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.form.formBindingData&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> FormExtensionAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.form.FormExtensionAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> formProvider <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.form.formProvider&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryFormAbility</span> <span class="token keyword">extends</span> <span class="token class-name">FormExtensionAbility</span> <span class="token punctuation">{</span>
  <span class="token function">onFormEvent</span><span class="token punctuation">(</span><span class="token parameter">formId<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Called when a specified message event defined by the form provider is triggered.</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">FormAbility onEvent, formId = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;title&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Title Update Success.&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 和卡片布局中对应</span>
      <span class="token string-property property">&#39;detail&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Detail Update Success.&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 和卡片布局中对应</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> formInfo <span class="token operator">=</span> formBindingData<span class="token punctuation">.</span><span class="token function">createFormBindingData</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span>
    formProvider<span class="token punctuation">.</span><span class="token function">updateForm</span><span class="token punctuation">(</span>formId<span class="token punctuation">,</span> formInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;FormAbility updateForm success.&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;FormAbility updateForm failed: &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="卡片数据交互-待补充" tabindex="-1"><a class="header-anchor" href="#卡片数据交互-待补充" aria-hidden="true">#</a> 卡片数据交互--待补充</h4><h2 id="进程模型" tabindex="-1"><a class="header-anchor" href="#进程模型" aria-hidden="true">#</a> 进程模型</h2><p>HarmonyOS的进程模型，应用中（同一包名）的所有UIAbility运行在同一个独立进程中，WebView拥有独立的渲染进程</p><h3 id="公共事件" tabindex="-1"><a class="header-anchor" href="#公共事件" aria-hidden="true">#</a> 公共事件</h3><p>HarmonyOS通过CES（Common Event Service，公共事件服务）为应用程序提供订阅、发布、退订公共事件的能力。这些公共事件可能来自系统、其他应用和应用自身</p><ul><li>公共事件从系统角度可分为：系统公共事件和自定义公共事件。</li></ul><ol><li><p>系统公共事件：CES内部定义的公共事件，只有系统应用和系统服务才能发布，例如HAP安装，更新，卸载等公共事件。目前支持的系统公共事件详见系统公共事件列表。</p></li><li><p>自定义公共事件：应用自定义一些公共事件用来实现跨进程的事件通信能力。</p></li></ol><ul><li>公共事件按发送方式可分为：无序公共事件、有序公共事件和粘性公共事件。</li></ul><ol><li><p>无序公共事件：CES转发公共事件时，不考虑订阅者是否接收到，且订阅者接收到的顺序与其订阅顺序无关。</p></li><li><p>有序公共事件：CES转发公共事件时，根据订阅者设置的优先级等级，优先将公共事件发送给优先级较高的订阅者，等待其成功接收该公共事件之后再将事件发送给优先级较低的订阅者。如果有多个订阅者具有相同的优先级，则他们将随机接收到公共事件。</p></li><li><p>粘性公共事件：能够让订阅者收到在订阅前已经发送的公共事件就是粘性公共事件。普通的公共事件只能在订阅后发送才能收到，而粘性公共事件的特殊性就是可以先发送后订阅。发送粘性事件必须是系统应用或系统服务，且需要申请ohos.permission.COMMONEVENT_STICKY权限，配置方式请参阅访问控制授权申请指导。</p></li></ol><h4 id="动态订阅公共事件" tabindex="-1"><a class="header-anchor" href="#动态订阅公共事件" aria-hidden="true">#</a> 动态订阅公共事件</h4><p>动态订阅是指当应用在运行状态时对某个公共事件进行订阅，在运行期间如果有订阅的事件发布那么订阅了这个事件的应用将会收到该事件及其传递的参数。例如，某应用希望在其运行期间收到电量过低的事件，并根据该事件降低其运行功耗，那么该应用便可动态订阅电量过低事件，收到该事件后关闭一些非必要的任务来降低功耗。订阅部分系统公共事件需要先申请权限</p><p>步骤如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入CommonEvent模块。</span>
<span class="token keyword">import</span> commonEvent <span class="token keyword">from</span> <span class="token string">&#39;@ohos.commonEventManager&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建订阅者信息,用于保存创建成功的订阅者对象，后续使用其完成订阅及退订的动作</span>
<span class="token keyword">let</span> subscriber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 订阅者信息</span>
<span class="token keyword">let</span> subscribeInfo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;usual.event.SCREEN_OFF&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 订阅灭屏公共事件</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建订阅者回调，保存返回的订阅者对象subscriber，用于执行后续的订阅、退订等操作</span>
commonEvent<span class="token punctuation">.</span><span class="token function">createSubscriber</span><span class="token punctuation">(</span>subscribeInfo<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[CommonEvent] CreateSubscriberCallBack err=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[CommonEvent] CreateSubscriber success</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subscriber <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token comment">// 订阅公共事件回调</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 订阅公共事件回调</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>subscriber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    commonEvent<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[CommonEvent] SubscribeCallBack err=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[CommonEvent] SubscribeCallBack data=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[CommonEvent] Need create subscriber</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="取消动态订阅公共事件" tabindex="-1"><a class="header-anchor" href="#取消动态订阅公共事件" aria-hidden="true">#</a> 取消动态订阅公共事件</h4><p>动态订阅者完成业务需要时，需要主动取消订阅，订阅者通过调用unsubscribe()方法取消订阅事件。</p><p>开发步骤：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入CommonEvent模块。</span>
<span class="token keyword">import</span> commonEvent <span class="token keyword">from</span> <span class="token string">&#39;@ohos.commonEventManager&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// subscriber为订阅事件时创建的订阅者对象</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>subscriber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    commonEvent<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[CommonEvent] UnsubscribeCallBack err=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[CommonEvent] Unsubscribe</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
            subscriber <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="公共事件发布" tabindex="-1"><a class="header-anchor" href="#公共事件发布" aria-hidden="true">#</a> 公共事件发布</h4><p>步骤如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入CommonEvent模块。</span>
<span class="token keyword">import</span> commonEvent <span class="token keyword">from</span> <span class="token string">&#39;@ohos.commonEventManager&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 公共事件相关信息</span>
<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 公共事件的初始代码</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;initial data&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 公共事件的初始数据</span>
<span class="token punctuation">}</span>

<span class="token comment">// 发布公共事件</span>
commonEvent<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&quot;usual.event.SCREEN_OFF&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;[CommonEvent] PublishCallBack err=&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;[CommonEvent] Publish success&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程模型" tabindex="-1"><a class="header-anchor" href="#线程模型" aria-hidden="true">#</a> 线程模型</h2><p>HarmonyOS应用中每个进程都会有一个主线程，主线程有如下职责：</p><ul><li>执行UI绘制；</li><li>管理主线程的ArkTS引擎实例，使多个UIAbility组件能够运行在其之上；</li><li>管理其他线程（例如Worker线程）的ArkTS引擎实例，例如启动和终止其他线程；</li><li>分发交互事件；</li><li>处理应用代码的回调，包括事件处理和生命周期管理；</li><li>接收Worker线程发送的消息；</li></ul><p>除主线程外，还有一类与主线程并行的独立线程Worker，主要用于执行耗时操作，但不可以直接操作UI。Worker线程在主线程中创建，与主线程相互独立。最多可以创建8个Worker</p><h3 id="使用emitter进行线程间通信" tabindex="-1"><a class="header-anchor" href="#使用emitter进行线程间通信" aria-hidden="true">#</a> 使用Emitter进行线程间通信</h3><p>Emitter主要提供线程间发送和处理事件的能力，包括对持续订阅事件或单次订阅事件的处理、取消订阅事件、发送事件到事件队列等。</p><p>Emitter的开发步骤如下：</p><ol><li>订阅事件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> emitter <span class="token keyword">from</span> <span class="token string">&quot;@ohos.events.emitter&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个eventId为1的事件</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">eventId</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 收到eventId为1的事件后执行该回调</span>
<span class="token keyword">let</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">eventData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;event callback&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 订阅eventId为1的事件</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>发送事件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> emitter <span class="token keyword">from</span> <span class="token string">&quot;@ohos.events.emitter&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个eventId为1的事件，事件优先级为Low</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">eventId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">priority</span><span class="token operator">:</span> emitter<span class="token punctuation">.</span>EventPriority<span class="token punctuation">.</span><span class="token constant">LOW</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> eventData <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;isEmpty&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 发送eventId为1的事件，事件内容为eventData</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> eventData<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用worker进行线程间通信" tabindex="-1"><a class="header-anchor" href="#使用worker进行线程间通信" aria-hidden="true">#</a> 使用Worker进行线程间通信</h3><p>Worker是与主线程并行的独立线程。创建Worker的线程被称为宿主线程，Worker工作的线程被称为Worker线程。创建Worker时传入的脚本文件在Worker线程中执行，通常在Worker线程中处理耗时的操作，需要注意的是，Worker中不能直接更新Page。</p><p>Worker的开发步骤如下：</p><ol><li>在工程的模块级build-profile.json5文件的buildOption属性中添加配置信息</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token string-property property">&quot;buildOption&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;sourceOption&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;workers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;./src/main/ets/workers/worker.ts&quot;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>根据build-profile.json5中的配置创建对应的worker.ts文件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> worker <span class="token keyword">from</span> <span class="token string">&#39;@ohos.worker&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> parent <span class="token operator">=</span> worker<span class="token punctuation">.</span>workerPort<span class="token punctuation">;</span>

<span class="token comment">// 处理来自主线程的消息</span>
parent<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;onmessage: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span>
    <span class="token comment">// 发送消息到主线程</span>
    parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;message from worker thread.&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>初始化和使用worker</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> worker <span class="token keyword">from</span> <span class="token string">&#39;@ohos.worker&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> wk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">worker<span class="token punctuation">.</span>ThreadWorker</span><span class="token punctuation">(</span><span class="token string">&quot;entry/ets/workers/worker.ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发送消息到worker线程</span>
wk<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;message from main thread.&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 处理来自worker线程的消息</span>
wk<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;message from worker: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span>

    <span class="token comment">// 根据业务按需停止worker线程</span>
    wk<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ui开发" tabindex="-1"><a class="header-anchor" href="#ui开发" aria-hidden="true">#</a> UI开发</h2><h3 id="页面路由" tabindex="-1"><a class="header-anchor" href="#页面路由" aria-hidden="true">#</a> 页面路由</h3><h4 id="页面跳转" tabindex="-1"><a class="header-anchor" href="#页面跳转" aria-hidden="true">#</a> 页面跳转</h4><p>Router模块提供了两种跳转模式，分别是router.pushUrl()和router.replaceUrl()。这两种模式决定了目标页是否会替换当前页。</p><ul><li>router.pushUrl()：目标页不会替换当前页，而是压入页面栈。这样可以保留当前页的状态，并且可以通过返回键或者调用router.back()方法返回到当前页。</li><li>router.replaceUrl()：目标页会替换当前页，并销毁当前页</li></ul><blockquote><p>页面栈的最大容量为32个页面。如果超过这个限制，可以调用router.clear()方法清空历史页面栈，释放内存空间</p></blockquote><p>Router模块提供了两种实例模式，分别是Standard和Single。这两种模式决定了目标url是否会对应多个实例。</p><ul><li>Standard：标准实例模式，也是默认情况下的实例模式。每次调用该方法都会新建一个目标页，并压入栈顶。</li><li>Single：单实例模式。即如果目标页的url在页面栈中已经存在同url页面，则离栈顶最近的同url页面会被移动到栈顶，并重新加载；如果目标页的url在页面栈中不存在同url页面，则按照标准模式跳转</li></ul><p>使用语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> router<span class="token punctuation">.</span><span class="token function">replaceUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;pages/SearchDetail&#39;</span> <span class="token comment">// 目标url</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span>RouterMode<span class="token punctuation">.</span>Single<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invoke replaceUrl failed, code is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Invoke replaceUrl succeeded.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要在跳转时传递一些数据给目标页，则可以在调用Router模块的方法时，添加一个params属性，并指定一个对象作为参数，在目标页中，可以通过调用Router模块的getParams()方法来获取传递过来的参数</p><h4 id="页面返回" tabindex="-1"><a class="header-anchor" href="#页面返回" aria-hidden="true">#</a> 页面返回</h4><p>当用户在一个页面完成操作后，通常需要返回到上一个页面或者指定页面，这就需要用到页面返回功能。在返回的过程中，可能需要将数据传递给目标页，这就需要用到数据传递功能，可以使用以下几种方式进行页面返回：</p><ul><li>返回到上一个页面。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>返回到指定页面，目标页必须存在于页面栈中才能够返回</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;pages/Home&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>返回到指定页面，并传递自定义参数信息，参数信息可以在目标页中通过调用router.getParams()方法进行获取和解析</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;pages/Home&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token string">&#39;来自Home页&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 目标页</span>
<span class="token function">onPageShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取传递过来的参数对象</span>
  <span class="token keyword">const</span> info <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取info属性的值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当使用router.back()方法返回到指定页面时，该页面会被重新压入栈顶，而原栈顶页面（包括）到指定页面（不包括）之间的所有页面栈都将被销毁。</p></blockquote><h4 id="返回确认" tabindex="-1"><a class="header-anchor" href="#返回确认" aria-hidden="true">#</a> 返回确认</h4><ul><li>系统默认询问框</li></ul><p>Router模块提供的两个方法：router.showAlertBeforeBackPage()和router.back()来实现这个功能，需要在调用router.back()方法之前，通过调用router.showAlertBeforeBackPage()方法设置返回询问框的信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个返回按钮的点击事件处理函数</span>
<span class="token keyword">function</span> <span class="token function">onBackClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用router.showAlertBeforeBackPage()方法，设置返回询问框的信息</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    router<span class="token punctuation">.</span><span class="token function">showAlertBeforeBackPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;您还没有完成支付，确定要返回吗？&#39;</span> <span class="token comment">// 设置询问框的内容</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invoke showAlertBeforeBackPage failed, code is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 调用router.back()方法，返回上一个页面</span>
  router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义询问框</li></ul><p>自定义询问框的方式，可以使用弹窗或者自定义弹窗实现。这样可以让应用界面与系统默认询问框有所区别，提高应用的用户体验度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">onBackClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 弹出自定义的询问框</span>
  promptAction<span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;您还没有完成支付，确定要返回吗？&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">buttons</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;取消&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;#FF0000&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;确认&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;#0099FF&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 用户点击了“取消”按钮</span>
      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;User canceled the operation.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>index <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 用户点击了“确认”按钮</span>
      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;User confirmed the operation.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 调用router.back()方法，返回上一个页面</span>
      router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invoke showDialog failed, code is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显示图形" tabindex="-1"><a class="header-anchor" href="#显示图形" aria-hidden="true">#</a> 显示图形</h3><h4 id="显示图片" tabindex="-1"><a class="header-anchor" href="#显示图片" aria-hidden="true">#</a> 显示图片</h4><p>Image支持加载存档图、多媒体像素图两种类型</p><p>存档图类型的数据源可以分为本地资源、网络资源、Resource资源、媒体库资源和base64</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 本地资源</span>
<span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&#39;images/view.jpg&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>

<span class="token comment">// 网络资源</span>
<span class="token comment">// 引入网络图片需申请权限ohos.permission.INTERNET，Image组件的src参数为网络图片的链接。</span>
<span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.example.com/example.JPG&#39;</span><span class="token punctuation">)</span> 

<span class="token comment">// Resource资源</span>
<span class="token comment">// resources文件夹下的图片都可以通过$r资源接口读取到并转换到Resource格式。</span>
<span class="token function">Image</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.media.icon&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//还可以将图片放在rawfile文件夹下。</span>
<span class="token function">Image</span><span class="token punctuation">(</span><span class="token function">$rawfile</span><span class="token punctuation">(</span><span class="token string">&#39;snap&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">// 媒体库file://data/storage</span>
<span class="token comment">// 支持file://路径前缀的字符串，用于访问通过媒体库提供的图片路径。</span>

<span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&#39;file://media/Photos/5&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>

<span class="token comment">// base64</span>
<span class="token literal-property property">路径格式为data</span><span class="token operator">:</span>image<span class="token operator">/</span><span class="token punctuation">[</span>png<span class="token operator">|</span>jpeg<span class="token operator">|</span>bmp<span class="token operator">|</span>webp<span class="token punctuation">]</span><span class="token punctuation">;</span>base64<span class="token punctuation">,</span><span class="token punctuation">[</span>base64 data<span class="token punctuation">]</span>，其中<span class="token punctuation">[</span>base64 data<span class="token punctuation">]</span>为Base64字符串数据。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PixelMap是图片解码后的像素图</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@ohos.net.http&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ResponseCode <span class="token keyword">from</span> <span class="token string">&#39;@ohos.net.http&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> image <span class="token keyword">from</span> <span class="token string">&#39;@ohos.multimedia.image&#39;</span><span class="token punctuation">;</span>

@State image<span class="token operator">:</span> PixelMap <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

http<span class="token punctuation">.</span><span class="token function">createHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.example.com/xxx.png&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http reqeust failed with. Code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> code <span class="token operator">=</span> data<span class="token punctuation">.</span>responseCode<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ResponseCode<span class="token punctuation">.</span>ResponseCode<span class="token punctuation">.</span><span class="token constant">OK</span> <span class="token operator">===</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> <span class="token literal-property property">res</span><span class="token operator">:</span> any <span class="token operator">=</span> data<span class="token punctuation">.</span>result  
      <span class="token keyword">let</span> imageSource <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">createImageSource</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">alphaType</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                     <span class="token comment">// 透明度</span>
        <span class="token literal-property property">editable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                  <span class="token comment">// 是否可编辑</span>
        <span class="token literal-property property">pixelFormat</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                   <span class="token comment">// 像素格式</span>
        <span class="token literal-property property">scaleMode</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                     <span class="token comment">// 缩略值</span>
        <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>  <span class="token comment">// 创建图片大小</span>
        imageSource<span class="token punctuation">.</span><span class="token function">createPixelMap</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pixelMap</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> pixelMap
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;获取网络图片&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">httpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">Image</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="显示矢量图" tabindex="-1"><a class="header-anchor" href="#显示矢量图" aria-hidden="true">#</a> 显示矢量图</h4><p>Image组件可显示矢量图（svg格式的图片），支持的svg标签为：svg、rect、circle、ellipse、path、line、polyline、polygon和animate。</p><p>svg格式的图片可以使用fillColor属性改变图片的绘制颜色。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Image</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.media.cloud&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">fillColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="图片插值" tabindex="-1"><a class="header-anchor" href="#图片插值" aria-hidden="true">#</a> 图片插值</h4><p>当原图分辨率较低并且放大显示时，图片会模糊出现锯齿。这时可以使用interpolation属性对图片进行插值，使图片显示得更清晰</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Image</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.media.grass&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;40%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">interpolation</span><span class="token punctuation">(</span>ImageInterpolation<span class="token punctuation">.</span>Low<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">borderWidth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token string">&quot;Interpolation.Low&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">align</span><span class="token operator">:</span> Alignment<span class="token punctuation">.</span>Bottom<span class="token punctuation">,</span> <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="绘制几何图形" tabindex="-1"><a class="header-anchor" href="#绘制几何图形" aria-hidden="true">#</a> 绘制几何图形</h3><p>绘制组件用于在页面绘制图形，Shape组件是绘制组件的父组件，父组件中会描述所有绘制组件均支持的通用属性，绘制类型支持Circle（圆形）、Ellipse（椭圆形）、Line（直线）、Polyine（折线）、Polygon（多边形）、Path（路径）、Rect（矩形）七种</p><p>形状视口viewport指定用户空间中的一个矩形，该矩形映射到为关联的 SVG 元素建立的视区边界。viewport属性的值包含x、y、width和height四个可选参数，x 和 y 表示视区的左上角坐标，width和height表示其尺寸。通过viewport可以实现几何图形在父组件Shape中平移、缩小、放大</p><h3 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h3><p>如果按照基础能力分，可分为属性动画、显式动画、转场动画三部分</p><h4 id="显式动画" tabindex="-1"><a class="header-anchor" href="#显式动画" aria-hidden="true">#</a> 显式动画</h4><p>闭包内的变化均会触发动画，包括由数据变化引起的组件的增删、组件属性的变化等，可以做较为复杂的动画</p><p>显式动画使用<code>animateTo(value: AnimateParam, event: () =&gt; void)</code>，第一个参数指定动画参数，第二个参数为动画的闭包函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@Entry
@Component
struct LayoutChange <span class="token punctuation">{</span>
  <span class="token comment">// 用于控制Column的alignItems属性</span>
  @State itemAlign<span class="token operator">:</span> HorizontalAlign <span class="token operator">=</span> HorizontalAlign<span class="token punctuation">.</span>Start<span class="token punctuation">;</span>
  <span class="token literal-property property">allAlign</span><span class="token operator">:</span> HorizontalAlign<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>HorizontalAlign<span class="token punctuation">.</span>Start<span class="token punctuation">,</span> HorizontalAlign<span class="token punctuation">.</span>Center<span class="token punctuation">,</span> HorizontalAlign<span class="token punctuation">.</span>End<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token literal-property property">alignIndex</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Column</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">alignItems</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>itemAlign<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">borderWidth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&quot;90%&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>

      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 动画时长为1000ms，曲线为EaseInOut</span>
        <span class="token function">animateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">curve</span><span class="token operator">:</span> Curve<span class="token punctuation">.</span>EaseInOut <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>alignIndex <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>alignIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allAlign<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
          <span class="token comment">// 在闭包函数中修改this.itemAlign参数，使Column容器内部孩子的布局方式变化，使用动画过渡到新位置</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>itemAlign <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allAlign<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>alignIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&quot;100%&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&quot;100%&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="属性动画" tabindex="-1"><a class="header-anchor" href="#属性动画" aria-hidden="true">#</a> 属性动画</h4><p>显式动画把要执行动画的属性的修改放在闭包函数中触发动画，而属性动画则无需使用闭包，把animation属性加在要做属性动画的组件的属性后即可</p><p>属性动画使用<code>animation(value: AnimateParam)</code>，其入参为动画参数。想要组件随某个属性值的变化而产生动画，此属性需要加在animation属性之前。有的属性变化不希望通过animation产生属性动画，可以放在animation之后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@Entry
@Component
struct LayoutChange2 <span class="token punctuation">{</span>
  @State myWidth<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  @State myHeight<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
  @State flag<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  @State myColor<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Blue<span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>ButtonType<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myWidth<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myHeight<span class="token punctuation">)</span>
        <span class="token comment">// animation只对其上面的type、width、height属性生效，时长为1000ms，曲线为Ease</span>
        <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">curve</span><span class="token operator">:</span> Curve<span class="token punctuation">.</span>Ease <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">// animation对下面的backgroundColor、margin属性不生效</span>
        <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myColor<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
        

      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;area: click me&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 改变属性值，配置了属性动画的属性会进行动画过渡</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>myWidth <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>myHeight <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>myColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Blue<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>myWidth <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>myHeight <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>myColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Pink<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件专场动画" tabindex="-1"><a class="header-anchor" href="#组件专场动画" aria-hidden="true">#</a> 组件专场动画</h4><p>组件的插入、删除过程即为组件本身的转场过程，组件的插入、删除动画称为组件内转场动画。通过组件内转场动画，可定义组件出现、消失的效果。</p><p>组件内转场动画的接口为：<code>transition(value: TransitionOptions)</code>，可以定义平移、透明度、旋转、缩放这几种转场样式的单个或者组合的转场效果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@Entry
@Component
struct IfElseTransition <span class="token punctuation">{</span>
  @State flag<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  @State show<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;show&#39;</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token string">&#39;hide&#39;</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token string">&#39;show&#39;</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          
          <span class="token function">animateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 动画闭包内控制Image组件的出现和消失</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Image的出现和消失配置为不同的过渡效果</span>
        <span class="token function">Image</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.media.mountain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> TransitionType<span class="token punctuation">.</span>Insert<span class="token punctuation">,</span> <span class="token literal-property property">translate</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">200</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> TransitionType<span class="token punctuation">.</span>Delete<span class="token punctuation">,</span> <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">scale</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="页面专场动画" tabindex="-1"><a class="header-anchor" href="#页面专场动画" aria-hidden="true">#</a> 页面专场动画</h4><p>两个页面间发生跳转，一个页面消失，另一个页面出现，这时可以配置各自页面的页面转场参数实现自定义的页面转场效果。页面转场效果写在pageTransition函数中，通过PageTransitionEnter和PageTransitionExit指定页面进入和退出的动画效果。可通过slide、translate、scale、opacity属性定义不同的页面转场效果。对于PageTransitionEnter而言，这些效果表示入场时起点值，对于PageTransitionExit而言，这些效果表示退场的终点值</p><p>PageTransitionEnter的接口为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">PageTransitionEnter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">?</span><span class="token operator">:</span> RouteType<span class="token punctuation">,</span>duration<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>curve<span class="token operator">?</span><span class="token operator">:</span> Curve <span class="token operator">|</span> string<span class="token punctuation">,</span>delay<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>PageTransitionExit的接口为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">PageTransitionExit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">?</span><span class="token operator">:</span> RouteType<span class="token punctuation">,</span>duration<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>curve<span class="token operator">?</span><span class="token operator">:</span> Curve <span class="token operator">|</span> string<span class="token punctuation">,</span>delay<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// PageTransitionSrc1</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;@ohos.router&#39;</span><span class="token punctuation">;</span>
@Entry
@Component
struct PageTransitionSrc1 <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Image</span><span class="token punctuation">(</span><span class="token function">$r</span><span class="token punctuation">(</span><span class="token string">&#39;app.media.mountain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;90%&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;80%&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">objectFit</span><span class="token punctuation">(</span>ImageFit<span class="token punctuation">.</span>Fill<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">syncLoad</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 同步加载图片，使页面出现时图片已经加载完成</span>
        <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>

      <span class="token function">Row</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;pushUrl&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 路由到下一个页面，push操作</span>
            router<span class="token punctuation">.</span><span class="token function">pushUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;pages/myTest/pageTransitionDst1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;back&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 返回到上一页面，相当于pop操作</span>
            router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">justifyContent</span><span class="token punctuation">(</span>FlexAlign<span class="token punctuation">.</span>Center<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&quot;100%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&quot;100%&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">alignItems</span><span class="token punctuation">(</span>HorizontalAlign<span class="token punctuation">.</span>Center<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">pageTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义页面进入时的效果，从右侧滑入，时长为1000ms，页面栈发生push操作时该效果才生效</span>
    <span class="token function">PageTransitionEnter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> RouteType<span class="token punctuation">.</span>Push<span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">slide</span><span class="token punctuation">(</span>SlideEffect<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>
    <span class="token comment">// 定义页面进入时的效果，从左侧滑入，时长为1000ms，页面栈发生pop操作时该效果才生效</span>
    <span class="token function">PageTransitionEnter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> RouteType<span class="token punctuation">.</span>Pop<span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">slide</span><span class="token punctuation">(</span>SlideEffect<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>
    <span class="token comment">// 定义页面退出时的效果，向左侧滑出，时长为1000ms，页面栈发生push操作时该效果才生效</span>
    <span class="token function">PageTransitionExit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> RouteType<span class="token punctuation">.</span>Push<span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">slide</span><span class="token punctuation">(</span>SlideEffect<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>
    <span class="token comment">// 定义页面退出时的效果，向右侧滑出，时长为1000ms，页面栈发生pop操作时该效果才生效</span>
    <span class="token function">PageTransitionExit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> RouteType<span class="token punctuation">.</span>Pop<span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">slide</span><span class="token punctuation">(</span>SlideEffect<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,228),l=[i];function u(r,k){return s(),a("div",null,l)}const v=n(c,[["render",u],["__file","develop.html.vue"]]);export{v as default};
