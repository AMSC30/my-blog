import{_ as t,p as o,q as l,s as n,R as s,t as e,Y as p,n as i}from"./framework-e1bed10d.js";const r={},c=n("h1",{id:"vite",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vite","aria-hidden":"true"},"#"),s(" Vite")],-1),u=n("p",null,[s("Vite（/vit/）是一种新型前端构建工具，通过"),n("code",null,"按需编译"),s("等方式能够显著提升前端开发体验。它主要由两部分组成：")],-1),d=n("ul",null,[n("li",null,[n("p",null,"一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）。")]),n("li",null,[n("p",null,"一套构建指令，它使用 Rollup 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源")])],-1),k={href:"https://cn.vitejs.dev/guide/",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h2><h3 id="vite-1" tabindex="-1"><a class="header-anchor" href="#vite-1" aria-hidden="true">#</a> vite</h3><p>在当前目录下启动vite开发服务器</p><p>选项：</p><ul><li>--host [host] 指定主机名称 (string)</li><li>--port &lt;port&gt; 指定端口 (number)</li><li>--https 使用 TLS + HTTP/2 (boolean)</li><li>--open [path] 启动时打开浏览器 (boolean | string)</li><li>--cors 启用 CORS (boolean)</li><li>--strictPort 如果指定的端口已在使用中，则退出 (boolean)</li><li>--force 强制优化器忽略缓存并重新构建 (boolean)</li><li>-c, --config &lt;file&gt; 使用指定的配置文件 (string)</li><li>--base &lt;path&gt; 公共基础路径（默认为：/）(string)</li><li>-l, --logLevel &lt;level&gt; Info | warn | error | silent (string)</li><li>--clearScreen 允许或禁用打印日志时清除屏幕 (boolean)</li><li>-d, --debug [feat] 显示调试日志 (string | boolean)</li><li>-f, --filter &lt;filter&gt; 过滤调试日志 (string)</li><li>-m, --mode &lt;mode&gt; 设置环境模式 (string)</li><li>-h, --help 显示可用的 CLI 选项</li><li>-v, --version 显示版本号</li></ul><h3 id="vite-build" tabindex="-1"><a class="header-anchor" href="#vite-build" aria-hidden="true">#</a> vite build</h3><p>构建生产版本</p><p>选项：</p><ul><li>--target &lt;target&gt; 编译目标（默认为：&quot;modules&quot;）(string)</li><li>--outDir &lt;dir&gt; 输出目录（默认为：dist）(string)</li><li>--assetsDir &lt;dir&gt; 在输出目录下放置资源的目录（默认为：&quot;assets&quot;）(string)</li><li>--assetsInlineLimit &lt;number&gt; 静态资源内联为 base64 编码的阈值，以字节为单位（默认为：4096）(number)</li><li>--ssr [entry] 为服务端渲染配置指定入口文件 (string)</li><li>--sourcemap [output] 构建后输出 source map 文件（默认为：false）(boolean | &quot;inline&quot; | &quot;hidden&quot;)</li><li>--minify [minifier] 允许或禁用最小化混淆，或指定使用哪种混淆器（默认为：&quot;esbuild&quot;）(boolean | &quot;terser&quot; | &quot;esbuild&quot;)</li><li>--manifest [name] 构建后生成 manifest.json 文件 (boolean | string)</li><li>--ssrManifest [name] 构建后生成 SSR manifest.json 文件 (boolean | string)</li><li>--force 强制优化器忽略缓存并重新构建（实验性）(boolean)</li><li>--emptyOutDir 若输出目录在根目录外，强制清空输出目录 (boolean)</li><li>-w, --watch 在磁盘中模块发生变化时，重新构建 (boolean)</li><li>-c, --config &lt;file&gt; 使用指定的配置文件 (string)</li><li>--base &lt;path&gt; 公共基础路径（默认为：/）(string)</li><li>-l, --logLevel &lt;level&gt; Info | warn | error | silent (string)</li><li>--clearScreen 允许或禁用打印日志时清除屏幕 (boolean)</li><li>-d, --debug [feat] 显示调试日志 (string | boolean)</li><li>-f, --filter &lt;filter&gt; 过滤调试日志 (string)</li><li>-m, --mode &lt;mode&gt; 设置环境模式 (string)</li><li>-h, --help 显示可用的 CLI 选项</li></ul><h3 id="vite-optimize" tabindex="-1"><a class="header-anchor" href="#vite-optimize" aria-hidden="true">#</a> vite optimize</h3><p>预构建依赖。</p><p>选项:</p><ul><li>--force 强制优化器忽略缓存并重新构建 (boolean)</li><li>-c, --config &lt;file&gt; 使用指定的配置文件 (string)</li><li>--base &lt;path&gt; 公共基础路径（默认为：/）(string)</li><li>-l, --logLevel &lt;level&gt; Info | warn | error | silent (string)</li><li>--clearScreen 允许或禁用打印日志时清除屏幕 (boolean)</li><li>-d, --debug [feat] 显示调试日志 (string | boolean)</li><li>-f, --filter &lt;filter&gt; 过滤调试日志 (string)</li><li>-m, --mode &lt;mode&gt; 设置环境模式 (string)</li><li>-h, --help 显示可用的 CLI 选项</li></ul><h3 id="vite-preview" tabindex="-1"><a class="header-anchor" href="#vite-preview" aria-hidden="true">#</a> vite preview</h3><p>本地预览构建产物。不要将其用作生产服务器，因为它不是为此而设计的。</p><p>选项:</p><ul><li>--host [host] 指定主机名称 (string)</li><li>--port &lt;port&gt; 指定端口 (number)</li><li>--strictPort 如果指定的端口已在使用中，则退出 (boolean)</li><li>--https 使用 TLS + HTTP/2 (boolean)</li><li>--open [path] 启动时打开浏览器 (boolean | string)</li><li>--outDir &lt;dir&gt; 输出目录（默认为：dist)(string)</li><li>-c, --config &lt;file&gt; 使用指定的配置文件 (string)</li><li>--base &lt;path&gt; 公共基础路径（默认为：/）(string)</li><li>-l, --logLevel &lt;level&gt; Info | warn | error | silent (string)</li><li>--clearScreen 允许或禁用打印日志时清除屏幕 (boolean)</li><li>-d, --debug [feat] 显示调试日志 (string | boolean)</li><li>-f, --filter &lt;filter&gt; 过滤调试日志 (string)</li><li>-m, --mode &lt;mode&gt; 设置环境模式 (string)</li><li>-h, --help 显示可用的 CLI 选项</li></ul><h2 id="资源处理" tabindex="-1"><a class="header-anchor" href="#资源处理" aria-hidden="true">#</a> 资源处理</h2><h3 id="npm依赖解析" tabindex="-1"><a class="header-anchor" href="#npm依赖解析" aria-hidden="true">#</a> npm依赖解析</h3><p>对于以下情况：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> someMethod <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my-dep&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器中对于这种导入会抛出一个错误，Vite 将会检测到所有被加载的源文件中的此类裸模块导入，并执行以下操作:</p><p><strong>1. 预构建</strong></p><p>它们可以提高页面加载速度，并将 CommonJS / UMD 转换为 ESM 格式。预构建这一步由<code>esbuild</code>执行，这使得 Vite 的冷启动时间比任何基于 JavaScript 的打包器都要快得多。</p><p>原因：</p><ul><li><p>Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将以 CommonJS 或 UMD 形式提供的依赖项转换为 ES 模块。在转换 CommonJS 依赖项时，Vite 会进行智能导入分析，这样即使模块的导出是动态分配的</p></li><li><p>为了提高后续页面的加载性能，Vite将那些具有许多内部模块的 ESM 依赖项转换为单个模块。</p></li></ul><p><strong>2. 重写导入为合法的 URL</strong></p><p>例如 /node_modules/.vite/deps/my-dep.js?v=f3sf2ebd 以便浏览器能够正确导入它们</p><h3 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h3><p>Vite 使用esbuild（是 tsc 速度的 20~30 倍）仅执行 .ts 文件的转译工作，并不执行任何类型检查。因为转译可以在每个文件的基础上进行，与 Vite 的按需编译模式完全吻合，类型检查需要了解整个模块图，对构建速度产生损害</p><p>使用 仅含类型的导入和导出 形式的语法可以避免潜在的 “仅含类型的导入被不正确打包” 的问题：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token constant">T</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;only/types&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token constant">T</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用vite转译ts，编译配置选项（compilerOptions）需要注意一下几点：</p><p><strong>1. isolatedModules</strong></p><p>因为 esbuild 只执行没有类型信息的转译，它并不支持某些特性，如 const enum 和隐式类型导入，isolatedModules应该设置为true，TS 会警告你不要使用隔离（isolated）转译的功能</p><blockquote><p>一些库（如：vue）不能很好地与 &quot;isolatedModules&quot;: true 共同工作。你可以在上游仓库修复好之前暂时使用 &quot;skipLibCheck&quot;: true 来缓解这个错误。</p></blockquote><p><strong>2. useDefineForClassFields</strong></p><p>从 Vite v2.5.0 开始，如果 TypeScript 的 target 是 ESNext 或 ES2022 及更新版本，此选项默认值则为 true(大多数符合预期)</p><p>如果正在使用一个严重依赖 class fields 的库，请注意该库对此选项的预期设置</p><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h3><p>Vite 为 Vue 提供第一优先级支持：</p><ul><li>Vue 3 单文件组件支持：@vitejs/plugin-vue</li><li>Vue 3 JSX 支持：@vitejs/plugin-vue-jsx</li><li>Vue 2.7 SFC 支持：@vitejs/plugin-vue2</li><li>Vue 2.7 JSX support via @vitejs/plugin-vue2-jsx</li></ul><h3 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx" aria-hidden="true">#</a> JSX</h3><p>.jsx 和 .tsx 文件同样开箱即用。JSX 的转译同样是通过 esbuild</p><p>如果不是在 React 或 Vue 中使用 JSX，自定义的 jsxFactory 和 jsxFragment 可以使用 esbuild 选项 进行配置。例如对 Preact：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">esbuild</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">jsxFactory</span><span class="token operator">:</span> <span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">jsxFragment</span><span class="token operator">:</span> <span class="token string">&#39;Fragment&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 jsxInject（这是一个仅在 Vite 中使用的选项）为 JSX 注入 helper，以避免手动导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">esbuild</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">jsxInject</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import React from &#39;react&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h3><p>导入 .css 文件将会把内容插入到<code>&lt;style&gt;</code>标签中，同时也带有 HMR 支持。也能够以字符串的形式检索处理后的作为其模块默认导出的 CSS</p><p><strong>1. @import 内联和变基</strong></p><p>Vite 通过 postcss-import 预配置支持了 CSS @import 内联，Vite 的路径别名也遵从 CSS @import。换句话说，所有 CSS url() 引用，即使导入的文件在不同的目录中，也总是自动变基，以确保正确性。</p><p>Sass 和 Less 文件也支持 @import 别名和 URL 变基</p><p><strong>2. PostCSS</strong></p><p>如果项目包含有效的 PostCSS 配置 (任何受 postcss-load-config 支持的格式，例如 postcss.config.js)，它将会自动应用于所有已导入的 CSS。</p><p><strong>3. CSS Modules</strong></p><p>任何以 .module.css 为后缀名的 CSS 文件都被认为是一个 CSS modules 文件。导入这样的文件会返回一个相应的模块对象：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* example.module.css */</span>
<span class="token selector">.red</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> classes <span class="token keyword">from</span> <span class="token string">&#39;./example.module.css&#39;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className <span class="token operator">=</span> classes<span class="token punctuation">.</span>red
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. CSS 预处理器</strong></p><p>提供了对 .scss, .sass, .less, .styl 和 .stylus 文件的内置支持。没有必要为它们安装特定的 Vite 插件，但必须安装相应的预处理器依赖</p><p>由于 Vite 的目标仅为现代浏览器，因此建议使用原生 CSS 变量和实现 CSSWG 草案的 PostCSS 插件（例如 postcss-nesting）来编写简单的、符合未来标准的 CSS</p><p><strong>5. 禁用 CSS 注入页面</strong></p><p>自动注入 CSS 内容的行为可以通过 ?inline 参数来关闭。在关闭时，被处理过的 CSS 字符串将会作为该模块的默认导出，但样式并没有被注入到页面中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;./foo.css&#39;</span> <span class="token comment">// 样式将会注入页面</span>
<span class="token keyword">import</span> otherStyles <span class="token keyword">from</span> <span class="token string">&#39;./bar.css?inline&#39;</span> <span class="token comment">// 样式不会注入页面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>自 Vite 4 起，CSS 文件的默认导入和按名导入（例如 import style from &#39;./foo.css&#39;）将弃用。请使用 ?inline 参数代替。</p></blockquote><h3 id="assets" tabindex="-1"><a class="header-anchor" href="#assets" aria-hidden="true">#</a> Assets</h3><p>导入一个静态资源vite会返回解析后的URL，常见的图像、媒体和字体文件类型被自动检测为资源。使用assetsInclude选项扩展内部列表</p><p>引用的资源作为构建资源图的一部分包括在内，将生成散列文件名，并可以由插件进行处理以进行优化。较小的资源体积小于 assetsInlineLimit 选项值 则会被内联为 base64 data URL</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> imgUrl <span class="token keyword">from</span> <span class="token string">&#39;./img.png&#39;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;hero-img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgUrl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加一些特殊的查询参数可以更改资源被引入的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 显式加载资源为一个 URL</span>
<span class="token keyword">import</span> assetAsURL <span class="token keyword">from</span> <span class="token string">&#39;./asset.js?url&#39;</span>

<span class="token comment">// 以字符串形式加载资源</span>
<span class="token keyword">import</span> assetAsString <span class="token keyword">from</span> <span class="token string">&#39;./shader.glsl?raw&#39;</span>

<span class="token comment">// 加载为 Web Worker</span>
<span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">&#39;./worker.js?worker&#39;</span>

<span class="token comment">// 在构建时 Web Worker 内联为 base64 字符串</span>
<span class="token keyword">import</span> InlineWorker <span class="token keyword">from</span> <span class="token string">&#39;./worker.js?worker&amp;inline&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="public" tabindex="-1"><a class="header-anchor" href="#public" aria-hidden="true">#</a> public</h3><p>public应该位于项目的根目录下，默认为&lt;root&gt;/public，通过publicDir配置可以进行修改。public目录中的文件不会被进行转译，不会对文件名做哈希散列化。访问public中的资源应该使用根绝对路径，并且不应该被js文件所引用</p><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h3><p>可以被直接导入 —— 同样支持具名导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入整个对象</span>
<span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">&#39;./example.json&#39;</span>
<span class="token comment">// 对一个根字段使用具名导入 —— 有效帮助 treeshaking！</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> field <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./example.json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="glob-导入" tabindex="-1"><a class="header-anchor" href="#glob-导入" aria-hidden="true">#</a> Glob 导入</h3><p>Vite 支持使用特殊的 i<wbr>mport.meta.glob 函数从文件系统导入多个模块(默认动态导入) <strong>1. 动态导入</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/*.js&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 以上将会被转译为下面的样子：</span>

<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;./dir/foo.js&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/foo.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;./dir/bar.js&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/bar.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 静态导入</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/*.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">eager</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 以上会被转译为下面的样子：</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> __glob__0_0 <span class="token keyword">from</span> <span class="token string">&#39;./dir/foo.js&#39;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> __glob__0_1 <span class="token keyword">from</span> <span class="token string">&#39;./dir/bar.js&#39;</span>
<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;./dir/foo.js&#39;</span><span class="token operator">:</span> __glob__0_0<span class="token punctuation">,</span>
  <span class="token string-property property">&#39;./dir/bar.js&#39;</span><span class="token operator">:</span> __glob__0_1<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 导入形式</strong></p><p>i<wbr>mport.meta.glob 都支持以字符串形式导入文件，类似于以字符串形式导入资源，{ as: &#39;url&#39; } 还支持将资源作为 URL 加载</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/*.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">&#39;raw&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">eager</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 上面的代码会被转换为下面这样：</span>
<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;./dir/foo.js&#39;</span><span class="token operator">:</span> <span class="token string">&#39;export default &quot;foo&quot;\\n&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;./dir/bar.js&#39;</span><span class="token operator">:</span> <span class="token string">&#39;export default &quot;bar&quot;\\n&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 多个匹配模式</strong></p><p>第一个参数可以是一个 glob 数组：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./dir/*.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./another/*.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5. 具名导入</strong></p><p>通过<code>import</code>选项，可以指定导入的内容，默认是default</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/*.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;setup&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// vite 生成的代码</span>
<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;./dir/foo.js&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/foo.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>setup<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;./dir/bar.js&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/bar.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>setup<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当与 eager 一同存在时，甚至可以对这些模块进行 tree-shaking。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/*.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;setup&#39;</span><span class="token punctuation">,</span>
  eager<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// vite 生成的代码</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token keyword">as</span> __glob__0_0 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dir/foo.js&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setup <span class="token keyword">as</span> __glob__0_1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dir/bar.js&#39;</span>
<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;./dir/foo.js&#39;</span><span class="token operator">:</span> __glob__0_0<span class="token punctuation">,</span>
  <span class="token string-property property">&#39;./dir/bar.js&#39;</span><span class="token operator">:</span> __glob__0_1<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模式与环境变量" tabindex="-1"><a class="header-anchor" href="#模式与环境变量" aria-hidden="true">#</a> 模式与环境变量</h2><h3 id="模式" tabindex="-1"><a class="header-anchor" href="#模式" aria-hidden="true">#</a> 模式</h3><p>默认情况下，开发服务器 (dev 命令) 运行在 development (开发) 模式，而 build 命令则运行在 production (生产) 模式，并加载相应的环境文件。通过传递 --mode 选项标志来覆盖命令使用的默认模式</p><h3 id="环境文件" tabindex="-1"><a class="header-anchor" href="#环境文件" aria-hidden="true">#</a> 环境文件</h3><p>环境文件默认是项目根路径，可通过envDir配置项修改。</p><p>vite会根据模式加载不同的环境文件，提取出相应的环境变量，通过 i<wbr>mport.meta.env 将以VITE_开头的变量以字符串形式暴露给客户端源码，修改环境变量后，需要重新启动服务器</p><p><strong>文件类型：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>.env                <span class="token comment"># 所有情况下都会加载</span>
.env.local          <span class="token comment"># 所有情况下都会加载，但会被 git 忽略</span>
.env.<span class="token punctuation">[</span>mode<span class="token punctuation">]</span>         <span class="token comment"># 只在指定模式下加载</span>
.env.<span class="token punctuation">[</span>mode<span class="token punctuation">]</span>.local   <span class="token comment"># 只在指定模式下加载，但会被 git 忽略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>环境变量优先级：</strong></p><p>命令行环境变量优先级最高，指定模式下次之，通用形式最低</p>`,103),m=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"请注意，如果想要在环境变量中使用 $ 符号，则必须使用 \\ 对其进行转义")],-1),g=p(`<p><strong>HTML替换：</strong></p><p>Vite 还支持在 HTML 文件中替换环境变量。i<wbr>mport.meta.env 中的任何属性都可以通过特殊的 %ENV_NAME% 语法在 HTML 文件中使用：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Vite is running in %MODE%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using data from %VITE_API_URL%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果环境变量在 i<wbr>mport.meta.env 中不存在，比如不存在的 %NON_EXISTENT%，则会将被忽略而不被替换，这与 JS 中的 i<wbr>mport.meta.env.NON_EXISTENT 不同，JS 中会被替换为 undefined</p><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><p>vite打包会在一个i<wbr>mport.meta.env对象上暴露出环境变量，转译时会对源代码中使用到的环境变量做<code>静态转换</code></p><p>vite内建变量：</p><ul><li>i<wbr>mport.meta.env.MODE: {string} 应用运行的模式，development/production</li><li>i<wbr>mport.meta.env.BASE_URL: {string} 部署应用时的基本 URL，由base 配置项决定。</li><li>i<wbr>mport.meta.env.PROD: {boolean} 应用是否运行在生产环境。</li><li>i<wbr>mport.meta.env.DEV: {boolean} 应用是否运行在开发环境 (永远与 i<wbr>mport.meta.env.PROD相反)。</li><li>i<wbr>mport.meta.env.SSR: {boolean} 应用是否运行在 server 上</li></ul><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><h3 id="导出配置" tabindex="-1"><a class="header-anchor" href="#导出配置" aria-hidden="true">#</a> 导出配置</h3><p>vite通过命令行启动，会自动解析 项目根目录下名为 vite.config.js的文件，使用esm语法导出的配置文件，会在被加载前自动进行预处理</p><p>通过--config命令行选项，可以指定配置文件的路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>UserConfig<span class="token punctuation">}</span></span> */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果配置文件需要基于（dev/serve 或 build）命令或者不同的 模式 来决定选项，亦或者是一个 SSR 构建（ssrBuild），defineConfig可以传递一个返回配置的函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> ssrBuild <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// dev 独有配置</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// command === &#39;build&#39;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// build 独有配置</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在开发环境下 command 的值为 serve（在 CLI 中， vite dev 和 vite serve 是 vite 的别名），而在生产环境下为 build（vite build）</p><p>这个函数也可以是异步的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// vite 配置</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件中可以通过p<wbr>rocess.env获取到环境变量，vite默认是不加载env文件的，因为要等配置文件解析完成才知道需要加载哪个模式下的环境文件，通过loadEnv函数可以在配置文件中体检加载指定文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> loadEnv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 根据当前工作目录中的 \`mode\` 加载 .env 文件</span>
  <span class="token comment">// 设置第三个参数为 &#39;&#39; 来加载所有环境变量，而不管是否有 \`VITE_\` 前缀。</span>
  <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// vite 配置</span>
    <span class="token literal-property property">define</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">__APP_ENV__</span><span class="token operator">:</span> env<span class="token punctuation">.</span><span class="token constant">APP_ENV</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vite配置" tabindex="-1"><a class="header-anchor" href="#vite配置" aria-hidden="true">#</a> vite配置</h3><p><strong>root</strong></p><p>默认： process.cwd()</p><p>项目根目录（index.html 文件所在的位置）。可以是一个绝对路径，或者一个相对于该配置文件本身的相对路径。</p><p><strong>base</strong></p><p>默认： /</p><p>开发或生产环境服务的公共基础路径。合法的值包括以下几种：</p>`,29),b=n("li",null,"绝对 URL 路径名，例如 /foo/",-1),h={href:"https://foo.com/",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"空字符串或 ./（用于嵌入形式的开发）",-1),f=p(`<p><strong>mode</strong></p><p>默认： &#39;development&#39; 用于开发，&#39;production&#39; 用于构建</p><p>在配置中指明将会把 serve 和 build 时的模式 都 覆盖掉。也可以通过命令行 --mode 选项来重写。</p><p><strong>define</strong></p><p>定义全局常量替换方式。其中每项在开发环境下会被定义在全局，而在构建时被静态替换。</p><p>为了与 esbuild 的行为保持一致，表达式必须为一个 JSON 对象（null、boolean、number、string、数组或对象），亦或是一个单独的标识符。</p><p><strong>plugins</strong></p><p>需要用到的插件数组。Falsy 虚值的插件将被忽略，插件数组将被扁平化（flatten）。</p><p><strong>publicDir</strong></p><p>默认： &quot;public&quot;</p><p>作为静态资源服务的文件夹。该目录中的文件在开发期间在 / 处提供，并在构建期间复制到 outDir 的根目录，并且始终按原样提供或复制而无需进行转换。该值可以是文件系统的绝对路径，也可以是相对于项目根目录的相对路径。</p><p>将 publicDir 设定为 false 可以关闭此项功能。</p><p><strong>cacheDir</strong></p><p>默认： &quot;node_modules/.vite&quot; 存储缓存文件的目录。此目录下会存储预打包的依赖项或 vite 生成的某些缓存文件，使用缓存可以提高性能。如需重新生成缓存文件，你可以使用 --force 命令行选项或手动删除目录。此选项的值可以是文件的绝对路径，也可以是以项目根目录为基准的相对路径。当没有检测到 package.json 时，则默认为 .vite。</p><p><strong>resolve.alias</strong></p><p>类型：Record&lt;string, string&gt; | Array&lt;{ find: string | RegExp, replacement: string, customResolver?: ResolverFunction | ResolverObject }&gt;</p><p>将会被传递到 @rollup/plugin-alias 作为 entries 的选项。也可以是一个对象，或一个 { find, replacement, customResolver } 的数组。</p><p>当使用文件系统路径的别名时，请始终使用绝对路径。相对路径的别名值会原封不动地被使用，因此无法被正常解析。</p><p><strong>resolve.conditions</strong></p><p>类型： string[]</p><p>解决程序包中 情景导出 时的其他允许条件。</p><p>一个带有情景导出的包可能在它的 package.json 中有以下 exports 字段：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index.esm.js&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index.cjs.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，import 和 require 被称为“情景”。情景可以嵌套，并且应该从最特定的到最不特定的指定。</p><p>Vite 有一个“允许的情景”列表，并且会匹配列表中第一个情景。默认允许的情景是：import，module，browser，default 和基于当前情景为 production/development。resolve.conditions 配置项使得我们可以指定其他允许的情景。</p><p><strong>resolve.mainFields</strong></p><p>默认： [&#39;module&#39;, &#39;jsnext:main&#39;, &#39;jsnext&#39;]</p><p>package.json 中，在解析包的入口点时尝试的字段列表。注意：这比从 exports 字段解析的情景导出优先级低：如果一个入口点从 exports 成功解析，resolve.mainFields 将被忽略。</p><p>在未来，resolve.mainFields 的默认值会变成 [&#39;browser&#39;, &#39;module&#39;, &#39;jsnext:main&#39;, &#39;jsnext&#39;] 而这个选项将被移除。</p><p><strong>resolve.extensions</strong></p><p>默认： [&#39;.mjs&#39;, &#39;.js&#39;, &#39;.mts&#39;, &#39;.ts&#39;, &#39;.jsx&#39;, &#39;.tsx&#39;, &#39;.json&#39;]</p><p>导入时想要省略的扩展名列表。</p><p>注意，不建议忽略自定义导入类型的扩展名（例如：.vue），因为它会影响 IDE 和类型支持。</p><p><strong>css.modules</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">CSSModulesOptions</span> <span class="token punctuation">{</span>
  scopeBehaviour<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;global&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;local&#39;</span>
  globalModulePaths<span class="token operator">?</span><span class="token operator">:</span> RegExp<span class="token punctuation">[</span><span class="token punctuation">]</span>
  generateScopedName<span class="token operator">?</span><span class="token operator">:</span>
    <span class="token operator">|</span> <span class="token builtin">string</span>
    <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> filename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> css<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
  hashPrefix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token doc-comment comment">/**

- 默认：null
   */</span>
  localsConvention<span class="token operator">?</span><span class="token operator">:</span>
    <span class="token operator">|</span> <span class="token string">&#39;camelCase&#39;</span>
    <span class="token operator">|</span> <span class="token string">&#39;camelCaseOnly&#39;</span>
    <span class="token operator">|</span> <span class="token string">&#39;dashes&#39;</span>
    <span class="token operator">|</span> <span class="token string">&#39;dashesOnly&#39;</span>
    <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置 CSS modules 的行为。选项将被传递给 postcss-modules。</p><p><strong>css.postcss</strong></p><p>内联的 PostCSS 配置（格式同 postcss.config.js），或者一个（默认基于项目根目录的）自定义的 PostCSS 配置路径。</p><p><strong>css.preprocessorOptions</strong></p><p>指定传递给 CSS 预处理器的选项。文件扩展名用作选项的键。</p><p>所有预处理器选项还支持 additionalData 选项，可以用于为每个样式内容注入额外代码。如果注入的是实际的样式而不仅仅是变量时，那么这些样式将会在最终的打包产物中重复出现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$injectedColor: orange;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">less</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">math</span><span class="token operator">:</span> <span class="token string">&#39;parens-division&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">styl</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">define</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">$specialColor</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">stylus<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>RGBA</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">197</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>json.namedExports</strong></p><p>是否支持从 .json 文件中进行按名导入。</p><p><strong>json.stringify</strong></p><p>默认： false</p><p>若设置为 true，会禁用按名导入，导入的 JSON 会被转换为 export default JSON.parse(&quot;...&quot;)，这样会比转译成对象字面量性能更好，尤其是当 JSON 文件较大的时候。</p><p><strong>esbuild</strong></p><p>类型： ESBuildOptions | false</p><p>ESBuildOptions 继承自 esbuild 转换选项。最常见的用例是自定义 JSX：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">esbuild</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">jsxFactory</span><span class="token operator">:</span> <span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">jsxFragment</span><span class="token operator">:</span> <span class="token string">&#39;Fragment&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，esbuild 会被应用在 ts、jsx、tsx 文件。你可以通过 esbuild.include 和 esbuild.exclude 对要处理的文件类型进行配置，这两个配置的值可以是一个正则表达式、一个 picomatch 模式，或是一个值为这两种类型的数组。</p><p>可以通过 esbuild.jsxInject 来自动为每一个被 esbuild 转换的文件注入 JSX helper。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">esbuild</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">jsxInject</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import React from &#39;react&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 build.minify 为 true 时，所有最小化的优化过程都会被默认应用，要禁用它的 某些特定方面，请设置 esbuild.minifyIdentifiers、esbuild.minifySyntax 或 esbuild.minifyWhitespace 三种选项其中任意一种为 false。注意 esbuild.minify 选项无法用于覆盖 build.minify。</p><p>设置为 false 来禁用 esbuild 转换。</p><p>assetsInclude 类型： string | RegExp | (string | RegExp)[]</p><p>从 JavaScript 导入它们将返回解析后的 URL 字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">assetsInclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;**/*.gltf&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>logLevel</strong></p><p>类型： &#39;info&#39; | &#39;warn&#39; | &#39;error&#39; | &#39;silent&#39;</p><p>调整控制台输出的级别，默认为 &#39;info&#39;。</p><p><strong>clearScreen</strong> 默认： true</p><p>设为 false 可以避免 Vite 清屏而错过在终端中打印某些关键信息。命令行模式下可以通过 --clearScreen false 设置。</p><p><strong>envDir</strong></p><p>默认： root</p><p>用于加载 .env 文件的目录。可以是一个绝对路径，也可以是相对于项目根的路径。</p><p><strong>envPrefix</strong></p><p>默认： VITE_</p><p>以 envPrefix 开头的环境变量会通过 i<wbr>mport.meta.env 暴露在你的客户端源码中。</p><h3 id="server配置" tabindex="-1"><a class="header-anchor" href="#server配置" aria-hidden="true">#</a> server配置</h3><p><strong>server.host</strong></p><p>默认： &#39;localhost&#39;</p><p>指定服务器应该监听哪个 IP 地址。 如果将此设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址</p><p><strong>server.port</strong></p><p>默认值： 5173</p><p>指定开发服务器端口。如果端口已经被使用，Vite 会自动尝试下一个可用的端口</p><p><strong>server.https</strong></p><p>启用 TLS + HTTP/2，当 server.proxy选项也被使用时，将会仅使用 TLS。</p><p>需要一个合法可用的证书。对基本使用的配置需求来说，你可以添加 @vitejs/plugin-basic-ssl 到项目插件中，它会自动创建和缓存一个自签名的证书。但我们推荐你创建和使用你自己的证书</p><p><strong>server.open</strong></p><p>开发服务器启动时，自动在浏览器中打开应用程序。当该值为字符串时，它将被用作 URL 的路径名</p><p><strong>server.proxy</strong></p><p>为开发服务器配置自定义代理规则。期望接收一个 { key: options } 对象。任何请求路径以 key 值开头的请求将被代理到对应的目标。如果 key 值以 ^ 开头，将被识别为 RegExp</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 字符串简写写法：http://localhost:5173/foo -&gt; http://localhost:4567/foo</span>
      <span class="token string-property property">&#39;/foo&#39;</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:4567&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// 带选项写法：http://localhost:5173/api/bar -&gt; http://jsonplaceholder.typicode.com/bar</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 正则表达式写法：http://localhost:5173/fallback/ -&gt; http://jsonplaceholder.typicode.com/</span>
      <span class="token string-property property">&#39;^/fallback/.*&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/fallback</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 使用 proxy 实例</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">configure</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">proxy<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// proxy 是 &#39;http-proxy&#39; 的实例</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 代理 websockets 或 socket.io 写法：ws://localhost:5173/socket.io -&gt; ws://localhost:5174/socket.io</span>
      <span class="token string-property property">&#39;/socket.io&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;ws://localhost:5174&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>server.headers</strong></p><p>指定服务器响应的 header</p><p><strong>server.watch</strong></p><p>传递给 chokidar 的文件系统监听器选项</p><p>Vite 服务器默认会忽略对 .git/ 和 node_modules/ 目录的监听。如果你需要对 node_modules/ 内的包进行监听，你可以为 server.watch.ignored 赋值一个取反的 glob 模式</p><p><strong>server.base</strong></p><p>在 HTTP 请求中预留此文件夹，用于代理 Vite 作为子文件夹时使用。应该以 / 字符开始</p><p><strong>server.origin</strong></p><p>用于定义开发调试阶段生成资源的 origin。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">&#39;http://127.0.0.1:8080&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构建配置" tabindex="-1"><a class="header-anchor" href="#构建配置" aria-hidden="true">#</a> 构建配置</h3><p><strong>build.target</strong></p><p>设置最终构建的浏览器兼容目标，目标值可以是一个es版本，也可以是一个浏览器版本或是两者组合的数组，默认值是modules，vite会将modules替换为[&#39;es2020&#39;, &#39;edge88&#39;, &#39;firefox78&#39;, &#39;chrome87&#39;, &#39;safari14&#39;]</p><p><strong>build.outDir</strong></p><p>相对于项目根目录指定输出路径，默认dist</p><p><strong>build.assetsDir</strong></p><p>相对于outDir指定生成静态资源的存放路径，默认assets</p><p><strong>build.assetsInlineLimit</strong></p><p>指定引用资源内联为base64编码的，避免额外的的http请求，默认4096，设置为0可以禁用此选项</p><p><strong>build.cssCodeSplit</strong></p><p>控制css代码拆分，如启用，在异步chunk中使用的css导入会内联到异步chunk中，chunk加载时一并加载，如禁用，项目中的css会被提取到一个css文件中</p><p><strong>build.cssTarget</strong></p><p>设置css压缩的目标浏览器</p><p>应只在针对非主流浏览器时使用。 最直观的示例是当你要兼容的场景是安卓微信中的 webview 时，它支持大多数现代的 JavaScript 功能，但并不支持 CSS 中的 #RGBA 十六进制颜色符号。 这种情况下，你需要将 build.cssTarget 设置为 chrome61，以防止 vite 将 rgba() 颜色转化为 #RGBA 十六进制符号的形式</p><p><strong>build.cssMinify</strong></p><p>覆盖 CSS 最小化压缩的配置，而不是使用默认的 build.minify，这样就可以单独配置 JS 和 CSS 的最小化压缩方式。Vite 使用 esbuild 来最小化 CSS</p><p><strong>build.rollupOptions</strong></p><p>自定义底层的 Rollup 打包配置。这与从 Rollup 配置文件导出的选项相同，并将与 Vite 的内部 Rollup 选项合并</p><p><strong>build.lib</strong></p><p>类型： { entry: string | string[] | { [entryAlias: string]: string }, name?: string, formats?: (&#39;es&#39; | &#39;cjs&#39; | &#39;umd&#39; | &#39;iife&#39;)[], fileName?: string | ((format: ModuleFormat, entryName: string) =&gt; string) }</p><p>构建为库。entry 是必需的，因为库不能使用 HTML 作为入口。name 则是暴露的全局变量，并且在 formats 包含 &#39;umd&#39; 或 &#39;iife&#39; 时是必需的。默认 formats 是 [&#39;es&#39;, &#39;umd&#39;]，如果使用了多个配置入口，则是 [&#39;es&#39;, &#39;cjs&#39;]。fileName 是输出的包文件名，默认 fileName 是 package.json 的 name 选项，同时，它还可以被定义为参数为 format 和 entryAlias 的函数</p><p><strong>build.minify</strong></p><p>类型： boolean | &#39;terser&#39; | &#39;esbuild&#39;</p><p>默认： &#39;esbuild&#39;</p><p>设置为 false 可以禁用最小化混淆，或是用来指定使用哪种混淆器。默认为 Esbuild，它比 terser 快 20-40 倍，压缩率只差 1%-2%。</p><p>在 lib 模式下使用 &#39;es&#39; 时，build.minify 选项不会缩减空格，因为会移除掉 pure 标注，导致破坏 tree-shaking。</p><p>当设置为 &#39;terser&#39; 时必须先安装 Terser</p><p><strong>build.terserOptions</strong></p><p>传递给 Terser 的更多 minify 选项</p><p><strong>build.chunkSizeWarningLimit</strong></p><p>类型： number</p><p>默认： 500</p><p>规定触发警告的 chunk 大小（以kb为单位）。它将与未压缩的 chunk 大小进行比较，因为 JavaScript 大小本身与执行时间相关</p><h3 id="依赖优化配置" tabindex="-1"><a class="header-anchor" href="#依赖优化配置" aria-hidden="true">#</a> 依赖优化配置</h3><p><strong>optimizeDeps.entries</strong></p><p>类型： string | string[]</p><p>默认情况下，Vite 会抓取你的 index.html 来检测需要预构建的依赖项（忽略了node_modules、build.outDir、tests 和 coverage）。如果指定了 build.rollupOptions.input，Vite 将转而去抓取这些入口点。</p><p><strong>optimizeDeps.exclude</strong></p><p>类型： string[]</p><p>在预构建中强制排除的依赖项，CommonJS 的依赖不应该排除在优化外。</p><p>如果一个 ESM 依赖被排除在优化外，但是却有一个嵌套的 CommonJS 依赖，则应该为该 CommonJS 依赖添加 optimizeDeps.include。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">optimizeDeps</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;esm-dep &gt; cjs-dep&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>optimizeDeps.include</strong></p><p>类型： string[]</p><p>默认情况下，不在 node_modules 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包。</p><p><strong>optimizeDeps.esbuildOptions</strong></p><p>类型： EsbuildBuildOptions</p><p>在依赖扫描和优化过程中传递给 esbuild 的选项。</p><p>某些选项进行了省略，因为修改它们与 Vite 的优化方案并不兼容。</p><p>忽略了 external 选项，请使用 Vite 的 optimizeDeps.exclude 选项 plugins 与 Vite 的 dep 插件合并</p><p><strong>optimizeDeps.force</strong></p><p>类型： boolean</p><p>设置为 true 可以强制依赖预构建，而忽略之前已经缓存过的、已经优化过的依赖。</p><p><strong>optimizeDeps.disabled</strong></p><p>类型： boolean | &#39;build&#39; | &#39;dev&#39;</p><p>默认： &#39;build&#39;</p><p>禁用依赖优化，值为 true 将在构建和开发期间均禁用优化器。传 &#39;build&#39; 或 &#39;dev&#39; 将仅在其中一种模式下禁用优化器。默认情况下，仅在开发阶段启用依赖优化。</p><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h2><p>若要使用一个插件，需要将它添加到项目的 devDependencies 并在 vite.config.js 配置文件中的 plugins 数组中引入它，接受包含多个插件作为单个元素的预设，数组在内部被扁平化</p><p>通常创建一个插件是一个返回对象的的工厂函数，这样可以接受允许用户自定义插件行为的选项</p><h3 id="约定" tabindex="-1"><a class="header-anchor" href="#约定" aria-hidden="true">#</a> 约定</h3><p>插件不使用 Vite 特有的钩子，可以作为兼容 Rollup 的插件来实现，Rollup 插件应该有一个带<code>rollup-plugin-</code>前缀，Vite插件应该有一个带<code>vite-plugin-</code>前缀</p><p>如果只适用于特定的框架，它的名字应该遵循以下前缀格式：</p><ul><li>vite-plugin-vue- 前缀作为 Vue 插件</li><li>vite-plugin-react- 前缀作为 React 插件</li><li>vite-plugin-svelte- 前缀作为 Svelte 插件</li></ul><h3 id="插件获取" tabindex="-1"><a class="header-anchor" href="#插件获取" aria-hidden="true">#</a> 插件获取</h3><p>获取插件有以下几种方式：</p>`,161),w={href:"https://cn.vitejs.dev/plugins/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/vitejs/awesome-vite#plugins",target:"_blank",rel:"noopener noreferrer"},x={href:"https://vite-rollup-plugins.patak.dev/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.npmjs.com/search?q=vite-plugin&ranking=popularity",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.npmjs.com/search?q=rollup-plugin&ranking=popularity",target:"_blank",rel:"noopener noreferrer"},C=p(`<h3 id="按需应用" tabindex="-1"><a class="header-anchor" href="#按需应用" aria-hidden="true">#</a> 按需应用</h3><p>默认情况下插件在开发 (serve) 和生产 (build) 模式中都会调用。如果插件在服务或构建期间按需使用，请使用 apply 属性指明它们仅在 &#39;build&#39; 或 &#39;serve&#39; 模式时调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> typescript2 <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-typescript2&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token function">typescript2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">apply</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插件调用顺序" tabindex="-1"><a class="header-anchor" href="#插件调用顺序" aria-hidden="true">#</a> 插件调用顺序</h3><p>一个 Vite 插件可以额外指定一个 enforce 属性（类似于 webpack 加载器）来调整它的应用顺序。enforce 的值可以是pre 或 post。解析后的插件将按照以下顺序排列</p><ul><li>Alias</li><li>带有 enforce: &#39;pre&#39; 的用户插件</li><li>Vite 核心插件</li><li>没有 enforce 值的用户插件</li><li>Vite 构建用的插件</li><li>带有 enforce: &#39;post&#39; 的用户插件</li><li>Vite 后置构建插件（最小化，manifest，报告）</li></ul><h3 id="虚拟模块" tabindex="-1"><a class="header-anchor" href="#虚拟模块" aria-hidden="true">#</a> 虚拟模块</h3><p>虚拟模块是一种在插件中定义导入内容的方式，在 Vite（以及 Rollup）中都以 virtual: 为前缀，使用了虚拟模块的插件在解析时应该将模块 ID 加上前缀 \\0，这一约定来自 rollup 生态</p><h3 id="插件钩子" tabindex="-1"><a class="header-anchor" href="#插件钩子" aria-hidden="true">#</a> 插件钩子</h3><p><strong>通用钩子</strong></p><br><ol><li>在启动服务器时调用：</li></ol>`,12),R={href:"https://rollupjs.org/plugin-development/#options",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,"类型： (options: InputOptions) => InputOptions | null",-1),E=n("p",null,"替换或操作传递给 rollup.rollup 的选项对象。返回 null 不会替换任何内容。如果只需要读取选项，则建议使用 buildStart 钩子，因为该钩子可以访问所有 options 钩子的转换过滤后的选项",-1),I=n("br",null,null,-1),T={href:"https://rollupjs.org/plugin-development/#buildstart",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"类型： (options: InputOptions) => void",-1),D=n("p",null,"此钩子过滤了所有 options 钩子的转换，并且还包含未设置选项的正确默认值",-1),L=n("br",null,null,-1),P=n("ol",{start:"2"},[n("li",null,"在每个传入模块请求时调用：")],-1),M={href:"https://rollupjs.org/plugin-development/#resolveid",target:"_blank",rel:"noopener noreferrer"},H=p(`<p>类型: ResolveIdHook</p><p>定义一个自定义解析器，可以用于定位第三方依赖项等</p><p>类型定义:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ResolveIdHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
 source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 路径</span>
 importer<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 完整路径</span>
 options<span class="token operator">:</span> <span class="token punctuation">{</span>
  assertions<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  custom<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>plugin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  isEntry<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ResolveIdResult<span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ResolveIdResult</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> PartialResolvedId<span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">PartialResolvedId</span> <span class="token punctuation">{</span>
 id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
 external<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token string">&#39;absolute&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;relative&#39;</span><span class="token punctuation">;</span>
 assertions<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 meta<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>plugin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 moduleSideEffects<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token string">&#39;no-treeshake&#39;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 resolvedBy<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 syntheticNamedExports<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,5),O={href:"https://rollupjs.org/plugin-development/#load",target:"_blank",rel:"noopener noreferrer"},N=p(`<p>类型： (id: string) =&gt; LoadResult</p><p>定义自定义加载器。返回 null 将延迟到其他 load 函数（最终默认从文件系统加载）。为了避免额外的解析开销，例如由于某些原因该钩子已经使用 this.parse 生成 AST，该钩子可以选择返回一个 { code, ast, map } 对象。ast 必须是一个具有每个节点的 start 和 end 属性的标准 ESTree AST。如果转换不移动代码，则可以通过将 map 设置为 null 来保留现有的源码映射</p><p>moduleSideEffects：如果为false，并且没有其他模块从该模块中导入任何内容，将永远不会进行打包；如果为true，将进行打包；如果为<code>no-treeshake</code>，即使内容为空，也会生成对应内容</p><p>类型定义：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LoadResult</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> SourceDescription<span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">SourceDescription</span> <span class="token punctuation">{</span>
 code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
 map<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> SourceMap<span class="token punctuation">;</span>
 ast<span class="token operator">?</span><span class="token operator">:</span> ESTree<span class="token punctuation">.</span>Program<span class="token punctuation">;</span>
 assertions<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 meta<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>plugin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 moduleSideEffects<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token string">&#39;no-treeshake&#39;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 syntheticNamedExports<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,6),J={href:"https://rollupjs.org/plugin-development/#transform",target:"_blank",rel:"noopener noreferrer"},U=p(`<p>类型：(code: string, id: string) =&gt; TransformResult</p><p>用于转换模块</p><p>类型定义：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TransformResult</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> Partial<span class="token operator">&lt;</span>SourceDescription<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">SourceDescription</span> <span class="token punctuation">{</span>
 code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
 map<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> SourceMap<span class="token punctuation">;</span>
 ast<span class="token operator">?</span><span class="token operator">:</span> ESTree<span class="token punctuation">.</span>Program<span class="token punctuation">;</span>
 assertions<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 meta<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>plugin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 moduleSideEffects<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token string">&#39;no-treeshake&#39;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 syntheticNamedExports<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务器关闭时调用：</p><br>`,6),A={href:"https://rollupjs.org/plugin-development/#buildend",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,"类型： (error?: Error) => void",-1),F=n("p",null,"在 Rollup 完成产物但尚未调用 generate 或 write 之前调用；也可以返回一个 Promise。如果在构建过程中发生错误，则将其传递给此钩子",-1),z=n("br",null,null,-1),X={href:"https://rollupjs.org/plugin-development/#closebundle",target:"_blank",rel:"noopener noreferrer"},W=p(`<p>类型: () =&gt; Promise&lt;void&gt; | void</p><p>可用于清理可能正在运行的任何外部服务。Rollup 的 CLI 将确保在每次运行后调用此钩子，但是 JavaScript API 的用户有责任在生成产物后手动调用 bundle.close()。因此，任何依赖此功能的插件都应在其文档中仔细提到这一点</p><p><strong>vite钩子</strong></p><br><ul><li>config</li></ul><p>类型：(config: UserConfig, env: { mode: string, command: string }) =&gt; UserConfig | null | void</p><p>允许是一个异步函数</p><p>在解析配置前调用，获得配置文件和命令行参数合并过的原始配置，同时接受运行的环境参数mode和command，可以直接在配置对象上进行修改而不返回任何东西，也可以翻译一个处理后的配置对象</p><blockquote><p>用户插件在运行这个钩子之前会被解析，因此在 config 钩子中注入其他插件不会有任何效果</p></blockquote><br><ul><li>configResolved</li></ul><p>类型：(config: ResolvedConfig) =&gt; void | Promise&lt;void&gt;</p><p>允许是一个异步函数</p><p>在解析vite配置后调用，用于存储和读取config</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">examplePlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> config

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;read-config&#39;</span><span class="token punctuation">,</span>

    <span class="token function">configResolved</span><span class="token punctuation">(</span><span class="token parameter">resolvedConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 存储最终解析的配置</span>
      config <span class="token operator">=</span> resolvedConfig
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// 在其他钩子中使用存储的配置</span>
    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// dev: 由开发服务器调用的插件</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// build: 由 Rollup 调用的插件</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><ul><li>configureServer</li></ul><p>类型： (server: ViteDevServer) =&gt; (() =&gt; void) | void | Promise&lt;(() =&gt; void) | void&gt;</p><p>适用于配置开发服务器的钩子。最常见的用例是在内部 connect 应用程序中添加自定义中间件，钩子中定义的中间件默认在内置中间件前调用，如果需要在后调用可以返回一个函数</p><br><ul><li>handleHotUpdate</li></ul><p>类型： (ctx: HmrContext) =&gt; Array&lt;ModuleNode&gt; | void | Promise&lt;Array&lt;ModuleNode&gt; | void&gt;</p><p>执行自定义 HMR 更新处理。钩子接收一个带有以下签名的上下文对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">HmrContext</span> <span class="token punctuation">{</span>
  file<span class="token operator">:</span> <span class="token builtin">string</span>
  timestamp<span class="token operator">:</span> <span class="token builtin">number</span>
  modules<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span>
  <span class="token function-variable function">read</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>
  server<span class="token operator">:</span> ViteDevServer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>modules: 是受更改文件影响的模块数组。它是一个数组，因为单个文件可能映射到多个服务模块（例如 Vue 单文件组件）。</p><p>read: 这是一个异步读函数，它返回文件的内容。之所以这样做，是因为在某些系统上，文件更改的回调函数可能会在编辑器完成文件更新之前过快地触发，并 fs.readFile 直接会返回空内容。传入的 read 函数规范了这种行为。</p><br>`,27),G=p(`<ol><li><p>过滤和缩小受影响的模块列表，使 HMR 更准确。</p></li><li><p>返回一个空数组，并通过向客户端发送自定义事件来执行完整的自定义 HMR 处理:</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">handleHotUpdate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> server <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  server<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">&#39;special-update&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端代码应该使用 HMR API 注册相应的处理器（这应该被相同插件的 transform 钩子注入）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;special-update&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行自定义更新</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><ul><li>transformIndexHtml</li></ul><p>类型： IndexHtmlTransformHook | { order?: &#39;pre&#39; | &#39;post&#39;, handler: IndexHtmlTransformHook }</p><p>可以是一个异步钩子</p><p>转换 index.html 的专用钩子，钩子接收当前的 HTML 字符串和转换上下文。钩子默认在html被转换前进行调用，与order为pre效果相同，如果指定了order为post，钩子将在所有未定义order的钩子被应用后进行调用</p><p>上下文在开发期间暴露ViteDevServer实例，在构建期间暴露 Rollup 输出的包。</p><p>钩子返回值可以是以下几种形式：</p><ol><li>经过转换的 HTML 字符串</li><li>注入到现有 HTML 中的标签描述符对象数组（{ tag, attrs, children }）。每个标签也可以指定它应该被注入到哪里（默认是在 &lt;head&gt; 之前）</li><li>一个包含 { html, tags } 的对象</li></ol><p>钩子签名：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IndexHtmlTransformHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  html<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  ctx<span class="token operator">:</span> <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token builtin">string</span>
    filename<span class="token operator">:</span> <span class="token builtin">string</span>
    server<span class="token operator">?</span><span class="token operator">:</span> ViteDevServer
    bundle<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;rollup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>OutputBundle
    chunk<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;rollup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>OutputChunk
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token operator">|</span> IndexHtmlTransformResult
  <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IndexHtmlTransformResult <span class="token operator">|</span> <span class="token keyword">void</span><span class="token operator">&gt;</span>

  <span class="token keyword">type</span> <span class="token class-name">IndexHtmlTransformResult</span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token builtin">string</span>
  <span class="token operator">|</span> HtmlTagDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token operator">|</span> <span class="token punctuation">{</span>
      html<span class="token operator">:</span> <span class="token builtin">string</span>
      tags<span class="token operator">:</span> HtmlTagDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

  <span class="token keyword">interface</span> <span class="token class-name">HtmlTagDescriptor</span> <span class="token punctuation">{</span>
    tag<span class="token operator">:</span> <span class="token builtin">string</span>
    attrs<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>
    children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HtmlTagDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token doc-comment comment">/**
     * 默认： &#39;head-prepend&#39;
     */</span>
    injectTo<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;head&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;body&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;head-prepend&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;body-prepend&#39;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function $(Y,K){const a=i("ExternalLinkIcon");return o(),l("div",null,[c,u,d,n("p",null,[n("a",k,[s("官方文档v4"),e(a)])]),v,m,g,n("ul",null,[b,n("li",null,[s("完整的 URL，例如 "),n("a",h,[s("https://foo.com/"),e(a)])]),y]),f,n("ul",null,[n("li",null,[n("a",w,[s("官方插件"),e(a)])]),n("li",null,[n("a",j,[s("社区插件"),e(a)])]),n("li",null,[n("a",x,[s("兼容rollup插件"),e(a)])]),n("li",null,[n("a",_,[s("npm搜索vite插件"),e(a)])]),n("li",null,[n("a",S,[s("npm搜索rollup插件"),e(a)])])]),C,n("ul",null,[n("li",null,[n("a",R,[s("options"),e(a)])])]),V,E,I,n("ul",null,[n("li",null,[n("a",T,[s("buildStart"),e(a)])])]),q,D,L,P,n("ul",null,[n("li",null,[n("a",M,[s("resolveId"),e(a)])])]),H,n("ul",null,[n("li",null,[n("a",O,[s("load"),e(a)])])]),N,n("ul",null,[n("li",null,[n("a",J,[s("transform"),e(a)])])]),U,n("ul",null,[n("li",null,[n("a",A,[s("buildEnd"),e(a)])])]),B,F,z,n("ul",null,[n("li",null,[n("a",X,[s("closeBundle"),e(a)])])]),W,s(" 钩子可以选择: "),G])}const Z=t(r,[["render",$],["__file","vite.html.vue"]]);export{Z as default};
