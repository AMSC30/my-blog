import{_ as l,p,q as t,s as n,R as a,t as e,Y as i,n as o}from"./framework-e1bed10d.js";const r="/my-blog/assets/install-5f333ed6.png",c={},d=n("h1",{id:"前端包管理工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前端包管理工具","aria-hidden":"true"},"#"),a(" 前端包管理工具")],-1),u={href:"https://www.npmrc.cn/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://pnpm.io/zh/motivation",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.yarnpkg.cn/",target:"_blank",rel:"noopener noreferrer"},k=i(`<h2 id="npm包认识" tabindex="-1"><a class="header-anchor" href="#npm包认识" aria-hidden="true">#</a> NPM包认识</h2><h3 id="npm包范围及可见性" tabindex="-1"><a class="header-anchor" href="#npm包范围及可见性" aria-hidden="true">#</a> NPM包范围及可见性</h3><table><thead><tr><th>范围</th><th>访问级别</th><th>可以查看和下载</th><th>可以写（发表）</th></tr></thead><tbody><tr><td>组织</td><td>私人</td><td>组织中对包具有读访问权限的团队成员</td><td>组织中对包具有读写访问权限的团队成员</td></tr><tr><td>组织</td><td>公众</td><td>所有人</td><td>组织中对包具有读写访问权限的团队成员</td></tr><tr><td>用户</td><td>私人</td><td>包所有者和已被授予对包的读访问权限的用户</td><td>已被授予对包的读写访问权限的包所有者和用户</td></tr><tr><td>用户</td><td>公众</td><td>所有人</td><td>已被授予对包的读写访问权限的包所有者和用户</td></tr><tr><td>无作用域</td><td>公众</td><td>所有人</td><td>已被授予对包的读写访问权限的包所有者和用户</td></tr></tbody></table><blockquote><p>只有用户帐户可以创建和管理无作用域的包。组织只能管理限定范围的包</p></blockquote><h3 id="package-json" tabindex="-1"><a class="header-anchor" href="#package-json" aria-hidden="true">#</a> package.json</h3><p>每个NPM包中都必须包含package.json文件，package.json文件必须包含&quot;name&quot;和&quot;version&quot;字段。&quot;name&quot;字段包含包的名称，必须是小写字母和一个单词，并且可以包含连字符和下划线。&quot;version&quot;字段必须采用x.x.x格式。使用npm init创建，包含若干默认配置：</p><p><strong>1. name：包名</strong></p><p>包名，默认为当前目录名。</p><p>包含作用域在内，包名不能大于214个字符，并且不得包含大写字母，作用域的包名可以以点或下划线开始，不能包含为url安全的字符</p><p><strong>2. version：版本</strong></p><p>默认为1.0.0</p><p><strong>递增规则</strong></p><ul><li>首次发布： 从1.0.0开始-&gt;1.0.0</li><li>向后兼容的bug修复： 递增第三位数-&gt;1.0.1</li><li>向后兼容的新功能： 递增中间的数字，并将最后一个数字重置为零-&gt;1.1.0</li><li>破坏向后兼容性的更改： 递增第一位数字，并将中间和最后一位数字重置为零-&gt;2.0.0</li></ul><p><strong>可接受范围</strong></p><ul><li>补丁版本：1.0或1.0.x或~1.0.4</li><li>次要版本：1或1.x或^1.0.4</li><li>主要版本：#1或#2</li></ul><p><strong>3. description</strong></p><p>用于描述包的信息，可以用于npm search</p><p><strong>4. scripts</strong></p><p>package.json文件中的scripts属性支持数字、内置脚本及其预设生命周期事件以及任意脚本。这些都可以通过npm run-script &lt;stage&gt;或npm run &lt;stage&gt;运行，匹配名称的前置或者后置脚本会在特定生命周期运行</p><p>执行npm ci或者npm install时，会触发以下生命周期：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>preinstall-&gt;install-&gt;postinstall-&gt;prepublish-&gt;preprepare-&gt;prepare-&gt;postprepare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行npm publish时，会触发以下生命周期：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prepublishOnly-&gt;prepack-&gt;prepare-&gt;postpack-&gt;publish-&gt;postpublish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行npm start时，会触发以下生命周期：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prestart-&gt;start-&gt;poststart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行npm stop时，会触发以下生命周期：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prestop-&gt;stop-&gt;poststop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行npm restart时，如果没有在脚本中定义restart命令，那么stop和start会执行，并触发相应的生命周期脚本，定义了restart脚本，将触发以下生命周期：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prerestart-&gt;restart-&gt;postrestart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行npm test时，会触发以下生命周期：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pretest-&gt;test-&gt;posttest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行npm version时，会触发以下生命周期：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>preversion-&gt;version-&gt;postversion
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>定义了自定义脚本时，触发方式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pre&lt;user-defined&gt;-&gt;&lt;user-defined&gt;-&gt;post&lt;user-defined&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5. keywords</strong></p><p>描述npm包的关键词数组</p><p><strong>6. author</strong></p><p>包作者信息</p><p><strong>7. homepage</strong></p><p>项目主页的url，一般是git仓库中的readme文件地址</p><p><strong>8. main</strong></p><p>包的的导入入口，如果没有配置，默认是包根目录下的index.js文件，它应该是基于包的根目录。</p><p>当使用require导入包如require(&#39;foo&#39;)，将会返回导入入口的exports</p><p><strong>9. browser</strong></p><p>如果模块是在浏览器中使用，最好设置这个字段而不是main字段，这样有助于提示用户依赖的node可能不可用</p><p><strong>10. bin</strong></p><p>bin提供了通过命令运行包中文件的可能，借助npm安装可执行文件的功能，全局安装此软件包时， 会将对应的js文件创建一个符号链接（name）到/usr/local/bin下，或者将创建一个cmd（Windows命令文件），它执行指定的在bin字段中添加了一个文件，因此可以通过name或name.cmd（在 Windows PowerShell）</p><blockquote><p>在文件首部需要加上 #!/usr/bin/env node</p></blockquote><p><strong>11. dependencies</strong></p><p>dependencies：您的应用程序在生产中需要的包，使用--save-prod(-D)</p><p>devDependencies：仅用于本地开发和测试的软件包，使用--save-dev(-S)</p><p>peerDependencies：通常用于插件包中，表示使用插件的主体应该已经安装了插件需要使用到的依赖包，安装插件时不需要安装peerDependencies中的依赖，在v7以前，peerDependencies中的依赖是不会自动安装的，当发现已安装的依赖与插件所需要的版本不一致时会触发警告，npm v7开始，peerDependencies是<code>默认安装</code></p><p><strong>12. workspace</strong></p><p>工作区支持在一个顶级根包中从本地管理多个包，自动化连接将作为npm install的一部分，避免手动link，每一个本地包都是一个单个工作区，执行npm install时，会将工作区中的包符号连接到根包中的node_modules中</p><p>创建一个工作区，需要在根包的package.json中定义：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-workspaces-powered-project&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;packages/a&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向工作区添加依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-w</span> <span class="token operator">&lt;</span>workspace-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同理，uninstall、ci命令支持相同的语法，安装的模块会在根包的node_modules中</p><p>指定在多个工作区执行命令，可以使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> start <span class="token parameter variable">--workspace</span><span class="token operator">=</span><span class="token operator">&lt;</span>workspace-name<span class="token operator">&gt;</span> <span class="token parameter variable">--workspace</span><span class="token operator">=</span><span class="token operator">&lt;</span>workspace-name<span class="token operator">&gt;</span>
<span class="token comment"># 或者</span>
<span class="token function">npm</span> start <span class="token parameter variable">-w</span> <span class="token operator">&lt;</span>workspace-name<span class="token operator">&gt;</span> <span class="token parameter variable">-w</span> <span class="token operator">&lt;</span>workspace-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定在所有工作区执行(如果存在命令)，可以使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> start <span class="token parameter variable">--workspaces</span> --if-present
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>13.engine</strong></p><p>指定包运行的环境</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
 <span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=0.10.3 &lt;15&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;npm&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.0.20&quot;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>14. private</strong></p><p>如果在package.json中设置&quot;private&quot;: true，那么npm将不会发布这个包</p><p><strong>15. exports</strong></p><p>exports字段的优先级高于main字段。它有多种用法。</p><ul><li>脚本别名</li></ul><p>package.json文件的exports字段可以指定脚本或子目录的别名。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// ./node_modules/es-module-package/package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;./submodule&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/submodule.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码指定src/submodule.js别名为submodule，然后就可以从别名加载这个文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> submodule <span class="token keyword">from</span> <span class="token string">&#39;es-module-package/submodule&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 加载 ./node_modules/es-module-package/src/submodule.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子目录别名</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// ./node_modules/es-module-package/package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;./features/&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/features/&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> feature <span class="token keyword">from</span> <span class="token string">&#39;es-module-package/features/x.js&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 加载 ./node_modules/es-module-package/src/features/x.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有指定别名，就不能用“模块+脚本名”这种形式加载脚本。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 报错</span>
<span class="token keyword">import</span> submodule <span class="token keyword">from</span> <span class="token string">&#39;es-module-package/private-module.js&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 不报错</span>
<span class="token keyword">import</span> submodule <span class="token keyword">from</span> <span class="token string">&#39;./node_modules/es-module-package/private-module.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>main 的别名</li></ul><p>exports字段的别名如果是.，就代表模块的主入口，优先级高于main字段，并且可以直接简写成exports字段的值。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等同于</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于exports字段只有支持 ES6 的 Node.js 才认识，所以可以用来兼容旧版本的 Node.js。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main-legacy.cjs&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main-modern.cjs&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>条件加载</li></ul><p>利用.这个别名，可以为 ES6 模块和 CommonJS 指定不同的入口。目前，这个功能需要在 Node.js 运行的时候，打开--experimental-conditional-exports标志。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.cjs&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，别名.的require条件指定require()命令的入口文件（即 CommonJS 的入口），default条件指定其他情况的入口（即 ES6 的入口）。</p><p>上面的写法可以简写如下。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.cjs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果同时还有其他别名，就不能采用简写，否则或报错。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 报错</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;./feature&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/feature.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.cjs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> NPM</h2><h3 id="npm组成" tabindex="-1"><a class="header-anchor" href="#npm组成" aria-hidden="true">#</a> npm组成</h3><ul><li>网站: 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径</li><li>注册表: 是一个巨大的数据库，保存了每个包（package）的信息</li><li>命令行工具: 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道</li></ul><h3 id="npm配置" tabindex="-1"><a class="header-anchor" href="#npm配置" aria-hidden="true">#</a> npm配置</h3><h4 id="命令行配置" tabindex="-1"><a class="header-anchor" href="#命令行配置" aria-hidden="true">#</a> 命令行配置</h4><p>命令行配置具有最高的优先级</p><p>--flag1 --flag2将同时设置配置参数true，而--flag1 --flag2 bar将设置flag1于true，并且flag2到bar。最后，--flag1 --flag2 --bar将两个配置参数都设置为true，并将其bar作为命令参数。</p><h4 id="环境变量配置" tabindex="-1"><a class="header-anchor" href="#环境变量配置" aria-hidden="true">#</a> 环境变量配置</h4><p>任何以npm_config_开头的环境变量都将被解释为配置参数。</p><p>例如，放入npm_config_foo=bar您的环境会将foo 配置参数设置为bar。任何未赋值的环境配置都将被赋予值true。配置值不区分大小写，因此NPM_CONFIG_FOO=bar工作方式相同。但请注意，在 npm-scripts 内部，npm 将设置自己的环境变量，Node 会优先选择那些小写版本而不是你可能设置的任何大写版本</p><h4 id="npmrc配置" tabindex="-1"><a class="header-anchor" href="#npmrc配置" aria-hidden="true">#</a> .npmrc配置</h4><p>.npmrc配置生效的优先级如下：</p><ol><li>每个项目的配置文件（/path/to/my/project/.npmrc）</li><li>每用户配置文件（默认为$HOME/.npmrc;可通过CLI选项--userconfig或环境变量$NPM_CONFIG_USERCONFIG配置）</li><li>全局配置文件（默认为$PREFIX/etc/.npmrc;可通过CLI选项--globalconfig或环境变量$NPM_CONFIG_GLOBALCONFIG配置）</li><li>npm 的内置配置文件（/path/to/npm/.npmrc）</li></ol><br><p>.npmrc配置项：</p><ul><li>access：&lt;null|public|restricted&gt;</li></ul><p>设置包的权限，默认为public，非作用域的包不可以设置为restricted，更改配置后，不会改变现有包的访问权限，在publish后生效</p><ul><li>all: &lt;boolean&gt;</li></ul><p>运行npm outdated和npm ls时，设置--all将显示所有过时的或已安装的软件包，而不仅仅是那些直接依赖的软件包</p><ul><li>bin-links: &lt;boolean&gt;</li></ul><p>控制在执行npm install时是否创建符号链接，可解决一些文件系统不支持符号链接的问题</p><ul><li>cache：&lt;string&gt;</li></ul><p>缓存目录路径</p><ul><li>commit-hooks: &lt;boolean&gt;</li></ul><p>执行npm version命令时运行git commit hook</p><ul><li>depth：&lt;number|null&gt;</li></ul><p>如果设置了all，默认为infinity，否则默认为1；</p><p>设置执行npm ls时的包需要到达的深度</p><ul><li>engine-strict: &lt;boolean&gt;</li></ul><p>默认值为false，是否严格匹配当前node的版本，如果包中声明的node版本与当前系统版本不符合并且该选项为true，npm会停止安装对应的包</p><ul><li>force: &lt;boolean&gt;</li></ul><p>消除保护措施，防止不好的副作用、常见错误等发生，主要体现在以下几点：</p><ol><li>允许全局安装非npm文件</li><li>允许使用npm cache clean删除缓存文件夹</li><li>允许安装具有engine声明并且与环境node不匹配的包，即使engine-strict已启用</li></ol><ul><li>format-package-lock: &lt;boolean&gt;</li></ul><p>格式化package-lock.json为人类可读文件</p><ul><li>include: &lt;prod|dev|optional|peer&gt;</li></ul><p>定义要安装的依赖类型</p><ul><li>init-version: &lt;string&gt;</li></ul><p>使用npm init时指定的初始版本号，默认为&#39;1.0.0&#39;</p><ul><li>install-strategy: &lt;hoisted|nested|shallow|linked&gt;</li></ul><p>指定安装包时在node_modules中的策略，hoisted：在顶层非重复安装，并根据需要在目录结构中重复；nested：安装在每个包中，不提升到顶层；shallow：只安装在dep顶层的包</p><ul><li>json: &lt;boolean&gt;</li></ul><p>是否输出为json数据，而不是正常输出</p><ul><li>legacy-peer-deps: &lt;boolean&gt;</li></ul><p>指定包是否忽略peer依赖，false表示忽略，如v3-v6，从v7开始默认安装</p><ul><li>lockfile-version: &lt;number&gt;</li></ul><p>锁文件版本。在v5和v6中，使用1版本，缺少一些数据导致安装速度较慢</p><ul><li>loglevel：&lt;silent|error|warn|notice|http|info|verbose&gt;</li></ul><p>默认值为notice，将显示更高级别的日志</p><ul><li>logs-dir: &lt;path&gt;</li></ul><p>npm的log目录位置，默认为缓存中的_logs目录</p><ul><li>logs-max: &lt;number&gt;</li></ul><p>日志文件的最大存储数量，超过数量后将按照生成时间删除，默认为10，如果设置为0，不会有日志写入文件当中</p><ul><li>message：&lt;string&gt;</li></ul><p>使用npm version创建版本时要提交的git信息，信息中的“%s”将会替换为版本号</p><ul><li>package-lock: &lt;boolean&gt;</li></ul><p>如果设置为false，安装时将忽略package-lock.json文件，如果为true，将会阻止写入package-lock.json文件</p><ul><li>package-lock-only: &lt;boolean&gt;</li></ul><p>如果设置为true，则当前操作将仅使用package-lock.json， 忽略node_modules</p><p>对于update，这意味着仅更新package-lock.json， 而不是检查node_modules和下载依赖项</p><p>对于list，这意味着输出将基于 package-lock.json，而不是node_modules的内容</p><ul><li>prefix：&lt;string&gt;</li></ul><p>全局包安装的路径</p><ul><li>progress：&lt;boolean&gt;</li></ul><p>是否在控制台显示进度条</p><ul><li>registry: &lt;string&gt;</li></ul><p>注册表地址</p><ul><li>scope：&lt;string&gt;</li></ul><p>将操作限定在作用域内进行，安装包时将安装作用域包，使用npm init也将创建一个作用域包</p><ul><li>usage: &lt;boolean&gt;</li></ul><p>显示有关命令的简短用法输出</p><ul><li>workspace：&lt;string&gt;</li></ul><p>指定命令执行的工作空间，如果使用workspaces表示在所有工作区中执行</p><h4 id="config命令" tabindex="-1"><a class="header-anchor" href="#config命令" aria-hidden="true">#</a> config命令</h4><p>config命令用于通过子命令在命令行配置.npmrc文件</p><p>获取配置文件信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token punctuation">[</span>--json<span class="token punctuation">]</span>

<span class="token comment"># 用户配置</span>
<span class="token function">npm</span> config list <span class="token punctuation">[</span>--json<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改配置文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-g<span class="token operator">|</span>--global<span class="token punctuation">]</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token assign-left variable">key</span><span class="token operator">=</span>value <span class="token punctuation">[</span>-g<span class="token operator">|</span>--global<span class="token punctuation">]</span>

<span class="token function">npm</span> <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-g<span class="token operator">|</span>--global<span class="token punctuation">]</span>

<span class="token function">npm</span> config get <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
<span class="token function">npm</span> get <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>

<span class="token function">npm</span> config delete <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>

<span class="token function">npm</span> config edit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>config选项：</p><ul><li>json：使用json格式输出，非原始格式</li><li>location：global/user/project 配置文件目标对象</li></ul><h3 id="npm命令" tabindex="-1"><a class="header-anchor" href="#npm命令" aria-hidden="true">#</a> npm命令</h3><h4 id="用户操作" tabindex="-1"><a class="header-anchor" href="#用户操作" aria-hidden="true">#</a> 用户操作</h4><ul><li>登录</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看当前注册表登录用户</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">whoami</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>配置用户信息</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> profile get
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置用户信息</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> profile <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>prop<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>添加用户</li></ul><p>在注册表中创建一个新用户，并将凭据保存到.npmrc文件，如果未指定注册表，则使用默认注册表</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> adduser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安装包" tabindex="-1"><a class="header-anchor" href="#安装包" aria-hidden="true">#</a> 安装包</h4><p>安装包的来源可以是npm官方的注册表、本地包、git仓库中的包，使用npm官方注册表中的包，可以对包指定范围</p><p><strong>npm包类型</strong></p><p>使用install命令安装包是可能会存在以下情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># npm注册表中的包：
[&lt;@scope&gt;/]&lt;pkg&gt;
[&lt;@scope&gt;/]&lt;pkg&gt;@&lt;tag&gt;
[&lt;@scope&gt;/]&lt;pkg&gt;@&lt;version&gt;
[&lt;@scope&gt;/]&lt;pkg&gt;@&lt;version range&gt;

# 本地包：
./my-package
/opt/npm/my-package

# git仓库的包:
git@github.com:npm/cli.git
git+ssh://git@github.com/npm/cli#v6.0.0
github:npm/cli#HEAD
npm/cli#c12ea07
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>安装命令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 本地安装</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>

<span class="token comment"># 全局安装</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>

<span class="token comment">#安装为开发依赖</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-dev <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>

<span class="token comment"># 安装为生产依赖</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-prod <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-P</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果本地package.js中没有安装包的信息，默认安装最新版本，否则按照package.js中版本规则进行安装；如果包有一个 package-lock，或一个 npm shrinkwrap 文件，或一个 yarn lock 文件，依赖项的安装将由该文件驱动，并遵循shrinkwrap、package-lock、yarn-lock的优先级进行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 &lt;folder&gt; 位于项目的根目录中，那么它的依赖项将被安装，并可能像其他类型的依赖项一样被提升到顶级node_modules。如果 &lt;folder&gt; 位于项目的根目录之外，npm 不会将包依赖项安装在node_modules中，但它会创建一个指向 &lt;folder&gt; 的符号链接</p><p><strong>npm ci</strong></p><p>npm ci的功能类似于npm install，但是前者更快更严格，常用于生产环境的持续集成，使用npm ci安装依赖，有以下几个特点：</p><ol><li>必须存在package-lock.json</li><li>如果package.json中的版本与package-lock.json中的版本不符，将会报错</li><li>单次执行只能安装项目所有包，不能用于安装单个包</li><li>执行前，会主动删除node_modules文件夹，如果存在的话</li><li>npm ci会优先从缓存中取</li></ol><h4 id="更新包" tabindex="-1"><a class="header-anchor" href="#更新包" aria-hidden="true">#</a> 更新包</h4><ul><li>更新本地包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 局部更新</span>
<span class="token function">npm</span> update <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>

<span class="token comment"># 更新本地所有</span>
<span class="token function">npm</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查找可以更新的包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> outdated
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此命令将检查注册表以查看当前是否有任何（或特定）已安装的已过时的软件包。</p><p>默认情况下，仅显示根项目的直接依赖项和配置的工作区的直接依赖项。也用于 --all 查找所有过时的元依赖项</p><ul><li>更新全局包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 局部更新</span>
<span class="token function">npm</span> update <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>

<span class="token comment"># 整体更新</span>
<span class="token function">npm</span> update <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查找可以更新的包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> outdated <span class="token parameter variable">-g</span> <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="卸载包" tabindex="-1"><a class="header-anchor" href="#卸载包" aria-hidden="true">#</a> 卸载包</h4><ul><li>卸载本地包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 卸载node_modules中的包</span>
<span class="token function">npm</span> uninstall <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span>

<span class="token comment"># 从package.json中删除</span>
<span class="token function">npm</span> uninstall <span class="token parameter variable">--save</span> <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span>

<span class="token comment"># 从package.json中删除</span>
<span class="token function">npm</span> uninstall --save-dev <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>卸载全局包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> uninstall <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="发布包" tabindex="-1"><a class="header-anchor" href="#发布包" aria-hidden="true">#</a> 发布包</h4><p>发布的包中必须要一个readme文件，用于在网站上显示的包信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> publish <span class="token punctuation">[</span><span class="token operator">&lt;</span>tarball<span class="token operator">&gt;|</span><span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--tag <span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--access <span class="token operator">&lt;</span>public<span class="token operator">|</span>restricted<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--otp otpcode<span class="token punctuation">]</span> <span class="token punctuation">[</span>--dry-run<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>更新版本号</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> version <span class="token operator">&lt;</span>version_number <span class="token operator">|</span> major <span class="token operator">|</span> minor <span class="token operator">|</span> patch <span class="token operator">|</span> premajor <span class="token operator">|</span> preminor <span class="token operator">|</span> prepatch <span class="token operator">|</span> prerelease <span class="token operator">|</span> from-git<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>该操作会更新package.json中的版本号</p></blockquote><ul><li>发布私有包到公共范围</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> publish <span class="token parameter variable">--access</span><span class="token operator">=</span>public
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>更新站点包信息</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> version patch
<span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将标记添加到特定的版本</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> dist-tag <span class="token function">add</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，npm会将发布的包标记为latest，我们可以主动修改标签</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> publish <span class="token parameter variable">--tag</span> beta
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="其他命令" tabindex="-1"><a class="header-anchor" href="#其他命令" aria-hidden="true">#</a> 其他命令</h4><ul><li>access</li></ul><p>设置已发布包的访问级别</p><p>设置一个包为public或者private：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> access get status <span class="token punctuation">[</span><span class="token operator">&lt;</span>package<span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token function">npm</span> access <span class="token builtin class-name">set</span> <span class="token assign-left variable">status</span><span class="token operator">=</span>public<span class="token operator">|</span>private <span class="token punctuation">[</span><span class="token operator">&lt;</span>package<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>授予/移除个人或组织对包的访问、读写权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> access grant <span class="token operator">&lt;</span>read-only<span class="token operator">|</span>read-write<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>scope:team<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>package<span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token function">npm</span> access revoke <span class="token operator">&lt;</span>scope:team<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>package<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>显示用户或团队能够访问的所有包以及访问级别，只读公共包除外:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> access list packages <span class="token punctuation">[</span><span class="token operator">&lt;</span>user<span class="token operator">&gt;|</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;|</span><span class="token operator">&lt;</span>scope:team<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>package<span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token function">npm</span> access list collaborators <span class="token punctuation">[</span><span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>user<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>cache</li></ul><p>清除缓存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> cache clean <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>docs</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> docs <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>exec</li></ul><p>该命令可以在npm包中执行命令，就和执行npm run一样，格式如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token builtin class-name">exec</span> -- <span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span><span class="token punctuation">[</span>@<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>args<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token function">npm</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">--package</span><span class="token operator">=</span><span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span><span class="token punctuation">[</span>@<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token punctuation">]</span> -- <span class="token operator">&lt;</span>cmd<span class="token operator">&gt;</span> <span class="token punctuation">[</span>args<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token function">npm</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;&lt;cmd&gt; [args...]&#39;</span>
<span class="token function">npm</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">--package</span><span class="token operator">=</span>foo <span class="token parameter variable">-c</span> <span class="token string">&#39;&lt;cmd&gt; [args...]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>--package 选项指定的任何包将在被执行命令的 PATH 中提供，以及任何本地安装的包可执行文件,如果任何被请求的包没有出现在本地项目依赖项中，那么它们会被安装到 npm 缓存中的一个文件夹中 ，如果没有提供 -c 或 --call 选项，则使用位置参数生成命令字符串；如果没有提供 --package 选项，那么 npm 将尝试从package.json中的bin字段获取</p><ul><li>explain</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> explain <span class="token operator">&lt;</span>package-spec<span class="token operator">&gt;</span>

alias: why
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印当前安装包的依赖链</p><ul><li>init</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token operator">&lt;</span>initializer<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>initializer会被转换为create-initializer，然后使用npm exec安装并执行相应的bin，等同于npx initializer，命令行参数也将传递给初始化包，用例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init foo <span class="token parameter variable">--yes</span> -<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token builtin class-name">exec</span> create-foo -- <span class="token parameter variable">--yes</span>
<span class="token function">npm</span> init @usr/foo -<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token builtin class-name">exec</span> @usr/create-foo
<span class="token function">npm</span> init @usr -<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token builtin class-name">exec</span> @usr/create
<span class="token function">npm</span> init @usr@2.0.0 -<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token builtin class-name">exec</span> @usr/create@2.0.0
<span class="token function">npm</span> init @usr/foo@2.0.0 -<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token builtin class-name">exec</span> @usr/create-foo@2.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果省略了initializer，将会执行init行为</p><ul><li>link</li></ul><p>用于安装本地包，在包文件夹中执行不带参数的 npm link 将在全局文件夹<code>{prefix}/lib/node_modules/&lt;package&gt;</code>中创建一个符号链接，该符号链接链接到执行 npm link 命令的包，它还会将包中的任何<code>bins</code>链接到<code>{prefix}/bin/{name}</code>，执行带包文件夹参数的<code>npm link package-name</code>将创建一个从全局安装的package-name(取自 package.json)到当前文件夹 node_modules 的符号链接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">link</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>也可以在使用包的地方使用npm link package-path的方式</p></blockquote><ul><li>ping</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">ping</span> <span class="token punctuation">[</span>--registry <span class="token operator">&lt;</span>registry<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>pkg</li></ul><p>用于检索和设置字段的语法是可以在 package.json 中找到的嵌套对象属性的点分隔表示，它与 npm view 中用于从注册表中检索信息的符号相同</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> pkg <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token function">npm</span> pkg get <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token function">npm</span> pkg delete <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token function">npm</span> pkg <span class="token builtin class-name">set</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>array<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>index<span class="token operator">&gt;</span><span class="token punctuation">]</span>.<span class="token operator">&lt;</span>key<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token function">npm</span> pkg <span class="token builtin class-name">set</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>array<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>.<span class="token operator">&lt;</span>key<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>prefix</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> prefix <span class="token punctuation">[</span>-g<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>git仓库</li></ul><p>此命令尝试猜测指定包的源码仓库的 URL ，然后再使用 --browser 配置参数打开它。 如果没有提供包名称，它将在当前文件夹中搜索package.json 文件， 并使用其 name 属性的值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> repo <span class="token punctuation">[</span><span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>search</li></ul><p>在注册中心中搜索与搜索词匹配的包。npm search 通过包元数据对注册表中的所有文件执行线性、增量、按词法顺序的搜索</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> search <span class="token operator">&lt;</span>pkg-keyword<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>view</li></ul><p>查询包的详细信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> view <span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="npx" tabindex="-1"><a class="header-anchor" href="#npx" aria-hidden="true">#</a> npx</h3><p>npx主要解决了调用非全局的内部模块的问题，运行时，会到node_modules/.bin路径下和$PATH环境变量中检查命令是否存在，如果执行命令的依赖包没有安装到局部和全局，npx会将依赖包下载安装到一个临时目录，在使用完成后对依赖包进行删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx -- <span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span><span class="token punctuation">[</span>@<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>args<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
npx <span class="token parameter variable">--package</span><span class="token operator">=</span><span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span><span class="token punctuation">[</span>@<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token punctuation">]</span> -- <span class="token operator">&lt;</span>cmd<span class="token operator">&gt;</span> <span class="token punctuation">[</span>args<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
npx <span class="token parameter variable">-c</span> <span class="token string">&#39;&lt;cmd&gt; [args...]&#39;</span>
npx <span class="token parameter variable">--package</span><span class="token operator">=</span>foo <span class="token parameter variable">-c</span> <span class="token string">&#39;&lt;cmd&gt; [args...]&#39;</span>
npx gitUrl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>--no-install：强制使用本地模块，如果项目目录和全局都不存在，将报错</p><p>--ignore-exist：忽略本地已有的模块</p><h3 id="install细节" tabindex="-1"><a class="header-anchor" href="#install细节" aria-hidden="true">#</a> install细节</h3><h4 id="演进" tabindex="-1"><a class="header-anchor" href="#演进" aria-hidden="true">#</a> 演进</h4><p><strong>第一版：嵌套结构</strong></p><p>npm按package中的定义顺序递归的安装依赖包</p><p>问题：</p><ol><li>导致层级过深，路径长度不符合操作系统</li><li>重复安装</li></ol><p><strong>第二版：扁平结构（3.x后)</strong></p><p>npm按package中的定义顺序安装包，如果node_modules下不存在，则安装在其下方，如果存在同时符合版本范围，忽略安装，如果存在但是不符合版本范围，安装在依赖包的node_modules下，包的版本受package中定义得顺序</p><p>问题：</p><ol><li>没有彻底解决重复安装的问题（与顺序有关）</li><li>项目中可以使用不存在package.json中的依赖包（幽灵依赖）</li></ol><p><strong>第三版：lock文件（5.x后）</strong></p><p>为了解决顺序导致的不确定性，npm使用lock锁定依赖结构，依然使用扁平结构，lock文件的结构和项目node_modules安装包的结构一一对应，在第一次安装包时，会根据lock文件进行安装，保证了lock文件与node_modules的结构相同，同时提升安装速度</p><p>问题 ：</p><p>项目中可以使用不存在package.json中的依赖</p><h4 id="安装过程" tabindex="-1"><a class="header-anchor" href="#安装过程" aria-hidden="true">#</a> 安装过程</h4><ol><li>检查 .npmrc 文件：优先级为：项目级的 .npmrc 文件 &gt; 用户级的 .npmrc 文件&gt; 全局级的 .npmrc 文件 &gt; npm 内置的 .npmrc 文件</li><li>检查有无 lock 文件。</li></ol><ul><li><p>无 lock 文件：</p><p>1）从 npm 远程仓库获取包信息</p><p>2）根据 package.json 构建逻辑依赖树：</p><ul><li>不管其是直接依赖还是依赖的子依赖，优先将其放置在 node_modules 根目录。</li><li>当遇到相同模块时，判断已放置在依赖树的模块版本是否符合新模块的版本范围，如果符合则跳过，不符合则在当前模块的 node_modules 下放置该模块。</li></ul><p>3）根据逻辑依赖树在缓存中依次查找每个包</p><ul><li>不存在缓存： <ul><li>从 npm 远程仓库下载包</li><li>校验包的完整性</li><li>校验不通过 <ul><li>重新下载</li></ul></li><li>校验通过： <ul><li>将下载的包复制到 npm 缓存目录</li><li>将下载的包按照依赖结构解压到 node_modules</li></ul></li></ul></li><li>存在缓存 <ul><li>将缓存按照依赖结构解压到 node_modules</li></ul></li></ul><p>4）生成 lock 文件</p></li><li><p>有 lock 文件：</p><ul><li>检查 package.json 中的依赖版本是否和 package-lock.json 中的依赖有冲突。 <ul><li>没有冲突，直接跳过获取包信息、构建依赖树过程，开始在缓存中查找包信息，后续过程相同</li><li>有冲突，报错，需要手动解决冲突</li></ul></li></ul></li></ul><p>流程图如下： <img src="`+r+`"></p><h2 id="pnpm" tabindex="-1"><a class="header-anchor" href="#pnpm" aria-hidden="true">#</a> pnpm</h2><p>pnpm将依赖包统一存储在硬盘上的一个位置，项目中安装依赖的时候会将使用的包硬链接到这个位置，pnpm不会对相同包的不同版本分别处理，只会存储相同依赖包的不同文件</p><h3 id="命令执行" tabindex="-1"><a class="header-anchor" href="#命令执行" aria-hidden="true">#</a> 命令执行</h3><h4 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h4><p>与 npm 不同的是，pnpm 会校验所有的参数。 比如，pnpm install --target_arch x64 会执行失败，因为 --target_arch x64 不是 pnpm install 的有效参数</p><p>如果某些依赖需要使用环境变量，可以通过<code>npm_config_xxx</code>从cli选项中填充：</p><ol><li>设置明确的环境变量：npm_config_target_arch=x64 pnpm install</li><li>使用 --config.xx 来强制使用未知选项：pnpm install --config.target_arch=x64</li></ol><h4 id="工作目录" tabindex="-1"><a class="header-anchor" href="#工作目录" aria-hidden="true">#</a> 工作目录</h4><p>通过配置项，可以指定命令运行的不同工作目录，默认当前工作目录</p><ol><li>-C &lt;path&gt;, --dir &lt;path&gt;</li></ol><p>在 &lt;path&gt; 中启动 pnpm ，而不是当前的工作目录。</p><br><ol start="2"><li>-w, --workspace-root</li></ol><p>在工作空间的根目录中启动 pnpm ，而不是当前的工作目录</p><h4 id="命令执行-1" tabindex="-1"><a class="header-anchor" href="#命令执行-1" aria-hidden="true">#</a> 命令执行</h4><p>当使用一个命令时，pnpm首先会查找自身有无该命令，如<code>npm install</code>，如果没有会在当前路径下的<code>package.json</code>的scripts中查找一个具有指定名称的脚本（所以 pnpm run lint 和 pnpm lint 等价），</p><p>如果没有指定名称的脚本，那么 pnpm 将以 shell 脚本的形式执行该命令，所以pnpm eslint和eslint等价</p><h3 id="pnpm命令" tabindex="-1"><a class="header-anchor" href="#pnpm命令" aria-hidden="true">#</a> pnpm命令</h3><h4 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理" aria-hidden="true">#</a> 依赖管理</h4><ol><li>安装包</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装软件包及其依赖，支持的包地址：</p><ul><li>从注册表安装</li><li>从workspace安装，会从已配置的源处进行安装，当然取决于是否设置了 link-workspace-packages，以及是否使用了 workspace: 协议</li><li>从本地安装，本地安装可以使用源码文件压缩包和本地目录，如果使用本地目录，将会在node_modules中生成一个symlink，与pnpm link的行为一致</li><li>从远端安装tar包</li><li>从git安装</li></ul><p>安装的软件包可以指定安装的位置类型：</p><ul><li>--save-prod -P：安装到常规的dependencies</li><li>--save-dev -D：安装到devDependencies</li><li>--save-optional -O：安装到optionalDependencies</li><li>--save-peer：安装到peerDependencies</li><li>--save-exact -E：安装一个确切的版本</li><li>--global -g：安装到全局</li><li>--workspace：仅添加在workspace中找到的依赖</li></ul><br><ol start="2"><li>安装项目所有依赖</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">install</span>
<span class="token function">pnpm</span> i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在CI环境中, 如果存在需要更新的 lockfile 会安装失败</p><p>在 workspace内, pnpm install 下载项目所有依赖. 如果想禁用这个行为, 将 recursive-install 设置为 false</p><p>支持以下配置项：</p><ul><li>--force</li></ul><p>强制重新安装依赖：重新获取并修改缓存中的包，由pnpm重新创建不兼容版本的lock文件和（或）模块目录。 安装所有 optionalDependencies，即使它们不满足当前环境（cpu、os、arch）</p><ul><li>--offline &lt;boolean&gt;</li></ul><p>为 true时，pnpm会仅使用已经在缓存中的包。 如果缓存中没有找不到这个包，那么就会安装失败</p><ul><li>--prefer-offline &lt;Boolean&gt;</li></ul><p>如果为 true，缺失的数据将会从服务器获取，并绕过缓存数据的过期检查。 想强制使用离线模式, 请使用 --offline.</p><ul><li>--prod, -P</li></ul><p>如果环境变量中NODE_ENV被设置为 production，那么pnpm 不会安装任何属于 devDependencies 的包，如果有相关的包已经被安装了，则会清除这些包。 使用这个指令pnpm会忽略NODE_ENV ，强制pnpm以production的方式执行install命令。</p><ul><li>--dev, -D</li></ul><p>仅安装devDependencies并删除已安装的dependencies，无论 NODE_ENV是什么。</p><ul><li>--no-optional</li></ul><p>不安装 optionalDependencies 依赖</p><ul><li>--lockfile-only &lt;Boolean&gt;</li></ul><p>使用时，只更新 pnpm-lock.yaml 和 package.json。 不写入 node_modules 目录。</p><ul><li>--fix-lockfile</li></ul><p>自动修复损坏的 lock 文件。</p><ul><li>--frozen-lockfile &lt;Boolean&gt;</li></ul><p>如果设置 true, pnpm 不会生成 lockfile，且如果 lockfile 跟 manifest 不同步、文件需要更新或不存在 lockfile 则会安装失败.</p><ul><li>--reporter=&lt;name&gt;</li></ul><p>类型：default, append-only, ndjson, silent</p><p>silent - 不会向控制台记录任何信息，也不包含致命错误</p><p>default - 标准为 TTY 的默认输出</p><p>append-only - 始终向末尾追加输出。 没有光标操作</p><p>ndjson - 最详细报告. 打印所有ndjson 格式日志</p><ul><li>--shamefully-hoist &lt;Boolean&gt;</li></ul><p>创建一个扁平node_modules 目录结构, 类似于npm 或 yarn. WARNING: 这是非常不推荐的.</p><ul><li>--ignore-scripts &lt;Boolean&gt;</li></ul><p>不执行项目中<code>package.json</code>和它的依赖项中定义的任何脚本</p><br><ol start="3"><li>更新包</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> update/up/upgrade <span class="token punctuation">[</span><span class="token operator">&lt;</span>pkg-name<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新项目中的依赖包，如果不带包名称，则更新所有依赖</p><p>可以使用以下参数：</p><ul><li>--recursive -r</li></ul><p>同时更新所有子目录</p><ul><li>--latest -L</li></ul><p>忽略package.json中的版本范围进行升级，可能出现跨主版本的升级，更新后会更新package.json文件</p><ul><li>--global -g</li></ul><p>更新全局安装的依赖包</p><ul><li>--workspace</li></ul><p>尝试链接工作区中所有的包。 版本将更新至与工作区内的包匹配的版本。</p><p>如果更新了特定的包，而在工作区内也找不到任何可更新的依赖项，则命令将会失败。</p><p>例如，如果 Express 不是工作区内的包，那么以下 命令将失败:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> up <span class="token parameter variable">-r</span> <span class="token parameter variable">--workspace</span> express
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>--prod, -P</li></ul><p>仅更新在 dependencies 和 optionalDependencies 中的依赖项。</p><ul><li>--dev, -D</li></ul><p>仅更新在 devDependencies中的依赖项。</p><ul><li>--no-optional</li></ul><p>忽略在 optionalDependencies 中的依赖项。</p><ul><li>--interactive, -i</li></ul><p>显示过时的依赖项并选择要更新的依赖项</p><br><ol start="4"><li>删除包</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> remove/rm/un/uninstall <span class="token operator">&lt;</span>pkg-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从 node_modules 和项目的 package.json 中删除相关 packages。</p><p>可选择的配置项：</p><ul><li>--recursive, -r</li></ul><p>当在工作区中使用此命令时，将从每个工作区的包中移除相关依赖(或 多个依赖)。</p><p>当不在工作区内使用时，将删除相关依赖项 (或多个依赖), 也包含子目录中对应的包 。</p><ul><li>--global, -g</li></ul><p>从全局删除一个依赖包。</p><ul><li>--save-dev, -D</li></ul><p>仅删除开发环境 devDependencies 中的依赖项。</p><ul><li>--save-optional, -O</li></ul><p>仅移除 optionalDependencies 中的依赖项。</p><ul><li>--save-prod, -P</li></ul><p>仅从 dependencies 中删除相关依赖项</p><br><ol start="5"><li>链接包</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> link/ln
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使当前本地包可在系统范围内或其他位置访问。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">link</span> <span class="token operator">&lt;</span>dir<span class="token operator">&gt;</span>
<span class="token function">pnpm</span> <span class="token function">link</span> <span class="token parameter variable">--global</span>
<span class="token function">pnpm</span> <span class="token function">link</span> <span class="token parameter variable">--global</span> <span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可选择的配置项：</p><ul><li>--dir &lt;dir&gt;, -C</li></ul><p>将link位置改为&lt;dir&gt;.</p><ul><li>pnpm link &lt;dir&gt;</li></ul><p>从执行此命令的路径或通过&lt;dir&gt;指定的文件夹，链接package到node_modules中。</p><ul><li>pnpm link --global</li></ul><p>从执行此命令的路径或通过&lt;dir&gt; 选项指定的文件夹，链接package到全局的node_modules中，所以使其可以被另一个使用pnpm link --global &lt;pkg&gt; 的package引用。</p><ul><li>pnpm link --global &lt;pkg&gt;</li></ul><p>将指定的包（&lt;pkg&gt;）从全局 node_modules 链接到 package 的 node_modules，从该 package 中执行或通过 --dir 选项指定</p><ul><li>pnpm unlink</li></ul><p>取消连接到系统的包</p><br><ol start="6"><li>添加补丁</li></ol><p>pnpm patch &lt;pkg name&gt;@&lt;version&gt;会将指定的包提取到一个可以随时编辑的临时目录当中，完成修改后, 运行 pnpm patch-commit &lt;path&gt; (&lt;path&gt; 是之前提取的临时目录) 以生成一个补丁文件，并提供 patchedDependencies 字段注册到你的项目中</p><p>可选的配置项：</p><ul><li>--edit-dir</li></ul><p>指定包的解压目录</p><ul><li>--ignore-existing</li></ul><p>忽略已有的补丁文件</p><h4 id="查看依赖" tabindex="-1"><a class="header-anchor" href="#查看依赖" aria-hidden="true">#</a> 查看依赖</h4><ol><li>检查问题</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> audit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检查已安装包的已知安全问题。</p><p>如果发现安全问题，请尝试通过 pnpm update 更新您的依赖项。 如果简单的更新不能解决所有问题，请使用 overrides 来强制使用 不易受攻击的版本或者运行npm audit --fix。 例如，如果 lodash@&lt;2.1.0 易受攻击，可用这个overrides来强制使用 lodash@^2.1.0</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;pnpm&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;overrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;lodash@&lt;2.1.0&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.1.0&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可选的参数：</p><ul><li>--audit-level &lt;low|moderate|high|critical&gt;</li></ul><p>仅打印大于设定等级的警告</p><ul><li>--fix</li></ul><p>强制将不易受攻击的版本添加到package.json文件当中</p><ul><li>--json</li></ul><p>使用json格式输出</p><ul><li>--dev</li></ul><p>仅审查开发依赖项</p><ul><li>--prod</li></ul><p>仅审查生产依赖项</p><br><ol start="2"><li>依赖列表</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> list/ls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以一个树形结构输出所有的已安装package的版本及其依赖</p><br><ol start="3"><li>查看过期依赖</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> outdated
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><ol start="4"><li>查看依赖链</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> why <span class="token operator">&lt;</span>pkg name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示依赖于指定package的所有 package。</p><p>可选的配置项:</p><ul><li>--recursive, -r</li></ul><p>在子目录所有package 中，或者如果在一个工作空间执行时，在工作空间的所有package中，显示指定 package的依赖关系树。</p><ul><li>--json</li></ul><p>以 JSON 格式显示信息。</p><ul><li>--long</li></ul><p>输出详细信息。</p><ul><li>--parseable</li></ul><p>显示可解析的输出而不是树形视图。</p><ul><li>--global, -g</li></ul><p>列出在全局安装目录的package，而不是在当前项目中。</p><ul><li>--prod, -P</li></ul><p>仅仅显示在dependencies中的 package的依赖关系树。</p><ul><li>--dev, -D</li></ul><p>仅仅显示在devDependencies中的 package的依赖关系树。</p><ul><li>--only-projects</li></ul><p>仅显示同时也在工作区内的依赖项</p><h3 id="pnpm配置" tabindex="-1"><a class="header-anchor" href="#pnpm配置" aria-hidden="true">#</a> pnpm配置</h3><p>pnpm大部分配置与npm相同，以下是pnpm独有的配置：</p><ul><li>hoist &lt;boolean&gt;</li></ul><p>当 hoist 为 true 时，所有依赖项都会被提升到 node_modules/.pnpm/node_modules。 这使得 node_modules所有包都可以访问 未列出的依赖项</p><ul><li>shamefully-hoist &lt;boolean&gt;</li></ul><p>默认情况下，pnpm 创建一个半严格的 node_modules，这意味着依赖项可以访问未声明的依赖项，但 node_modules 之外的模块不行。 通过这种布局，生态系统中的大多数的包都可以正常工作。 但是，如果某些工具仅在提升的依赖项位于根目录的 node_modules 时才有效，您可以将其设置为 true 来为您提升它们</p><ul><li>store-dir</li></ul><p>包保存在磁盘上的位置</p><ul><li>modules-dir</li></ul><p>全局包的安装位置</p><h3 id="工作空间" tabindex="-1"><a class="header-anchor" href="#工作空间" aria-hidden="true">#</a> 工作空间</h3><p>一个 workspace 的根目录下必须有 pnpm-workspace.yaml 文件</p><p>默认情况下，如果可用的 packages 与已声明的可用范围相匹配，pnpm 将从工作区链接这些 packages。 例如, 如果bar引用&quot;foo&quot;: &quot;^1.0.0&quot;并且foo@1.0.0存在工作区，那么pnpm会从工作区将foo@1.0.0链接到bar。 但是，如果 bar 的依赖项中有 &quot;foo&quot;: &quot;2.0.0&quot;，而 foo@2.0.0 在工作空间中并不存在，则将从 npm registry 安装 foo@2.0.0 。 这种行为带来了一些不确定性。当 link-workspace-packages 选项被设置为 false 时，仅当使用 workspace: 协议声明依赖，pnpm 才会从此 workspace 链接所需的包</p><h4 id="工作区协议" tabindex="-1"><a class="header-anchor" href="#工作区协议" aria-hidden="true">#</a> 工作区协议</h4><p>pnpm 支持workspace协议<code>workspace:</code>。 当使用此协议时，pnpm 将拒绝解析除本地 workspace 包含的 package 之外的任何内容。 因此，如果设置为 &quot;foo&quot;: &quot;workspace:2.0.0&quot; 时，安装将会失败，因为 &quot;foo@2.0.0&quot; 不存在于此 workspace 中</p><h4 id="发布workspace包" tabindex="-1"><a class="header-anchor" href="#发布workspace包" aria-hidden="true">#</a> 发布workspace包</h4><p>发布npm包时，如果包通过工作区写实使用了工作空间的包，这些包将会被动态替换</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace:*&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;bar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace:~&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;qar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace:^&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;zoo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace:^1.5.0&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换后为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.5.0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;bar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.5.0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;qar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.5.0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;zoo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.5.0&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="node-modules结构" tabindex="-1"><a class="header-anchor" href="#node-modules结构" aria-hidden="true">#</a> node_modules结构</h3><h4 id="node-modules生成" tabindex="-1"><a class="header-anchor" href="#node-modules生成" aria-hidden="true">#</a> node_modules生成</h4><p>pnpm 的 node_modules 布局使用符号链接来创建依赖项的嵌套结构，node_modules 中每个包的每个文件都是来自内容可寻址存储的硬链接 假设安装了依赖于 bar@1.0.0 的 foo@1.0.0。 pnpm 会将两个包硬链接到 node_modules 如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_modules
└── .pnpm
    ├── bar@1.0.0
    │   └── node_modules
    │       └── bar -&gt; &lt;store&gt;/bar
    │           ├── index.js
    │           └── package.json
    └── foo@1.0.0
        └── node_modules
            └── foo -&gt; &lt;store&gt;/foo
                ├── index.js
                └── package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个包都硬链接到一个 node_modules 文件夹（foo@1.0.0/node_modules/foo）内的子文件夹中。 这必要的：</p><ol><li>允许包自行导入自己。 foo 应该能够 require(&#39;foo/package.json&#39;) 或者 import * as package from &quot;foo/package.json&quot;。</li><li>避免循环符号链接。 依赖以及需要依赖的包被放置在一个文件夹下。 对于 Node.js 来说，依赖是在包的内部 node_modules 中或在任何其它在父目录 node_modules 中是没有区别的</li></ol><p>安装的下一阶段是符号链接依赖项。 bar 将被符号链接到 foo@1.0.0/node_modules 文件夹：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_modules
└── .pnpm
    ├── bar@1.0.0
    │   └── node_modules
    │       └── bar -&gt; &lt;store&gt;/bar
    └── foo@1.0.0
        └── node_modules
            ├── foo -&gt; &lt;store&gt;/foo
            └── bar -&gt; ../../bar@1.0.0/node_modules/bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，处理直接依赖关系。 foo 将被符号链接至根目录的 node_modules 文件夹，因为 foo 是项目的依赖项：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_modules
├── foo -&gt; ./.pnpm/foo@1.0.0/node_modules/foo
└── .pnpm
    ├── bar@1.0.0
    │   └── node_modules
    │       └── bar -&gt; &lt;store&gt;/bar
    └── foo@1.0.0
        └── node_modules
            ├── foo -&gt; &lt;store&gt;/foo
            └── bar -&gt; ../../bar@1.0.0/node_modules/bar

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无论依赖项的数量和依赖关系图的深度如何，布局都会保持这种结构，它与 Node 的模块解析算法完全兼容</p><h4 id="peers处理" tabindex="-1"><a class="header-anchor" href="#peers处理" aria-hidden="true">#</a> peers处理</h4><p>peer 依赖项（peer dependencies）会从依赖图中更高的已安装的依赖项中解析（resolve），因为它们与父级共享相同的版本。 这意味着，如果 foo@1.0.0 有两个peers依赖（bar@^1 和 baz@^1），那么它可能在一个项目中有多个不同的依赖项集合。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- foo-parent-1
  - bar@1.0.0
  - baz@1.0.0
  - foo@1.0.0
- foo-parent-2
  - bar@1.0.0
  - baz@1.1.0
  - foo@1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="yarn-v2" tabindex="-1"><a class="header-anchor" href="#yarn-v2" aria-hidden="true">#</a> yarn_v2</h2><h3 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h3><p>约束是对所有的工作区中自动执行某种规则，通过在项目（存储库）的根目录添加constraints.pro文件来创建约束</p><p>Prolog是一个基于事实的引擎。它以一个总是为真的事实列表和一个基本上读作“如果f(X)和u(X)都为真，则谓词v(X)为真”的谓词列表开始。通过计算u(X)和v(X)哪些X的值为真，Prolog能够自动计算f(X)为真的值列表</p><h3 id="pnp" tabindex="-1"><a class="header-anchor" href="#pnp" aria-hidden="true">#</a> PnP</h3><h4 id="使用node-modules存在的问题" tabindex="-1"><a class="header-anchor" href="#使用node-modules存在的问题" aria-hidden="true">#</a> 使用node_modules存在的问题</h4><ol><li><p>node_modules目录通常包含大量的文件，在有缓存的情况下也非常的耗时</p></li><li><p>node_modules生成是一个I/O繁重的操作，即使它可以在可能的情况下使用硬链接或写时复制，它仍然需要在操作磁盘之前进行一系列系统调用来区分文件系统的当前状态。</p></li><li><p>Node解析也必须进行一系列stat和readdir调用，以确定从哪里加载每个所需的文件。</p></li><li><p>node_modules文件夹的设计是不切实际的，因为它不允许包管理器正确地删除重复的包。</p></li></ol><p>yarn通过pnp来管理依赖包和版本，并通知node解释器依赖包在磁盘上的位置，因为yarn已经知道关于依赖树的一起</p><p>Yarn生成一个.pnp.cjs文件，而不是通常的包含各种软件包副本的node_modules文件夹。.pnp.cjs文件包含各种映射：一个将包名称和版本链接到它们在磁盘上的位置，另一个将包名称和版本链接到它们的依赖项列表。有了这些查找表，Yarn可以立即告诉Node在哪里找到它需要访问的任何包，只要它们是依赖关系树的一部分，并且只要这个文件在你的环境中加载（</p><h3 id="yarn命令" tabindex="-1"><a class="header-anchor" href="#yarn命令" aria-hidden="true">#</a> yarn命令</h3><ol><li>install</li></ol><p>安装项目所有依赖</p><p>支持的选项：</p><ul><li>--json</li></ul><p>将输出格式化为json</p><ul><li>--immutable</li></ul><p>如果安装过程中要修改锁文件，使用错误代码终止安装</p><ul><li>--immutable-cache</li></ul><p>如果安装过程中要修改高速缓冲文件夹，使用错误代码终止安装</p><ul><li>--refresh-lockfile</li></ul><p>安装过程中刷新锁文件的元数据</p><ul><li>--check-cache</li></ul><p>总是重新获取包并保证校验和一致</p><ul><li>check-resolutions</li></ul><p>验证软件包解析方案是否一致</p><br><ol start="2"><li>add</li></ol><p>安装单个包，支持从github进行安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">..</span>.
<span class="token function">yarn</span> <span class="token function">add</span> lodash
<span class="token function">yarn</span> <span class="token function">add</span> lodash@1.2.3
<span class="token function">yarn</span> <span class="token function">add</span> lodash@https://github.com/lodash/lodash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选项：</p><ul><li>--json</li></ul><p>将输出格式化为json</p><ul><li>-E,--exact</li></ul><p>不要使用任何semver修饰符</p><ul><li>-T,--tilde</li></ul><p>对解析的范围使用~修饰符</p><ul><li>-C,--caret</li></ul><p>对解析的范围使用^修饰符</p><ul><li>-D,--dev</li></ul><p>添加包作为开发依赖项</p><ul><li>-P,--peer</li></ul><p>添加包作为对等依赖项</p><ul><li>-O,--optional</li></ul><p>将包添加/升级到可选的常规/对等依赖项</p><ul><li>--prefer-dev</li></ul><p>将包添加/升级到开发依赖项</p><ul><li>--cached</li></ul><p>重用项目内某个地方已使用的最高版本</p><br><ol start="3"><li>bin</li></ol><p>获取项目中可用脚本命令的路径</p><p>选项：</p><ul><li>--json</li></ul><p>以json的格式输出</p><br><ol start="4"><li>cache clean</li></ol><p>删除缓存文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> cache clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除本地缓存文件</p><p>选项：</p><ul><li>--mirror</li></ul><p>删除全局缓存文件</p><ul><li>--all</li></ul><p>删除全局和本地缓存文件</p><br><ol start="5"><li>constraints</li></ol><p>检查是否满足项目约束</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> constraints

 <span class="token comment"># 自动修复</span>
 <span class="token function">yarn</span> constraints <span class="token parameter variable">--fix</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>query：查询约束事实，将输出所有匹配到给定的prolog查询</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出整个工作区所有依赖项</span>
<span class="token function">yarn</span> constraints query <span class="token string">&#39;workspace_has_dependency(_, DependencyName, _, _).&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>source：打印事实数据库源代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> constraints <span class="token builtin class-name">source</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><ol start="6"><li>dedupe</li></ol><p>执行重复数据清除</p><p>清除所有重复包数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dedupe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清除特定程序包重复数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dedupe <span class="token operator">&lt;</span>pkg-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清除特定范围内的包的重复数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dedupe @<span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span>/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行重复数据检查，发现重复时退出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dedupe <span class="token parameter variable">--check</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><ol start="7"><li>dlx</li></ol><p>将在临时环境中安装软件包，并运行其 二进制脚本（如果包含）。二进制文件将在当前cwd中运行。默认情况下，Yarn将下载名为command的包，但这可以是 通过使用-p,--package标志进行更改，该标志将指示Yarn 仍然运行相同的命令，但来自不同的包</p><p>使用create-react-app创建一个新的React应用 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dlx create-react-app ./my-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为单个命令安装多个软件包 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dlx <span class="token parameter variable">-p</span> typescript <span class="token parameter variable">-p</span> ts-node ts-node --transpile-only <span class="token parameter variable">-e</span> <span class="token string">&quot;console.log(&#39;hello!&#39;)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><ol start="8"><li>exec</li></ol><p>执行shell命令</p><br><ol start="9"><li>info</li></ol><p>查看安装软件包的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> info <span class="token operator">&lt;</span>pkg-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项：</p><ul><li>--all,-A</li></ul><p>打印整个项目依赖包的版本</p><ul><li>--recursive，-R</li></ul><p>递归打印所有依赖的包信息</p><ul><li>--cache</li></ul><p>打印包的缓存信息</p><br><ol start="10"><li>init</li></ol><p>初始化工作区</p><p>选项：</p><ul><li>-p,--private</li></ul><p>初始化私有包</p><ul><li>-w,--workspace</li></ul><p>使用packages/目录初始化工作区根目录</p><ul><li>-i,--install</li></ul><p>初始化具有将在项目中锁定的特定捆绑包的包</p><ul><li>-n,--name</li></ul><p>初始化具有给定名称的包</p><br><ol start="11"><li>tag</li></ol><p>此命令将为包的特定版本向npm注册表添加一个标记。如果标记已经存在，它将被覆盖</p><p>添加tag：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">npm</span> tag <span class="token function">add</span> my-pkg@2.3.4-beta.4 beta
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出所有tag：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">npm</span> tag list <span class="token operator">&lt;</span>pkg-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除tag：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">npm</span> tag remove <span class="token operator">&lt;</span>pkg-name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><ol start="12"><li>patch</li></ol><p>为包打补丁，用法同npm</p><br><ol start="13"><li>set version</li></ol><p>为项目指定yarn的版本</p><p>从Yarn存储库下载最新版本 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">set</span> version latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从Yarn存储库下载最新的Canary版本 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">set</span> version canary
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从Yarn存储库下载最新的经典版本 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">set</span> version classic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载最新的Yarn 3版本 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">set</span> version <span class="token number">3</span>.x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载特定的Yarn 2构建 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">set</span> version <span class="token number">2.0</span>.0-rc.30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换回特定的Yarn 1版本 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">set</span> version <span class="token number">1.22</span>.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用本地文件系统的版本 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">set</span> version ./yarn.cjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用来自URL的发布 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">set</span> version <span class="token operator">&lt;</span>https://repo.yarnpkg.com/3.1.0/packages/yarnpkg-cli/bin/yarn.js<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载用于调用命令的版本 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token builtin class-name">set</span> version self
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><ol start="14"><li>up</li></ol><p>升级所有工作区的包</p><br><ol start="15"><li>workspace</li></ol><p>在指定工作区执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspace <span class="token operator">&lt;</span>workspace-name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出所有工作区</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspaces list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定工作区安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspace focus <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在每个工作区执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspace foreach <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="yarnrc-yml" tabindex="-1"><a class="header-anchor" href="#yarnrc-yml" aria-hidden="true">#</a> .yarnrc.yml</h3><p>Yarnrc文件（这样命名是因为它们必须被称为.yarnrc.yml）是一个可以配置Yarn内部设置的地方。虽然Yarn会自动在父目录中找到它们，但它们通常应该保存在项目的根目录中（通常是存储库）。从v2开始，它们必须用有效的Yaml编写，并具有正确的扩展名（简单地调用文件.yarnrc是不行的）。</p><p>环境变量可以通过在定义值时使用\${NAME}语法从设置定义中访问。默认情况下，Yarn将要求变量存在，但这可以通过使用\${NAME-fallback}（如果没有设置fallback，则返回NAME）或\${NAME:-fallback}（如果没有设置fallback，则返回NAME，或者是空字符串）来关闭。</p><p>最后，请注意，大多数设置也可以通过环境变量来定义（至少对于较简单的设置;目前还不支持数组和对象）。要做到这一点，只需在名称前面加上前缀，并将其写入snake case：YARN_CACHE_FOLDER将设置该高速缓存文件夹（这些值将覆盖RC文件中可能定义的任何内容-请谨慎使用）</p><h4 id="cachefolder" tabindex="-1"><a class="header-anchor" href="#cachefolder" aria-hidden="true">#</a> cacheFolder</h4><p>cacheFolder: &quot;./.yarn/cache&quot;</p><p>下载的软件包在系统上的存储路径。它们将被规范化、压缩，并以具有标准化名称的zip存档的形式保存。该高速缓存被认为是由多个项目共享的相对安全的，即使多个Yarn实例在不同的项目上同时运行</p><h4 id="compressionlevel" tabindex="-1"><a class="header-anchor" href="#compressionlevel" aria-hidden="true">#</a> compressionLevel</h4><p>compressionLevel: &quot;mixed&quot;</p><p>压缩级别，0表示“无压缩，速度更快”，9表示“重度压缩，速度更慢”</p><h4 id="defaultsemverrangeprefix" tabindex="-1"><a class="header-anchor" href="#defaultsemverrangeprefix" aria-hidden="true">#</a> defaultSemverRangePrefix</h4><p>defaultSemverRangePrefix: &quot;^&quot;</p><p>语义版本依赖项范围的默认前缀，用于安装到清单的新依赖项。可能的值为&quot;^&quot;（默认值）、&quot;~&quot;或&quot;&quot;</p><h4 id="enableglobalcache" tabindex="-1"><a class="header-anchor" href="#enableglobalcache" aria-hidden="true">#</a> enableGlobalCache</h4><p>enableGlobalCache: false</p><p>如果为true，Yarn将忽略cacheFolder设置，并将该高速缓存文件存储到共享相同配置的所有本地项目共享的文件夹中</p><h4 id="enableimmutablecache" tabindex="-1"><a class="header-anchor" href="#enableimmutablecache" aria-hidden="true">#</a> enableImmutableCache</h4><p>enableImmutableCache: false</p><p>如果为true，Yarn将在运行yarn install时拒绝以任何方式更改该高速缓存（无论是添加文件还是删除文件）</p><h4 id="enablemirror" tabindex="-1"><a class="header-anchor" href="#enablemirror" aria-hidden="true">#</a> enableMirror</h4><p>enableMirror: true</p><p>如果为true（默认值），Yarn将使用全局文件夹作为网络和实际缓存之间的间接连接。这使得那些还没有从零安装中受益的项目的安装速度更快</p><h4 id="enablenetwork" tabindex="-1"><a class="header-anchor" href="#enablenetwork" aria-hidden="true">#</a> enableNetwork</h4><p>enableNetwork: true</p><p>如果为false，Yarn将永远不会自己向网络发出任何请求，并且将抛出异常。对于CI来说，这是一个非常有用的设置，CI通常希望确保它们不会错误地从网络加载依赖项</p><h4 id="globalfolder" tabindex="-1"><a class="header-anchor" href="#globalfolder" aria-hidden="true">#</a> globalFolder</h4><p>globalFolder: &quot;./.yarn/global&quot;</p><p>存储所有系统全局文件的路径</p><h4 id="installstatepath" tabindex="-1"><a class="header-anchor" href="#installstatepath" aria-hidden="true">#</a> installStatePath</h4><p>installStatePath: “./. yarn/install-state.gz”</p><p>将保存安装状态的文件的路径</p><h4 id="lockfilefilename" tabindex="-1"><a class="header-anchor" href="#lockfilefilename" aria-hidden="true">#</a> lockfileFilename</h4><p>lockfileFilename: &quot;yarn.lock&quot; 定义将由Yarn生成的锁文件的名称</p><h4 id="nodelinker" tabindex="-1"><a class="header-anchor" href="#nodelinker" aria-hidden="true">#</a> NodeLinker</h4><p>NodeLinker: “pnp”</p><p>定义应该使用哪个链接器来安装Node包（用于启用node-modules插件），其中之一：pnp、pnpm和node-modules</p><h3 id="安装过程-1" tabindex="-1"><a class="header-anchor" href="#安装过程-1" aria-hidden="true">#</a> 安装过程</h3><h4 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h4><ol><li><p>加载存储在lockfile中的条目，然后根据这些数据和项目的当前状态（package.json），运行一个内部核心算法来找出缺少的条目</p></li><li><p>对于这些缺失的条目中的每一个，它使用查询插件Resolver接口，询问它们是否知道与给定描述符（supportsDescriptor）及其确切标识（getCandidates）和传递依赖列表（resolve）匹配的包。</p></li><li><p>一旦获得了包元数据的新列表，核心就开始对新添加的包的传递依赖性进行新的解析传递。这将重复进行，直到它发现依赖关系树中的所有包现在都将其元数据存储在锁文件中。</p></li><li><p>一旦依赖关系树中的每个包范围都被解析为元数据，内核就在内存中最后一次构建树，以生成我们所说的“虚拟包”。简而言之，这些虚拟包是同一个基本包的拆分实例--我们使用它们来消除所有列出对等依赖关系的包的歧义，这些包的依赖关系集会根据它们在依赖关系树中的位置而变化（请参阅本词典条目以获取更多信息）。</p></li></ol><h4 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch" aria-hidden="true">#</a> fetch</h4><p>有了组成依赖关系树的确切的包集，我们迭代它，并为每个启动一个新的缓存请求，以了解是否可以找到该包。如果不是，我们就像我们在上一步中所做的那样，我们询问我们的插件（通过Fetcher接口）他们是否知道这个包（supports），如果是，就从它的远程位置检索它（fetch）。</p><h4 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h4><p>使用的软件包必须以某种方式安装在磁盘上。例如，对于原生Node应用程序，您的包必须安装到一组node_modules目录中，以便解释器可以定位它们。这就是链接器的作用。通过Linker和Installer接口，Yarn核心将与注册的插件进行通信，让它们知道依赖关系树中列出的包，并描述它们的关系（例如，它会告诉它们tapable是webpack的依赖关系）。然后，插件可以决定以他们认为合适的任何方式对这些信息做什么。</p><h2 id="npm-pnpm-yarn比较" tabindex="-1"><a class="header-anchor" href="#npm-pnpm-yarn比较" aria-hidden="true">#</a> npm/pnpm/yarn比较</h2><table><thead><tr><th>功能</th><th>pnpm</th><th>Yarn</th><th>npm</th></tr></thead><tbody><tr><td>工作空间支持（monorepo）</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>隔离的node_modules</td><td>✔️ - 默认</td><td>✔️</td><td>✔️</td></tr><tr><td>提升的node_modules</td><td>✔️</td><td>✔️</td><td>✔️ - 默认</td></tr><tr><td>自动安装peers</td><td>✔️</td><td>❌</td><td>✔️</td></tr><tr><td>Plug&#39;n&#39;Play</td><td>✔️</td><td>✔️ - 默认</td><td>❌</td></tr><tr><td>零安装</td><td>❌</td><td>✔️</td><td>❌</td></tr><tr><td>修补依赖项</td><td>✔️</td><td>✔️</td><td>❌</td></tr><tr><td>管理Node.js 版本</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td>有锁文件</td><td>✔️ - pnpm-lock.yaml</td><td>✔️ - yarn.lock</td><td>✔️ - package-lock.json</td></tr><tr><td>支持覆盖</td><td>✔️</td><td>✔️ - 通过 resolutions</td><td>✔️</td></tr><tr><td>内容可寻址存储</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td>动态包执行</td><td>✔️-通过pnpm dlx</td><td>✔️-通过yarn dlx</td><td>✔️-通过npx</td></tr><tr><td>Side-effects cache</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td>Listing licenses</td><td>✔️-Via pnpm licenses list</td><td>✔️-Via a plugin</td><td>❌</td></tr></tbody></table><br><ol><li>空间占用</li></ol><p>不管是使用npm或者是yarn，安装依赖时一般是下载该依赖的tar包到本地离线镜像，然后解压到本地缓存，最后再将其拷贝到项目的node_modules中，所以多个项目依赖同一个版本的包，那么这个包就是在硬盘上存在多份，而pnpm安装依赖时，依赖包会被存放在统一的位置（store），然后使用该依赖的项目会硬链接对应的依赖位置</p><br><ol start="2"><li>node_module结构</li></ol><p>pnpm项目根目录下的node_modules文件夹下的各个依赖文件夹都是软链接，而 .pnpm 文件夹下有所有依赖的扁平化结构，以依赖名加版本号命名目录名，其目录下的node_modules下有个相同依赖名的目录，是硬链接，除了相同依赖名的目录，如果该依赖还有其他的依赖，也会展示在同级下，是软链接，它们的真正位置也是扁平在.pnpm项目下的对应位置的硬链接，npm和yarn都使用了扁平结构处理，避免了相同版本包的重复安装，在安装依赖包时，npm/yarn会对所有依赖先进行一次排序</p><br><ol start="3"><li>安全性</li></ol><p>由于npm和yarn的扁平化处理，会出现幽灵依赖的问题，即并没有在清单中声明但是项目中可以引用</p>`,718);function g(b,h){const s=o("ExternalLinkIcon");return p(),t("div",null,[d,n("p",null,[n("a",u,[a("npm中文文档"),e(s)]),a(" "),n("a",m,[a("pnpm中文文档"),e(s)]),a(" "),n("a",v,[a("yarn中文文档"),e(s)])]),k])}const x=l(c,[["render",g],["__file","instruction.html.vue"]]);export{x as default};
