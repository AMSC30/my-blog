import{_ as t,p as r,q as l,s as e,R as c,t as i,Y as d,n as h}from"./framework-e1bed10d.js";const o={},p=d('<h1 id="https是如何保证安全的" tabindex="-1"><a class="header-anchor" href="#https是如何保证安全的" aria-hidden="true">#</a> HTTPS是如何保证安全的</h1><h2 id="一、安全特性" tabindex="-1"><a class="header-anchor" href="#一、安全特性" aria-hidden="true">#</a> 一、安全特性</h2><p><code>HTTP</code>在通信过程中，存在以下问题：</p><ul><li>通信使用明文（不加密），内容可能被窃听</li><li>不验证通信方的身份，因此有可能遭遇伪装</li></ul><p>而<code>HTTPS</code>的出现正是解决这些问题，<code>HTTPS</code>是建立在<code>SSL</code>之上，其安全性由<code>SSL</code>来保证</p><p>在采用<code>SSL</code>后，<code>HTTP</code>就拥有了<code>HTTPS</code>的加密、证书和完整性保护这些功能</p><blockquote><p>SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议</p></blockquote><p><img src="https://static.vue-js.com/cb559400-b2ff-11eb-85f6-6fac77c0c9b3.png" alt=""></p><h2 id="二、如何做" tabindex="-1"><a class="header-anchor" href="#二、如何做" aria-hidden="true">#</a> 二、如何做</h2><p><code>SSL</code>的实现这些功能主要依赖于三种手段：CA(签名认证证书)+非对称加密(证书校验)+对称加密(传输)</p><h3 id="对称加密" tabindex="-1"><a class="header-anchor" href="#对称加密" aria-hidden="true">#</a> 对称加密</h3><p>对称加密指的是加密和解密使用的秘钥都是同一个，是对称的。只要保证了密钥的安全，那整个通信过程就可以说具有了机密性</p><p><img src="https://static.vue-js.com/e3f040f0-b2ff-11eb-ab90-d9ae814b240d.png" alt=""></p><h3 id="非对称加密" tabindex="-1"><a class="header-anchor" href="#非对称加密" aria-hidden="true">#</a> 非对称加密</h3><p>非对称加密，存在两个秘钥，一个叫公钥，一个叫私钥。两个秘钥是不同的，公钥可以公开给任何人使用，私钥则需要保密</p><p>公钥和私钥都可以用来加密解密，但公钥加密后只能用私钥解 密，反过来，私钥加密后也只能用公钥解密</p><p><img src="https://static.vue-js.com/d9603e60-b2ff-11eb-ab90-d9ae814b240d.png" alt=""></p><h3 id="混合加密" tabindex="-1"><a class="header-anchor" href="#混合加密" aria-hidden="true">#</a> 混合加密</h3><p>在<code>HTTPS</code>通信过程中，采用的是对称加密+非对称加密，也就是混合加密</p><p>在对称加密中讲到，如果能够保证了密钥的安全，那整个通信过程就可以说具有了机密性</p><p>而<code>HTTPS</code>采用非对称加密解决秘钥交换的问题</p><p>具体做法是发送密文的一方使用对方的公钥进行加密处理“对称的密钥”，然后对方用自己的私钥解密拿到“对称的密钥”</p><p><img src="https://static.vue-js.com/f375f290-b2ff-11eb-85f6-6fac77c0c9b3.png" alt=""></p><p>这样可以确保交换的密钥是安全的前提下，使用对称加密方式进行通信</p><h3 id="数字签名" tabindex="-1"><a class="header-anchor" href="#数字签名" aria-hidden="true">#</a> 数字签名</h3><p>数字签名能确定消息确实是由发送方签名并发出来的，因为别人假冒不了发送方的签名</p><p>原理其实很简单，就是用私钥加密，公钥解密</p><p>签名和公钥一样完全公开，任何人都可以获取。但这个签名只有用私钥对应的公钥才能解开，拿到摘要后，再比对原文验证完整性，就可以像签署文件一样证明消息确实是你发的</p><p><img src="https://static.vue-js.com/21aa6880-b300-11eb-85f6-6fac77c0c9b3.png" alt=""></p><p>和消息本身一样，因为谁都可以发布公钥，我们还缺少防止黑客伪造公钥的手段，也就是说，怎么判断这个公钥就是你的公钥</p><p>这时候就需要一个第三方，就是证书验证机构</p><h3 id="ca验证机构" tabindex="-1"><a class="header-anchor" href="#ca验证机构" aria-hidden="true">#</a> CA验证机构</h3><p>数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场</p><p>CA 对公钥的签名认证要求包括序列号、用途、颁发者、有效时间等等，把这些打成一个包再签名，完整地证明公钥关联的各种信息，形成“数字证书”</p><p>流程如下图：</p><p><img src="https://static.vue-js.com/395648a0-b300-11eb-85f6-6fac77c0c9b3.png" alt=""></p><ul><li>服务器的运营人员向数字证书认证机构提出公开密钥的申请</li><li>数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名</li><li>然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起</li><li>服务器会将这份由数字证书认证机构颁发的数字证书发送给客户端，以进行非对称加密方式通信</li></ul><p>接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，则证明：</p><ul><li>认证服务器的公开密钥的是真实有效的数字证书认证机构</li><li>服务器的公开密钥是值得信赖的</li></ul><h3 id="ca认证过程" tabindex="-1"><a class="header-anchor" href="#ca认证过程" aria-hidden="true">#</a> CA认证过程</h3><p>CA也有自己的公钥和私钥。公钥是直接放在操作系统里面的（客户端）。</p><p>客户端向服务端发起请求,获取公钥。 服务端用CA私钥加密服务端公钥得到证书（生成证书这一步是CA做的，一般需要付费），然后发送给客户端。 客户端拿到证书，浏览器就能根据自己的证书列表判断服务器的证书是否可信。这一步黑客没办法拿到CA公钥，所以无法破解得到服务端公钥。即使再次充当中间人拦截后给客户端发送自己的公钥，操作系统里CA公钥也没办法解密成功，浏览器就会出现警告，提示我们访问的地址不安全</p><h3 id="tls握手过程" tabindex="-1"><a class="header-anchor" href="#tls握手过程" aria-hidden="true">#</a> TLS握手过程</h3><ol><li>客户端给服务端发送信息包括：TLS版本、多个加密算法以及第一个随机数。</li><li>服务器收到后向客户端发起响应，在响应报文里面会携带服务端支持的TLS版本、加密算法和第二个随机数。</li><li>服务器再向客户端发一个响应。出示自己的证书，这样浏览器就能根据自己的证书列表判断服务器的证书是否可信。</li><li>服务器用CA私钥加密服务端公钥，然后发送给客户端。</li><li>客户端用系统里的CA公钥解密得到服务器的公钥。</li><li>客户端生成第3个随机数，用刚刚得到服务器的公钥进行加密发送给服务器。客户端这边TLS协商没有问题了，加密开始。</li><li>服务器用自己的私钥解密得到第三个随机数，第三个随机数，没有直接传输，这样只有客户端和服务端知道第三个随机数。除非服务器私钥被泄露。</li><li>客户端和服务端分别用第一随机数、第二随机数和第三随机数计算得出会话密钥，各自得到的会话密钥是相同的</li><li>客户端和服务端使用会话密钥作为私钥进行加密解密传输信息，为对称加密。</li></ol><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结" aria-hidden="true">#</a> 三、总结</h2><p>可以看到，<code>HTTPS</code>与<code>HTTP</code>虽然只差一个<code>SSL</code>，但是通信安全得到了大大的保障，通信的四大特性都以解决，解决方式如下：</p><ul><li>机密性：混合算法</li><li>完整性：摘要算法</li><li>身份认证：数字签名</li><li>不可否定：数字签名</li></ul><p>同时引入第三方证书机构，确保公开秘钥的安全性</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>',49),n={href:"https://zhuanlan.zhihu.com/p/100657391",target:"_blank",rel:"noopener noreferrer"},s={href:"https://juejin.cn/post/6844903830987997197#heading-7",target:"_blank",rel:"noopener noreferrer"},u={href:"https://cloud.tencent.com/developer/article/1748862",target:"_blank",rel:"noopener noreferrer"};function f(b,T){const a=h("ExternalLinkIcon");return r(),l("div",null,[p,e("ul",null,[e("li",null,[e("a",n,[c("https://zhuanlan.zhihu.com/p/100657391"),i(a)])]),e("li",null,[e("a",s,[c("https://juejin.cn/post/6844903830987997197#heading-7"),i(a)])]),e("li",null,[e("a",u,[c("https://cloud.tencent.com/developer/article/1748862"),i(a)])])])])}const _=t(o,[["render",f],["__file","HTTPS.html.vue"]]);export{_ as default};
