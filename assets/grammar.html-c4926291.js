import{_ as n,p as s,q as a,Y as t}from"./framework-e1bed10d.js";const p="/my-blog/assets/arkts-construct-79691b57.png",e="/my-blog/assets/lifecycle-7912285c.png",o={},c=t('<h1 id="arkts语言" tabindex="-1"><a class="header-anchor" href="#arkts语言" aria-hidden="true">#</a> ArkTS语言</h1><h2 id="语法概述" tabindex="-1"><a class="header-anchor" href="#语法概述" aria-hidden="true">#</a> 语法概述</h2><p>ArkTS的基本组成：</p><ul><li>装饰器： 用于装饰类、结构、方法以及变量，并赋予其特殊的含义。如上述示例中@Entry、@Component和@State都是装饰器，@Component表示自定义组件，@Entry表示该自定义组件为入口组件，@State表示组件中的状态变量，状态变量变化会触发UI刷新。</li><li>UI描述：以声明式的方式来描述UI的结构，例如build()方法中的代码块。</li><li>自定义组件：可复用的UI单元，可组合其他组件，如上述被@Component装饰的struct Hello。</li><li>系统组件：ArkUI框架中默认内置的基础和容器组件，可直接被开发者调用，比如示例中的Column、Text、Divider、Button。</li><li>属性方法：组件可以通过链式调用配置多项属性，如fontSize()、width()、height()、backgroundColor()等。</li><li>事件方法：组件可以通过链式调用设置多个事件的响应逻辑，如跟随在Button后面的onClick()</li></ul><img src="'+p+'"><h2 id="组件和页面生命周期" tabindex="-1"><a class="header-anchor" href="#组件和页面生命周期" aria-hidden="true">#</a> 组件和页面生命周期</h2><p>页面生命周期，即被@Entry装饰的组件生命周期，提供以下生命周期接口：</p><ul><li>onPageShow：页面每次显示时触发。</li><li>onPageHide：页面每次隐藏时触发一次。</li><li>onBackPress：当用户点击返回按钮时触发。</li></ul><p>组件生命周期，即一般用@Component装饰的自定义组件的生命周期，提供以下生命周期接口：</p><ul><li>aboutToAppear：组件即将出现时回调该接口，具体时机为在创建自定义组件的新实例后，在执行其build()函数之前执行。</li><li>aboutToDisappear：在自定义组件即将析构销毁时执行。</li></ul><p>生命周期流程如下图所示:</p><img src="'+e+`"><ol><li>初始化自定义组件的成员变量：通过本地默认值或者构造方法传递参数来初始化自定义组件的成员变量，初始化顺序为成员变量的定义顺序</li><li>如果定义了aboutToAppear，则执行aboutToAppear方法</li><li>执行build方法渲染系统组件，如果子组件为自定义组件，则创建自定义组件的实例。在执行build()函数的过程中，框架会观察每个状态变量的读取状态，将保存两个map：</li></ol><p>a) 状态变量 -&gt; UI组件（包括ForEach和if）。</p><p>b) UI组件 -&gt; 此组件的更新函数，即一个lambda方法，作为build()函数的子集，创建对应的UI组件并执行其属性方法</p><ol start="4"><li>执行onPageShow</li><li>当改变了状态变量时，或者LocalStorage / AppStorage中的属性更改，并导致绑定的状态变量更改其值时,进行最小化更新</li><li>if组件的分支改变，或者ForEach循环渲染中数组的个数改变，组件将被删除，调用其aboutToDisappear生命周期函数</li><li>当页面销毁时，先执行onPageHide，然后从页面到子组件依次执行aboutToDisappear</li></ol><h2 id="ui复用-builder" tabindex="-1"><a class="header-anchor" href="#ui复用-builder" aria-hidden="true">#</a> UI复用-@Builder</h2><p>@Builder装饰的函数也称自定义构建函数</p><p><strong>组件内定义与使用：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@Builder <span class="token function">MyBuilderFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// builder或者其他自定义构建函数内</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MyBuilderFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>允许在自定义组件内定义一个或多个自定义构建函数，该函数被认为是该组件的私有、特殊类型的成员函数。</li><li>自定义构建函数可以在所属组件的build方法和其他自定义构建函数中调用，但不允许在组件外调用。</li><li>在自定义函数体中，this指代当前所属组件，组件的状态变量可以在自定义构建函数内访问。建议通过this访问自定义组件的状态变量而不是参数传递</li></ul><p><strong>全局定义与使用：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@Builder <span class="token keyword">function</span> <span class="token function">MyGlobalBuilderFunction</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span>

<span class="token comment">// builder或者其他自定义构建函数内</span>
<span class="token function">MyGlobalBuilderFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>全局的自定义构建函数可以被整个应用获取，不允许使用this和bind方法。</li><li>如果不涉及组件状态变化，建议使用全局的自定义构建方法</li></ul><p><strong>参数传递规则</strong></p><p>自定义构建函数的参数传递有按值传递和按引用传递两种，均需遵守以下规则：</p><ul><li>参数的类型必须与参数声明的类型一致，不允许undefined、null和返回undefined、null的表达式。</li><li>在自定义构建函数内部，不允许改变参数值。如果需要改变参数值，且同步回调用点，建议使用@Link。</li><li>@Builder内UI语法遵循UI语法规则</li></ul><p><strong>按引用传递参数</strong></p><p>传递的参数可为状态变量，且状态变量的改变会引起@Builder方法内的UI刷新。ArkUI提供$$作为按引用传递参数的范式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">ABuilder</span><span class="token punctuation">(</span> $$ <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">paramA1</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">paramB1</span> <span class="token operator">:</span> string <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>按值传递参数</strong></p><p>调用@Builder装饰的函数默认按值传递。当传递的参数为状态变量时，状态变量的改变不会引起@Builder方法内的UI刷新。所以当使用状态变量的时候，推荐使用按引用传递</p><h2 id="样式复用-styles" tabindex="-1"><a class="header-anchor" href="#样式复用-styles" aria-hidden="true">#</a> 样式复用-@Styles</h2><p>@Styles装饰器可以将多条<code>通用属性方法</code>和<code>通用事件方法</code>设置提炼成一个方法，直接在组件声明的位置调用，使用@Styles的方法不支持传参，但组件内部定义的可以访问this</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全局</span>
@Styles <span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token comment">// 在组件内</span>
@Component
struct FancyUse <span class="token punctuation">{</span>
  @Styles <span class="token function">fancy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="样式扩展-extend" tabindex="-1"><a class="header-anchor" href="#样式扩展-extend" aria-hidden="true">#</a> 样式扩展-@Extend</h2><p>@Extend用于扩展原生组件样式，该装饰器只能在全局进行定义</p><p>与@Styles不同的是：</p><ul><li>可以传递参数，并且可以是状态参数和函数，状态变量的改变会刷新UI</li><li>支持原生组件的私有属性和私有方法</li></ul><h2 id="多态样式-statestyles" tabindex="-1"><a class="header-anchor" href="#多态样式-statestyles" aria-hidden="true">#</a> 多态样式-stateStyles</h2><p>stateStyles是属性方法，可以根据UI内部状态来设置样式，类似于css伪类，状态样式可以与状态变量和@Styles结合使用。ArkUI提供以下四种状态：</p><ul><li>focused：获焦态。</li><li>normal：正常态。</li><li>pressed：按压态。</li><li>disabled：不可用态。 使用方式如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@Entry
@Component
struct StateStylesSample <span class="token punctuation">{</span>
  @State color<span class="token operator">:</span>string <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;Click me&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">stateStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">focused</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">pressed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token string">&#39;30%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与@Styles结合：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@Entry
@Component
struct MyComponent <span class="token punctuation">{</span>
  @Styles <span class="token function">normalStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Gray<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  @Styles <span class="token function">pressedStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Text1&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>White<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">stateStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>normalStyle<span class="token punctuation">,</span>
          <span class="token literal-property property">pressed</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pressedStyle<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="状态管理" tabindex="-1"><a class="header-anchor" href="#状态管理" aria-hidden="true">#</a> 状态管理</h2><h3 id="组件状态-state" tabindex="-1"><a class="header-anchor" href="#组件状态-state" aria-hidden="true">#</a> 组件状态-@State</h3><p>@State装饰的变量，或称为状态变量，和自定义组件的渲染进行绑定，与组件的生命周期相同，不与父组件同步并不可被外部访问</p><p>@State装饰的变量必须指定类型并进行初始化，如果父组件没有进行传值，则进行本地初始化，可以使用Object、class、string、number、boolean、enum类型，以及这些类型的数组，不可是一个undefined和null，慎用Date</p><p>当装饰的变量类型为class或者object时，可以观察到变量本身和顶层属性的赋值，嵌套的属性无法观察到</p><h3 id="单项同步-prop" tabindex="-1"><a class="header-anchor" href="#单项同步-prop" aria-hidden="true">#</a> 单项同步-@Prop</h3><p>@Prop装饰的变量可以和父组件建立单向的同步关系。@Prop装饰的变量是可变的，不可是一个undefined和null，但是变化不会同步回其父组件</p><p>@Prop装饰的变量只能为string、number、boolean、enum类型，并允许进行本地初始化作为父组件未传参时的默认值，如果没有本地初始化，那么父组件必须传值</p><p>支持从父组件的常规变量、@State、@Link、@Prop、@Provide、@Consume、@ObjectLink、@StorageLink、@StorageProp、@LocalStorageLink和@LocalStorageProp，并支持去初始化子组件中的常规变量、@State、@Link、@Prop、@Provide</p><p>如果子组件已经在本地修改了@Prop装饰的相关变量值，而在父组件中对应的@State装饰的变量被修改后，子组件本地修改的@Prop装饰的相关变量值将被覆盖</p><h3 id="双向同步-link" tabindex="-1"><a class="header-anchor" href="#双向同步-link" aria-hidden="true">#</a> 双向同步-@Link</h3><p>子组件中被@Link装饰的变量与其父组件中对应的数据源建立双向数据绑定，@Link装饰的变量不支持本地初始化</p><p>@Link装饰的变量支持Object、class、string、number、boolean、enum类型，以及这些类型的数组。类型必须被指定，且和双向绑定状态变量的类型相同。不支持any，不支持简单类型和复杂类型的联合类型，不允许使用undefined和null</p><p>支持从父组件中@State、@Link、@Prop、@Provide、@Consume、@ObjectLink、@StorageLink、@StorageProp、@LocalStorageLink和@LocalStorageProp装饰变量对子组件初始化并可用于初始化子组件的子组件常规变量、@State、@Link、@Prop、@Provide</p><p>父组件使用@State装饰的变量需要使用$语法，如this.name -&gt; $name</p><h3 id="深层传递-provide-consume" tabindex="-1"><a class="header-anchor" href="#深层传递-provide-consume" aria-hidden="true">#</a> 深层传递-@Provide&amp;@Consume</h3><p>@Provide和@Consume，应用于与后代组件的双向数据同步，应用于状态数据在多个层级之间传递的场景。不同于上文提到的父子组件之间通过命名参数机制传递，@Provide和@Consume摆脱参数传递机制的束缚，实现跨层级传递</p><p>@Provide和@Consume可以通过相同的变量名或者相同的变量别名绑定，变量类型必须相同</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过相同的变量名绑定</span>
@Provide a<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
@Consume a<span class="token operator">:</span> number<span class="token punctuation">;</span>

<span class="token comment">// 通过相同的变量别名绑定</span>
@<span class="token function">Provide</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> b<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
@<span class="token function">Consume</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> c<span class="token operator">:</span> number<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Provide和@Consume支持装饰Object、class、string、number、boolean、enum类型，以及这些类型的数组，不支持any，不支持简单类型和复杂类型的联合类型，不允许使用undefined和null，并必须指定初始值</p><h3 id="嵌套监测-observed-objectlink" tabindex="-1"><a class="header-anchor" href="#嵌套监测-observed-objectlink" aria-hidden="true">#</a> 嵌套监测-@Observed&amp;@ObjectLink</h3><p>上文所述的装饰器仅能观察到第一层的变化，对于多层嵌套的情况，比如二维数组，或者数组项class，或者class的属性是class，他们的第二层的属性变化是无法观察到的。@ObjectLink和@Observed类装饰器可用于在涉及嵌套对象或数组的场景中进行双向数据同步。</p><p>@Observed装饰class类，必须指定类型，可以被观察到实例属性的变化</p><p>@ObjectLink装饰器装饰的状态变量用于接收@Observed装饰的类的实例，相当于指向数据源的指针,和父组件中对应的状态变量建立双向数据绑定，装饰的实例属性是可以改变的，但是变量的分配是不允许的，也就是说这个装饰器装饰变量是只读的，不能被改变，不支持简单类型，简单类型可以使用@Prop。需要搭配@ObjectLink或者@Prop使用</p><blockquote><p>使用@Observed装饰class会改变class原始的原型链，@Observed和其他类装饰器装饰同一个class可能会带来问题</p></blockquote><h3 id="页面级状态-localstorage" tabindex="-1"><a class="header-anchor" href="#页面级状态-localstorage" aria-hidden="true">#</a> 页面级状态-localStorage</h3><p>LocalStorage是页面级的UI状态存储，应用程序可以创建多个LocalStorage实例在页面内共享，@Entry装饰的组件，可以被分配一个LocalStorage实例，此组件的所有子组件实例(组件树)将自动获得对该LocalStorage实例的访问权限</p><p>@Component装饰的组件最多可以访问一个LocalStorage实例，只能接受父组件通过@Entry传递来的LocalStorage实例</p><p>当应用释放最后一个指向LocalStorage的引用时，比如销毁最后一个自定义组件，LocalStorage将被JS Engine垃圾回收</p><p><strong>@LocalStorageProp</strong></p><p>自定义组件初始化的时候，@LocalStorageProp(key)/@LocalStorageLink(key)装饰的变量会通过给定的key，绑定LocalStorage对应的属性，完成初始化。本地初始化是必要的，因为无法保证LocalStorage一定存在给定的key</p><p>@LocalStorageProp(key)是和LocalStorage中key对应的属性建立单向数据同步，我们允许本地改变的发生，但是对于@LocalStorageProp，本地的修改永远不会同步回LocalStorage中，相反，如果LocalStorage给定key的属性发生改变，改变会被同步给@LocalStorageProp，并覆盖掉本地的修改</p><p>@LocalStorageProp允许装饰Object、class、string、number、boolean、enum类型，以及这些类型的数组，不支持any，不允许使用undefined和null，不支持从父节点初始化，可用于初始化子组件@State、@Link、@Prop、@Provide</p><p>当装饰的数据类型为boolean、string、number类型时，可以观察到数值的变化。当装饰的数据类型为class或者Object时，可以观察到赋值和属性赋值的变化，即Object.keys(observedObject)返回的所有属性。当装饰的对象是array时，可以观察到数组添加、删除、更新数组单元的变化</p><p><strong>@LocalStorageLink</strong></p><p>@LocalStorageLink用于将自定义组件的状态变量的更新同步回LocalStorage</p><p>使用逻辑同@LocalStorageProp</p><p><strong>应用逻辑使用LocalStorage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">47</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建新实例并使用给定对象初始化</span>
<span class="token keyword">let</span> propA <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// propA == 47</span>
<span class="token keyword">let</span> link1 <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// link1.get() == 47</span>
<span class="token keyword">let</span> link2 <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// link2.get() == 47</span>
<span class="token keyword">let</span> prop <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prop.get() = 47</span>
link1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// two-way sync: link1.get() == link2.get() == prop.get() == 48</span>
prop<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// one-way sync: prop.get()=1; but link1.get() == link2.get() == 48</span>
link1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// two-way sync: link1.get() == link2.get() == prop.get() == 49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从UI内部使用LocalStorage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建新实例并使用给定对象初始化</span>
<span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">47</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

@Component
struct Child <span class="token punctuation">{</span>
  <span class="token comment">// @LocalStorageLink变量装饰器与LocalStorage中的&#39;PropA&#39;属性建立双向绑定</span>
  @<span class="token function">LocalStorageLink</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> storLink2<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Child from LocalStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>storLink2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token comment">// 更改将同步至LocalStorage中的&#39;PropA&#39;以及Parent.storLink1</span>
      <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storLink2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使LocalStorage可从@Component组件访问</span>
@<span class="token function">Entry</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span>
@Component
struct CompA <span class="token punctuation">{</span>
  <span class="token comment">// @LocalStorageLink变量装饰器与LocalStorage中的&#39;PropA&#39;属性建立双向绑定</span>
  @<span class="token function">LocalStorageLink</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> storLink1<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Parent from LocalStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>storLink1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">// initial value from LocalStorage will be 47, because &#39;PropA&#39; initialized already</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storLink1 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token comment">// @Component子组件自动获得对CompA LocalStorage实例的访问权限。</span>
      <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将LocalStorage实例从UIAbility共享到一个或多个视图</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// EntryAbility.ts</span>
<span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> window <span class="token keyword">from</span> <span class="token string">&#39;@ohos.window&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">storage</span><span class="token operator">:</span> LocalStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">47</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">onWindowStageCreate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">windowStage</span><span class="token operator">:</span> window<span class="token punctuation">.</span>WindowStage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    windowStage<span class="token punctuation">.</span><span class="token function">loadContent</span><span class="token punctuation">(</span><span class="token string">&#39;pages/Index&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过GetShared接口获取stage共享的LocalStorage实例</span>
<span class="token keyword">let</span> storage <span class="token operator">=</span> LocalStorage<span class="token punctuation">.</span><span class="token function">GetShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

@<span class="token function">Entry</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span>
@Component
struct CompA <span class="token punctuation">{</span>
  <span class="token comment">// can access LocalStorage instance using </span>
  <span class="token comment">// @LocalStorageLink/Prop decorated variables</span>
  @<span class="token function">LocalStorageLink</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> varA<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>varA<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局状态-appstorage" tabindex="-1"><a class="header-anchor" href="#全局状态-appstorage" aria-hidden="true">#</a> 全局状态-AppStorage</h3><p>AppStorage是在应用启动的时候会被创建的单例。它的目的是为了提供应用状态数据的中心存储，这些状态数据在应用级别都是可访问的。AppStorage将在应用运行过程保留其属性。属性通过唯一的键字符串值访问。</p><p>AppStorage可以和UI组件同步，且可以在应用业务逻辑中被访问</p><p>AppStorage的使用方式同LocalStorage</p><p><strong>从应用逻辑使用AppStorage和LocalStorage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>AppStorage<span class="token punctuation">.</span><span class="token function">SetOrCreate</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token literal-property property">storage</span><span class="token operator">:</span> LocalStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">propA</span><span class="token operator">:</span> number <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// propA in AppStorage == 47, propA in LocalStorage == 17</span>
<span class="token keyword">var</span> <span class="token literal-property property">link1</span><span class="token operator">:</span> SubscribedAbstractProperty<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Link</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// link1.get() == 47</span>
<span class="token keyword">var</span> <span class="token literal-property property">link2</span><span class="token operator">:</span> SubscribedAbstractProperty<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Link</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// link2.get() == 47</span>
<span class="token keyword">var</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> SubscribedAbstractProperty<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Prop</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prop.get() == 47</span>

link1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// two-way sync: link1.get() == link2.get() == prop.get() == 48</span>
prop<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// one-way sync: prop.get() == 1; but link1.get() == link2.get() == 48</span>
link1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// two-way sync: link1.get() == link2.get() == prop.get() == 49</span>

storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// == 17 </span>
storage<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// == 101</span>

AppStorage<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// == 49</span>
link1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// == 49</span>
link2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// == 49</span>
prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// == 49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从UI内部使用AppStorage和LocalStorage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>AppStorage<span class="token punctuation">.</span><span class="token function">SetOrCreate</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">48</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

@<span class="token function">Entry</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span>
@Component
struct CompA <span class="token punctuation">{</span>
  @<span class="token function">StorageLink</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> storLink<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  @<span class="token function">LocalStorageLink</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> localStorLink<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">From AppStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>storLink<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storLink <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">From LocalStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>localStorLink<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localStorLink <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="持久化存储-persistentstorage" tabindex="-1"><a class="header-anchor" href="#持久化存储-persistentstorage" aria-hidden="true">#</a> 持久化存储-PersistentStorage</h3><p>PersistentStorage是应用程序中的可选单例对象。此对象的作用是持久化存储选定的AppStorage属性，以确保这些属性在应用程序重新启动时的值与应用程序关闭时的值相同</p><p>PersistentStorage将选定的AppStorage属性保留在设备磁盘上。应用程序通过API，以决定哪些AppStorage属性应借助PersistentStorage持久化。UI和业务逻辑不直接访问PersistentStorage中的属性，所有属性访问都是对AppStorage的访问，AppStorage中的更改会自动同步到PersistentStorage</p><p>PersistentStorage的持久化变量最好是小于2kb的数据，不要大量的数据持久化，因为PersistentStorage写入磁盘的操作是同步的，大量的数据本地化读写会同步在UI线程中执行，影响UI渲染性能</p><p><strong>从AppStorage中访问PersistentStorage初始化的属性</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>PersistentStorage<span class="token punctuation">.</span><span class="token function">PersistProp</span><span class="token punctuation">(</span><span class="token string">&#39;aProp&#39;</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

@Entry
@Component
struct Index <span class="token punctuation">{</span>
  @State message<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
  @<span class="token function">StorageLink</span><span class="token punctuation">(</span><span class="token string">&#39;aProp&#39;</span><span class="token punctuation">)</span> aProp<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">48</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>
        <span class="token comment">// 应用退出时会保存当前结果。重新启动后，会显示上一次的保存结果</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>aProp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>aProp <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新应用安装后首次启动运行：</li></ul><p>a)调用PersistProp初始化PersistentStorage，首先查询在PersistentStorage本地文件中是否存在“aProp”，查询结果为不存在，因为应用是第一次安装。</p><p>b)接着查询属性“aProp”在AppStorage中是否存在，依旧不存在。</p><p>c)在AppStorge中创建名为“aProp”的number类型属性，属性初始值是定义的默认值47。</p><p>d)PersistentStorage将属性“aProp”和值47写入磁盘，AppStorage中“aProp”对应的值和其后续的更改将被持久化。</p><p>e)在Index组件中创建状态变量@StorageLink(&#39;aProp&#39;) aProp，和AppStorage中“aProp”双向绑定，在创建的过程中会在AppStorage中查找，成功找到a)“aProp”，所以使用其在AppStorage找到的值47。</p><ul><li>触发点击事件后：</li></ul><p>a)状态变量@StorageLink(&#39;aProp&#39;) aProp改变，触发Text组件重新刷新。</p><p>b)@StorageLink装饰的变量是和AppStorage中建立双向同步的，所以@StorageLink(&#39;aProp&#39;) aProp的变化会被同步回AppStorage中。</p><p>c)AppStorage中“aProp”属性的改变会同步到所有绑定该“aProp”的单向或者双向变量，在本示例中没有其他的绑定“aProp”的变量。</p><p>d)因为“aProp”对应的属性已经被持久化，所以在AppStorage中“aProp”的改变会触发PersistentStorage将新的改变写会本地磁盘。</p><ul><li>后续启动应用：</li></ul><p>a)执行PersistentStorage.PersistProp(&#39;aProp&#39;, 47)，在首先查询在PersistentStorage本地文件查询“aProp”属性，成功查询到。</p><p>b)将在PersistentStorage查询到的值写入AppStorage中。</p><p>c)在Index组件里，@StorageLink绑定的“aProp”为PersistentStorage写入AppStorage中的值，即为上一次退出引用存入的值</p><h3 id="设备环境-environment" tabindex="-1"><a class="header-anchor" href="#设备环境-environment" aria-hidden="true">#</a> 设备环境-Environment</h3><p>Environment是ArkUI框架在应用程序启动时创建的单例对象。它为AppStorage提供了一系列描述应用程序运行状态的属性。Environment的所有属性都是不可变的（即应用不可写入），所有的属性都是简单类型</p><p><strong>应用逻辑使用Environment</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用Environment.EnvProp将设备运行languageCode存入AppStorage中；</span>
Environment<span class="token punctuation">.</span><span class="token function">EnvProp</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从AppStorage获取单向绑定的languageCode的变量</span>
<span class="token keyword">const</span> <span class="token literal-property property">lang</span><span class="token operator">:</span> SubscribedAbstractProperty<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Prop</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>lang<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;zh&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从UI中访问Environment参数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将设备languageCode存入AppStorage中</span>
Environment<span class="token punctuation">.</span><span class="token function">EnvProp</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> enable <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

@Entry
@Component
struct Index <span class="token punctuation">{</span>
  @<span class="token function">StorageProp</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">)</span> languageCode<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 输出当前设备的languageCode</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>languageCode<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听器-watch" tabindex="-1"><a class="header-anchor" href="#监听器-watch" aria-hidden="true">#</a> 监听器-@Watch</h3><p>@Watch应用于对状态变量的监听，当状态变量变化时，@Watch的回调方法将被调用。@Watch在ArkUI框架内部判断数值有无更新使用的是严格相等（===），回调的函数类型为<code>(changedPropertyName? : string) =&gt; void</code>，changedPropertyName是被watch的属性名。在多个状态变量绑定同一个@Watch的回调方法的时候，可以通过changedPropertyName进行不同的逻辑处理</p><p>在第一次初始化的时候，@Watch装饰的方法不会被调用，方法在自定义组件的属性变更之后同步执行</p><h3 id="内置组件双向绑定-语法" tabindex="-1"><a class="header-anchor" href="#内置组件双向绑定-语法" aria-hidden="true">#</a> 内置组件双向绑定-$$语法</h3><p>$$运算符为系统内置组件提供TS变量的引用，使得TS变量和系统内置组件的内部状态保持同步,当前$$支持基础类型变量，以及@State、@Link和@Prop装饰的变量。 当前$$仅支持bindPopup属性方法的show参数，Radio组件的checked属性，Refresh组件的refreshing参数。 $$绑定的变量变化时，会触发UI的同步刷新</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// xxx.ets</span>
@Entry
@Component
struct bindPopupPage <span class="token punctuation">{</span>
  @State customPopup<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;Popup&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>customPopup <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>customPopup
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">bindPopup</span><span class="token punctuation">(</span>$$<span class="token keyword">this</span><span class="token punctuation">.</span>customPopup<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;showPopup&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,130),i=[c];function l(u,r){return s(),a("div",null,i)}const d=n(o,[["render",l],["__file","grammar.html.vue"]]);export{d as default};
